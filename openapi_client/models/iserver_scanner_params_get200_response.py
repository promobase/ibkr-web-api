# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.iserver_scanner_params_get200_response_filter_list_inner import IserverScannerParamsGet200ResponseFilterListInner
from openapi_client.models.iserver_scanner_params_get200_response_instrument_list_inner import IserverScannerParamsGet200ResponseInstrumentListInner
from openapi_client.models.iserver_scanner_params_get200_response_location_tree_inner import IserverScannerParamsGet200ResponseLocationTreeInner
from openapi_client.models.iserver_scanner_params_get200_response_scan_type_list_inner import IserverScannerParamsGet200ResponseScanTypeListInner
from typing import Optional, Set
from typing_extensions import Self

class IserverScannerParamsGet200Response(BaseModel):
    """
    IserverScannerParamsGet200Response
    """ # noqa: E501
    scan_type_list: Optional[List[IserverScannerParamsGet200ResponseScanTypeListInner]] = None
    instrument_list: Optional[List[IserverScannerParamsGet200ResponseInstrumentListInner]] = None
    filter_list: Optional[List[IserverScannerParamsGet200ResponseFilterListInner]] = None
    location_tree: Optional[List[IserverScannerParamsGet200ResponseLocationTreeInner]] = None
    __properties: ClassVar[List[str]] = ["scan_type_list", "instrument_list", "filter_list", "location_tree"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IserverScannerParamsGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in scan_type_list (list)
        _items = []
        if self.scan_type_list:
            for _item_scan_type_list in self.scan_type_list:
                if _item_scan_type_list:
                    _items.append(_item_scan_type_list.to_dict())
            _dict['scan_type_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in instrument_list (list)
        _items = []
        if self.instrument_list:
            for _item_instrument_list in self.instrument_list:
                if _item_instrument_list:
                    _items.append(_item_instrument_list.to_dict())
            _dict['instrument_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filter_list (list)
        _items = []
        if self.filter_list:
            for _item_filter_list in self.filter_list:
                if _item_filter_list:
                    _items.append(_item_filter_list.to_dict())
            _dict['filter_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in location_tree (list)
        _items = []
        if self.location_tree:
            for _item_location_tree in self.location_tree:
                if _item_location_tree:
                    _items.append(_item_location_tree.to_dict())
            _dict['location_tree'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IserverScannerParamsGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scan_type_list": [IserverScannerParamsGet200ResponseScanTypeListInner.from_dict(_item) for _item in obj["scan_type_list"]] if obj.get("scan_type_list") is not None else None,
            "instrument_list": [IserverScannerParamsGet200ResponseInstrumentListInner.from_dict(_item) for _item in obj["instrument_list"]] if obj.get("instrument_list") is not None else None,
            "filter_list": [IserverScannerParamsGet200ResponseFilterListInner.from_dict(_item) for _item in obj["filter_list"]] if obj.get("filter_list") is not None else None,
            "location_tree": [IserverScannerParamsGet200ResponseLocationTreeInner.from_dict(_item) for _item in obj["location_tree"]] if obj.get("location_tree") is not None else None
        })
        return _obj


