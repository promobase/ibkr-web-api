# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.contract_rules import ContractRules
from typing import Optional, Set
from typing_extensions import Self

class Contract(BaseModel):
    """
    Contains all details of the contract, including rules you can use when placing orders
    """ # noqa: E501
    r_t_h: Optional[StrictBool] = Field(default=None, description="true means you can trade outside RTH(regular trading hours)")
    con_id: Optional[StrictStr] = Field(default=None, description="same as that in request")
    company_name: Optional[StrictStr] = Field(default=None, description="Contracts company name")
    exchange: Optional[StrictStr] = None
    local_symbol: Optional[StrictStr] = Field(default=None, description="for exmple FB")
    instrument_type: Optional[StrictStr] = Field(default=None, description="for example STK")
    currency: Optional[StrictStr] = None
    company_name: Optional[StrictStr] = Field(default=None, alias="companyName")
    category: Optional[StrictStr] = None
    industry: Optional[StrictStr] = None
    rules: Optional[ContractRules] = None
    __properties: ClassVar[List[str]] = ["r_t_h", "con_id", "company_name", "exchange", "local_symbol", "instrument_type", "currency", "companyName", "category", "industry", "rules"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Contract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rules
        if self.rules:
            _dict['rules'] = self.rules.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Contract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "r_t_h": obj.get("r_t_h"),
            "con_id": obj.get("con_id"),
            "company_name": obj.get("company_name"),
            "exchange": obj.get("exchange"),
            "local_symbol": obj.get("local_symbol"),
            "instrument_type": obj.get("instrument_type"),
            "currency": obj.get("currency"),
            "companyName": obj.get("companyName"),
            "category": obj.get("category"),
            "industry": obj.get("industry"),
            "rules": ContractRules.from_dict(obj["rules"]) if obj.get("rules") is not None else None
        })
        return _obj


