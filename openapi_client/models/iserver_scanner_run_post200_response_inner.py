# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IserverScannerRunPost200ResponseInner(BaseModel):
    """
    IserverScannerRunPost200ResponseInner
    """ # noqa: E501
    server_id: Optional[StrictStr] = None
    column_name: Optional[StrictStr] = None
    symbol: Optional[StrictStr] = Field(default=None, description="Underlying symbol")
    conidex: Optional[StrictStr] = Field(default=None, description="conid and exchange. Format supports conid or conid@exchange")
    con_id: Optional[Union[StrictFloat, StrictInt]] = None
    available_chart_periods: Optional[StrictStr] = Field(default=None, description="List of available chart periods")
    company_name: Optional[StrictStr] = Field(default=None, description="Contracts company name")
    contract_description_1: Optional[StrictStr] = Field(default=None, description="Format contract name")
    listing_exchange: Optional[StrictStr] = None
    sec_type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["server_id", "column_name", "symbol", "conidex", "con_id", "available_chart_periods", "company_name", "contract_description_1", "listing_exchange", "sec_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IserverScannerRunPost200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IserverScannerRunPost200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "server_id": obj.get("server_id"),
            "column_name": obj.get("column_name"),
            "symbol": obj.get("symbol"),
            "conidex": obj.get("conidex"),
            "con_id": obj.get("con_id"),
            "available_chart_periods": obj.get("available_chart_periods"),
            "company_name": obj.get("company_name"),
            "contract_description_1": obj.get("contract_description_1"),
            "listing_exchange": obj.get("listing_exchange"),
            "sec_type": obj.get("sec_type")
        })
        return _obj


