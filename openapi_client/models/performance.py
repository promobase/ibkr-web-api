# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.performance_cps import PerformanceCps
from openapi_client.models.performance_nav import PerformanceNav
from openapi_client.models.performance_tpps import PerformanceTpps
from typing import Optional, Set
from typing_extensions import Self

class Performance(BaseModel):
    """
    Performance
    """ # noqa: E501
    id: Optional[StrictStr] = None
    cps: Optional[PerformanceCps] = None
    tpps: Optional[PerformanceTpps] = None
    nav: Optional[PerformanceNav] = None
    pm: Optional[StrictStr] = None
    included: Optional[List[StrictStr]] = None
    currency_type: Optional[StrictStr] = Field(default=None, alias="currencyType")
    rc: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "cps", "tpps", "nav", "pm", "included", "currencyType", "rc"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Performance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cps
        if self.cps:
            _dict['cps'] = self.cps.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tpps
        if self.tpps:
            _dict['tpps'] = self.tpps.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nav
        if self.nav:
            _dict['nav'] = self.nav.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Performance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "cps": PerformanceCps.from_dict(obj["cps"]) if obj.get("cps") is not None else None,
            "tpps": PerformanceTpps.from_dict(obj["tpps"]) if obj.get("tpps") is not None else None,
            "nav": PerformanceNav.from_dict(obj["nav"]) if obj.get("nav") is not None else None,
            "pm": obj.get("pm"),
            "included": obj.get("included"),
            "currencyType": obj.get("currencyType"),
            "rc": obj.get("rc")
        })
        return _obj


