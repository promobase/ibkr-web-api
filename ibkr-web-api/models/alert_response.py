# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibkr-web-api.models.alert_response_conditions_inner import AlertResponseConditionsInner
from typing import Optional, Set
from typing_extensions import Self

class AlertResponse(BaseModel):
    """
    AlertResponse
    """ # noqa: E501
    account: Optional[StrictStr] = Field(default=None, description="account id")
    order_id: Optional[StrictInt] = None
    alert_name: Optional[StrictStr] = Field(default=None, description="name of alert")
    alert_message: Optional[StrictStr] = Field(default=None, description="The message you want to receive via email or text message")
    alert_active: Optional[StrictInt] = Field(default=None, description="whether alert is active or not, so value can only be 0 or 1")
    alert_repeatable: Optional[StrictInt] = Field(default=None, description="whether alert is repeatable or not, so value can only be 0 or 1")
    alert_email: Optional[StrictStr] = Field(default=None, description="email address to receive alert")
    alert_send_message: Optional[StrictInt] = Field(default=None, description="whether allowing to send email or not, so value can only be 0 or 1, ")
    tif: Optional[StrictStr] = Field(default=None, description="time in force, can only be GTC or GTD")
    expire_time: Optional[StrictStr] = Field(default=None, description="format, YYYYMMDD-HH:mm:ss ")
    order_status: Optional[StrictStr] = Field(default=None, description="status of alert")
    outside_rth: Optional[StrictInt] = Field(default=None, description="value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours. ", alias="outsideRth")
    itws_orders_only: Optional[StrictInt] = Field(default=None, description="value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile ")
    alert_show_popup: Optional[StrictInt] = Field(default=None, description="value can only be 0 or 1, set to 1 to allow to show alert in pop-ups")
    alert_triggered: Optional[StrictBool] = Field(default=None, description="whether the alert has been triggered")
    order_not_editable: Optional[StrictBool] = Field(default=None, description="whether the alert can be edited")
    tool_id: Optional[StrictInt] = Field(default=None, description="for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert ")
    alert_play_audio: Optional[StrictStr] = Field(default=None, description="audio message to play when alert is triggered")
    alert_mta_currency: Optional[StrictStr] = Field(default=None, description="MTA alert only")
    alert_mta_defaults: Optional[StrictStr] = Field(default=None, description="MTA alert only")
    time_zone: Optional[StrictStr] = Field(default=None, description="MTA alert only")
    alert_default_type: Optional[StrictStr] = Field(default=None, description="MTA alert only")
    condition_size: Optional[StrictInt] = Field(default=None, description="size of conditions array")
    condition_outside_rth: Optional[StrictInt] = Field(default=None, description="whether allowing the condition can be triggered outside of regular trading hours, 1 means allow")
    conditions: Optional[List[AlertResponseConditionsInner]] = None
    __properties: ClassVar[List[str]] = ["account", "order_id", "alert_name", "alert_message", "alert_active", "alert_repeatable", "alert_email", "alert_send_message", "tif", "expire_time", "order_status", "outsideRth", "itws_orders_only", "alert_show_popup", "alert_triggered", "order_not_editable", "tool_id", "alert_play_audio", "alert_mta_currency", "alert_mta_defaults", "time_zone", "alert_default_type", "condition_size", "condition_outside_rth", "conditions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": obj.get("account"),
            "order_id": obj.get("order_id"),
            "alert_name": obj.get("alert_name"),
            "alert_message": obj.get("alert_message"),
            "alert_active": obj.get("alert_active"),
            "alert_repeatable": obj.get("alert_repeatable"),
            "alert_email": obj.get("alert_email"),
            "alert_send_message": obj.get("alert_send_message"),
            "tif": obj.get("tif"),
            "expire_time": obj.get("expire_time"),
            "order_status": obj.get("order_status"),
            "outsideRth": obj.get("outsideRth"),
            "itws_orders_only": obj.get("itws_orders_only"),
            "alert_show_popup": obj.get("alert_show_popup"),
            "alert_triggered": obj.get("alert_triggered"),
            "order_not_editable": obj.get("order_not_editable"),
            "tool_id": obj.get("tool_id"),
            "alert_play_audio": obj.get("alert_play_audio"),
            "alert_mta_currency": obj.get("alert_mta_currency"),
            "alert_mta_defaults": obj.get("alert_mta_defaults"),
            "time_zone": obj.get("time_zone"),
            "alert_default_type": obj.get("alert_default_type"),
            "condition_size": obj.get("condition_size"),
            "condition_outside_rth": obj.get("condition_outside_rth"),
            "conditions": [AlertResponseConditionsInner.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None
        })
        return _obj


