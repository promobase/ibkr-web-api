# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ibkr-web-api.models.iserver_account_orders_get200_response_orders_inner import IserverAccountOrdersGet200ResponseOrdersInner
from typing import Optional, Set
from typing_extensions import Self

class IserverAccountOrdersGet200Response(BaseModel):
    """
    IserverAccountOrdersGet200Response
    """ # noqa: E501
    filters: Optional[List[StrictStr]] = None
    orders: Optional[List[IserverAccountOrdersGet200ResponseOrdersInner]] = None
    snapshot: Optional[StrictBool] = Field(default=None, description="If live order update is a snapshot")
    __properties: ClassVar[List[str]] = ["filters", "orders", "snapshot"]

    @field_validator('filters')
    def filters_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['inactive', 'pending_submit', 'pre_submitted', 'submitted', 'filled', 'pending_cancel', 'cancelled', 'warn_state', 'sort_by_time']):
                raise ValueError("each list item must be one of ('inactive', 'pending_submit', 'pre_submitted', 'submitted', 'filled', 'pending_cancel', 'cancelled', 'warn_state', 'sort_by_time')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IserverAccountOrdersGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in orders (list)
        _items = []
        if self.orders:
            for _item_orders in self.orders:
                if _item_orders:
                    _items.append(_item_orders.to_dict())
            _dict['orders'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IserverAccountOrdersGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filters": obj.get("filters"),
            "orders": [IserverAccountOrdersGet200ResponseOrdersInner.from_dict(_item) for _item in obj["orders"]] if obj.get("orders") is not None else None,
            "snapshot": obj.get("snapshot")
        })
        return _obj


