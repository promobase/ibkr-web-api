# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ibkr-web-api.models.iserver_contract_conid_info_and_rules_get200_response_rules_inner import IserverContractConidInfoAndRulesGet200ResponseRulesInner
from typing import Optional, Set
from typing_extensions import Self

class IserverContractConidInfoAndRulesGet200Response(BaseModel):
    """
    IserverContractConidInfoAndRulesGet200Response
    """ # noqa: E501
    cfi_code: Optional[StrictStr] = Field(default=None, description="Classification of Financial Instrument codes")
    symbol: Optional[StrictStr] = Field(default=None, description="Underlying symbol")
    cusip: Optional[StrictStr] = None
    expiry_full: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Expiration Date in the format YYYYMMDD")
    con_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="IBKRs contract identifier")
    maturity_date: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Date on which the underlying transaction settles if the option is exercised")
    industry: Optional[StrictStr] = Field(default=None, description="Specific group of companies or businesses.")
    instrument_type: Optional[StrictStr] = Field(default=None, description="Asset Class of the contract")
    trading_class: Optional[StrictStr] = Field(default=None, description="Designation of the contract")
    valid_exchanges: Optional[StrictStr] = Field(default=None, description="Comma separated list of exchanges or trading venues")
    allow_sell_long: Optional[StrictBool] = Field(default=None, description="Allowed to sell shares that you own")
    is_zero_commission_security: Optional[StrictBool] = Field(default=None, description="Supports zero commission trades")
    local_symbol: Optional[StrictStr] = Field(default=None, description="Contracts symbol from primary exchange. For options it is the OCC symbol.")
    classifier: Optional[StrictStr] = None
    currency: Optional[StrictStr] = Field(default=None, description="Currency contract trades in")
    text: Optional[StrictStr] = Field(default=None, description="Formatted contract parameters")
    underlying_con_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="IBKRs contract identifier for the underlying instrument")
    r_t_h: Optional[StrictBool] = Field(default=None, description="Provides trading outside of Regular Trading Hours")
    multiplier: Optional[StrictStr] = Field(default=None, description="numerical value of each point of price movement")
    strike: Optional[StrictStr] = Field(default=None, description="fixed price at which the owner of the option buys or sells the underlying")
    right: Optional[StrictStr] = Field(default=None, description="Put or Call of the option")
    underlying_issuer: Optional[StrictStr] = Field(default=None, description="Legal entity for underlying contract")
    contract_month: Optional[StrictStr] = Field(default=None, description="Month the contract must be satisfied by making or accepting delivery")
    company_name: Optional[StrictStr] = Field(default=None, description="Contracts company name")
    smart_available: Optional[StrictBool] = Field(default=None, description="Support IBKRs SMART routing")
    exchange: Optional[StrictStr] = Field(default=None, description="Primary Exchange, Routing or Trading Venue")
    rules: Optional[List[IserverContractConidInfoAndRulesGet200ResponseRulesInner]] = None
    __properties: ClassVar[List[str]] = ["cfi_code", "symbol", "cusip", "expiry_full", "con_id", "maturity_date", "industry", "instrument_type", "trading_class", "valid_exchanges", "allow_sell_long", "is_zero_commission_security", "local_symbol", "classifier", "currency", "text", "underlying_con_id", "r_t_h", "multiplier", "strike", "right", "underlying_issuer", "contract_month", "company_name", "smart_available", "exchange", "rules"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IserverContractConidInfoAndRulesGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item_rules in self.rules:
                if _item_rules:
                    _items.append(_item_rules.to_dict())
            _dict['rules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IserverContractConidInfoAndRulesGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cfi_code": obj.get("cfi_code"),
            "symbol": obj.get("symbol"),
            "cusip": obj.get("cusip"),
            "expiry_full": obj.get("expiry_full"),
            "con_id": obj.get("con_id"),
            "maturity_date": obj.get("maturity_date"),
            "industry": obj.get("industry"),
            "instrument_type": obj.get("instrument_type"),
            "trading_class": obj.get("trading_class"),
            "valid_exchanges": obj.get("valid_exchanges"),
            "allow_sell_long": obj.get("allow_sell_long"),
            "is_zero_commission_security": obj.get("is_zero_commission_security"),
            "local_symbol": obj.get("local_symbol"),
            "classifier": obj.get("classifier"),
            "currency": obj.get("currency"),
            "text": obj.get("text"),
            "underlying_con_id": obj.get("underlying_con_id"),
            "r_t_h": obj.get("r_t_h"),
            "multiplier": obj.get("multiplier"),
            "strike": obj.get("strike"),
            "right": obj.get("right"),
            "underlying_issuer": obj.get("underlying_issuer"),
            "contract_month": obj.get("contract_month"),
            "company_name": obj.get("company_name"),
            "smart_available": obj.get("smart_available"),
            "exchange": obj.get("exchange"),
            "rules": [IserverContractConidInfoAndRulesGet200ResponseRulesInner.from_dict(_item) for _item in obj["rules"]] if obj.get("rules") is not None else None
        })
        return _obj


