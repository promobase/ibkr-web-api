# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from ibkr-web-api.models.summary import Summary
from typing import Optional, Set
from typing_extensions import Self

class PortfolioAccountIdSummaryGet200Response(BaseModel):
    """
    PortfolioAccountIdSummaryGet200Response
    """ # noqa: E501
    accountready: Optional[Summary] = None
    accounttype: Optional[Summary] = None
    accruedcash: Optional[Summary] = None
    accruedcash_c: Optional[Summary] = Field(default=None, alias="accruedcash-c")
    accruedcash_f: Optional[Summary] = Field(default=None, alias="accruedcash-f")
    accruedcash_s: Optional[Summary] = Field(default=None, alias="accruedcash-s")
    accrueddividend: Optional[Summary] = None
    accrueddividend_c: Optional[Summary] = Field(default=None, alias="accrueddividend-c")
    accrueddividend_f: Optional[Summary] = Field(default=None, alias="accrueddividend-f")
    accrueddividend_s: Optional[Summary] = Field(default=None, alias="accrueddividend-s")
    availablefunds: Optional[Summary] = None
    availablefunds_c: Optional[Summary] = Field(default=None, alias="availablefunds-c")
    availablefunds_f: Optional[Summary] = Field(default=None, alias="availablefunds-f")
    availablefunds_s: Optional[Summary] = Field(default=None, alias="availablefunds-s")
    billable: Optional[Summary] = None
    billable_c: Optional[Summary] = Field(default=None, alias="billable-c")
    billable_f: Optional[Summary] = Field(default=None, alias="billable-f")
    billable_s: Optional[Summary] = Field(default=None, alias="billable-s")
    buyingpower: Optional[Summary] = None
    cushion: Optional[Summary] = None
    daytradesremaining: Optional[Summary] = None
    daytradesremainingt1: Optional[Summary] = Field(default=None, alias="daytradesremainingt+1")
    daytradesremainingt2: Optional[Summary] = Field(default=None, alias="daytradesremainingt+2")
    daytradesremainingt3: Optional[Summary] = Field(default=None, alias="daytradesremainingt+3")
    daytradesremainingt4: Optional[Summary] = Field(default=None, alias="daytradesremainingt+4")
    equitywithloanvalue: Optional[Summary] = None
    equitywithloanvalue_c: Optional[Summary] = Field(default=None, alias="equitywithloanvalue-c")
    equitywithloanvalue_f: Optional[Summary] = Field(default=None, alias="equitywithloanvalue-f")
    equitywithloanvalue_s: Optional[Summary] = Field(default=None, alias="equitywithloanvalue-s")
    excessliquidity: Optional[Summary] = None
    excessliquidity_c: Optional[Summary] = Field(default=None, alias="excessliquidity-c")
    excessliquidity_f: Optional[Summary] = Field(default=None, alias="excessliquidity-f")
    excessliquidity_s: Optional[Summary] = Field(default=None, alias="excessliquidity-s")
    fullavailablefunds: Optional[Summary] = None
    fullavailablefunds_c: Optional[Summary] = Field(default=None, alias="fullavailablefunds-c")
    fullavailablefunds_f: Optional[Summary] = Field(default=None, alias="fullavailablefunds-f")
    fullavailablefunds_s: Optional[Summary] = Field(default=None, alias="fullavailablefunds-s")
    fullexcessliquidity: Optional[Summary] = None
    fullexcessliquidity_c: Optional[Summary] = Field(default=None, alias="fullexcessliquidity-c")
    fullexcessliquidity_f: Optional[Summary] = Field(default=None, alias="fullexcessliquidity-f")
    fullexcessliquidity_s: Optional[Summary] = Field(default=None, alias="fullexcessliquidity-s")
    fullinitmarginreq: Optional[Summary] = None
    fullinitmarginreq_c: Optional[Summary] = Field(default=None, alias="fullinitmarginreq-c")
    fullinitmarginreq_f: Optional[Summary] = Field(default=None, alias="fullinitmarginreq-f")
    fullinitmarginreq_s: Optional[Summary] = Field(default=None, alias="fullinitmarginreq-s")
    fullmaintmarginreq: Optional[Summary] = None
    fullmaintmarginreq_c: Optional[Summary] = Field(default=None, alias="fullmaintmarginreq-c")
    fullmaintmarginreq_f: Optional[Summary] = Field(default=None, alias="fullmaintmarginreq-f")
    fullmaintmarginreq_s: Optional[Summary] = Field(default=None, alias="fullmaintmarginreq-s")
    grosspositionvalue: Optional[Summary] = None
    grosspositionvalue_c: Optional[Summary] = Field(default=None, alias="grosspositionvalue-c")
    grosspositionvalue_f: Optional[Summary] = Field(default=None, alias="grosspositionvalue-f")
    grosspositionvalue_s: Optional[Summary] = Field(default=None, alias="grosspositionvalue-s")
    guarantee: Optional[Summary] = None
    guarantee_c: Optional[Summary] = Field(default=None, alias="guarantee-c")
    guarantee_f: Optional[Summary] = Field(default=None, alias="guarantee-f")
    guarantee_s: Optional[Summary] = Field(default=None, alias="guarantee-s")
    highestseverity: Optional[Summary] = None
    highestseverity_c: Optional[Summary] = Field(default=None, alias="highestseverity-c")
    highestseverity_f: Optional[Summary] = Field(default=None, alias="highestseverity-f")
    highestseverity_s: Optional[Summary] = Field(default=None, alias="highestseverity-s")
    indianstockhaircut: Optional[Summary] = None
    indianstockhaircut_c: Optional[Summary] = Field(default=None, alias="indianstockhaircut-c")
    indianstockhaircut_f: Optional[Summary] = Field(default=None, alias="indianstockhaircut-f")
    indianstockhaircut_s: Optional[Summary] = Field(default=None, alias="indianstockhaircut-s")
    initmarginreq: Optional[Summary] = None
    initmarginreq_c: Optional[Summary] = Field(default=None, alias="initmarginreq-c")
    initmarginreq_f: Optional[Summary] = Field(default=None, alias="initmarginreq-f")
    initmarginreq_s: Optional[Summary] = Field(default=None, alias="initmarginreq-s")
    leverage: Optional[Summary] = None
    leverage_c: Optional[Summary] = Field(default=None, alias="leverage-c")
    leverage_f: Optional[Summary] = Field(default=None, alias="leverage-f")
    leverage_s: Optional[Summary] = Field(default=None, alias="leverage-s")
    lookaheadavailablefunds: Optional[Summary] = None
    lookaheadavailablefunds_c: Optional[Summary] = Field(default=None, alias="lookaheadavailablefunds-c")
    lookaheadavailablefunds_f: Optional[Summary] = Field(default=None, alias="lookaheadavailablefunds-f")
    lookaheadavailablefunds_s: Optional[Summary] = Field(default=None, alias="lookaheadavailablefunds-s")
    lookaheadexcessliquidity: Optional[Summary] = None
    lookaheadexcessliquidity_c: Optional[Summary] = Field(default=None, alias="lookaheadexcessliquidity-c")
    lookaheadexcessliquidity_f: Optional[Summary] = Field(default=None, alias="lookaheadexcessliquidity-f")
    lookaheadexcessliquidity_s: Optional[Summary] = Field(default=None, alias="lookaheadexcessliquidity-s")
    lookaheadinitmarginreq: Optional[Summary] = None
    lookaheadinitmarginreq_c: Optional[Summary] = Field(default=None, alias="lookaheadinitmarginreq-c")
    lookaheadinitmarginreq_f: Optional[Summary] = Field(default=None, alias="lookaheadinitmarginreq-f")
    lookaheadinitmarginreq_s: Optional[Summary] = Field(default=None, alias="lookaheadinitmarginreq-s")
    lookaheadmaintmarginreq: Optional[Summary] = None
    lookaheadmaintmarginreq_c: Optional[Summary] = Field(default=None, alias="lookaheadmaintmarginreq-c")
    lookaheadmaintmarginreq_f: Optional[Summary] = Field(default=None, alias="lookaheadmaintmarginreq-f")
    lookaheadmaintmarginreq_s: Optional[Summary] = Field(default=None, alias="lookaheadmaintmarginreq-s")
    lookaheadnextchange: Optional[Summary] = None
    maintmarginreq: Optional[Summary] = None
    maintmarginreq_c: Optional[Summary] = Field(default=None, alias="maintmarginreq-c")
    maintmarginreq_f: Optional[Summary] = Field(default=None, alias="maintmarginreq-f")
    maintmarginreq_s: Optional[Summary] = Field(default=None, alias="maintmarginreq-s")
    netliquidation: Optional[Summary] = None
    netliquidation_c: Optional[Summary] = Field(default=None, alias="netliquidation-c")
    netliquidation_f: Optional[Summary] = Field(default=None, alias="netliquidation-f")
    netliquidation_s: Optional[Summary] = Field(default=None, alias="netliquidation-s")
    netliquidationuncertainty: Optional[Summary] = None
    nlvandmargininreview: Optional[Summary] = None
    pasharesvalue: Optional[Summary] = None
    pasharesvalue_c: Optional[Summary] = Field(default=None, alias="pasharesvalue-c")
    pasharesvalue_f: Optional[Summary] = Field(default=None, alias="pasharesvalue-f")
    pasharesvalue_s: Optional[Summary] = Field(default=None, alias="pasharesvalue-s")
    postexpirationexcess: Optional[Summary] = None
    postexpirationexcess_c: Optional[Summary] = Field(default=None, alias="postexpirationexcess-c")
    postexpirationexcess_f: Optional[Summary] = Field(default=None, alias="postexpirationexcess-f")
    postexpirationexcess_s: Optional[Summary] = Field(default=None, alias="postexpirationexcess-s")
    postexpirationmargin: Optional[Summary] = None
    postexpirationmargin_c: Optional[Summary] = Field(default=None, alias="postexpirationmargin-c")
    postexpirationmargin_f: Optional[Summary] = Field(default=None, alias="postexpirationmargin-f")
    postexpirationmargin_s: Optional[Summary] = Field(default=None, alias="postexpirationmargin-s")
    previousdayequitywithloanvalue: Optional[Summary] = None
    previousdayequitywithloanvalue_c: Optional[Summary] = Field(default=None, alias="previousdayequitywithloanvalue-c")
    previousdayequitywithloanvalue_f: Optional[Summary] = Field(default=None, alias="previousdayequitywithloanvalue-f")
    previousdayequitywithloanvalue_s: Optional[Summary] = Field(default=None, alias="previousdayequitywithloanvalue-s")
    segmenttitle_c: Optional[Summary] = Field(default=None, alias="segmenttitle-c")
    segmenttitle_f: Optional[Summary] = Field(default=None, alias="segmenttitle-f")
    segmenttitle_s: Optional[Summary] = Field(default=None, alias="segmenttitle-s")
    totalcashvalue: Optional[Summary] = None
    totalcashvalue_c: Optional[Summary] = Field(default=None, alias="totalcashvalue-c")
    totalcashvalue_f: Optional[Summary] = Field(default=None, alias="totalcashvalue-f")
    totalcashvalue_s: Optional[Summary] = Field(default=None, alias="totalcashvalue-s")
    totaldebitcardpendingcharges: Optional[Summary] = None
    totaldebitcardpendingcharges_c: Optional[Summary] = Field(default=None, alias="totaldebitcardpendingcharges-c")
    totaldebitcardpendingcharges_f: Optional[Summary] = Field(default=None, alias="totaldebitcardpendingcharges-f")
    totaldebitcardpendingcharges_s: Optional[Summary] = Field(default=None, alias="totaldebitcardpendingcharges-s")
    tradingtype_f: Optional[Summary] = Field(default=None, alias="tradingtype-f")
    tradingtype_s: Optional[Summary] = Field(default=None, alias="tradingtype-s")
    __properties: ClassVar[List[str]] = ["accountready", "accounttype", "accruedcash", "accruedcash-c", "accruedcash-f", "accruedcash-s", "accrueddividend", "accrueddividend-c", "accrueddividend-f", "accrueddividend-s", "availablefunds", "availablefunds-c", "availablefunds-f", "availablefunds-s", "billable", "billable-c", "billable-f", "billable-s", "buyingpower", "cushion", "daytradesremaining", "daytradesremainingt+1", "daytradesremainingt+2", "daytradesremainingt+3", "daytradesremainingt+4", "equitywithloanvalue", "equitywithloanvalue-c", "equitywithloanvalue-f", "equitywithloanvalue-s", "excessliquidity", "excessliquidity-c", "excessliquidity-f", "excessliquidity-s", "fullavailablefunds", "fullavailablefunds-c", "fullavailablefunds-f", "fullavailablefunds-s", "fullexcessliquidity", "fullexcessliquidity-c", "fullexcessliquidity-f", "fullexcessliquidity-s", "fullinitmarginreq", "fullinitmarginreq-c", "fullinitmarginreq-f", "fullinitmarginreq-s", "fullmaintmarginreq", "fullmaintmarginreq-c", "fullmaintmarginreq-f", "fullmaintmarginreq-s", "grosspositionvalue", "grosspositionvalue-c", "grosspositionvalue-f", "grosspositionvalue-s", "guarantee", "guarantee-c", "guarantee-f", "guarantee-s", "highestseverity", "highestseverity-c", "highestseverity-f", "highestseverity-s", "indianstockhaircut", "indianstockhaircut-c", "indianstockhaircut-f", "indianstockhaircut-s", "initmarginreq", "initmarginreq-c", "initmarginreq-f", "initmarginreq-s", "leverage", "leverage-c", "leverage-f", "leverage-s", "lookaheadavailablefunds", "lookaheadavailablefunds-c", "lookaheadavailablefunds-f", "lookaheadavailablefunds-s", "lookaheadexcessliquidity", "lookaheadexcessliquidity-c", "lookaheadexcessliquidity-f", "lookaheadexcessliquidity-s", "lookaheadinitmarginreq", "lookaheadinitmarginreq-c", "lookaheadinitmarginreq-f", "lookaheadinitmarginreq-s", "lookaheadmaintmarginreq", "lookaheadmaintmarginreq-c", "lookaheadmaintmarginreq-f", "lookaheadmaintmarginreq-s", "lookaheadnextchange", "maintmarginreq", "maintmarginreq-c", "maintmarginreq-f", "maintmarginreq-s", "netliquidation", "netliquidation-c", "netliquidation-f", "netliquidation-s", "netliquidationuncertainty", "nlvandmargininreview", "pasharesvalue", "pasharesvalue-c", "pasharesvalue-f", "pasharesvalue-s", "postexpirationexcess", "postexpirationexcess-c", "postexpirationexcess-f", "postexpirationexcess-s", "postexpirationmargin", "postexpirationmargin-c", "postexpirationmargin-f", "postexpirationmargin-s", "previousdayequitywithloanvalue", "previousdayequitywithloanvalue-c", "previousdayequitywithloanvalue-f", "previousdayequitywithloanvalue-s", "segmenttitle-c", "segmenttitle-f", "segmenttitle-s", "totalcashvalue", "totalcashvalue-c", "totalcashvalue-f", "totalcashvalue-s", "totaldebitcardpendingcharges", "totaldebitcardpendingcharges-c", "totaldebitcardpendingcharges-f", "totaldebitcardpendingcharges-s", "tradingtype-f", "tradingtype-s"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PortfolioAccountIdSummaryGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accountready
        if self.accountready:
            _dict['accountready'] = self.accountready.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accounttype
        if self.accounttype:
            _dict['accounttype'] = self.accounttype.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accruedcash
        if self.accruedcash:
            _dict['accruedcash'] = self.accruedcash.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accruedcash_c
        if self.accruedcash_c:
            _dict['accruedcash-c'] = self.accruedcash_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accruedcash_f
        if self.accruedcash_f:
            _dict['accruedcash-f'] = self.accruedcash_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accruedcash_s
        if self.accruedcash_s:
            _dict['accruedcash-s'] = self.accruedcash_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accrueddividend
        if self.accrueddividend:
            _dict['accrueddividend'] = self.accrueddividend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accrueddividend_c
        if self.accrueddividend_c:
            _dict['accrueddividend-c'] = self.accrueddividend_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accrueddividend_f
        if self.accrueddividend_f:
            _dict['accrueddividend-f'] = self.accrueddividend_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accrueddividend_s
        if self.accrueddividend_s:
            _dict['accrueddividend-s'] = self.accrueddividend_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of availablefunds
        if self.availablefunds:
            _dict['availablefunds'] = self.availablefunds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of availablefunds_c
        if self.availablefunds_c:
            _dict['availablefunds-c'] = self.availablefunds_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of availablefunds_f
        if self.availablefunds_f:
            _dict['availablefunds-f'] = self.availablefunds_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of availablefunds_s
        if self.availablefunds_s:
            _dict['availablefunds-s'] = self.availablefunds_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billable
        if self.billable:
            _dict['billable'] = self.billable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billable_c
        if self.billable_c:
            _dict['billable-c'] = self.billable_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billable_f
        if self.billable_f:
            _dict['billable-f'] = self.billable_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billable_s
        if self.billable_s:
            _dict['billable-s'] = self.billable_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of buyingpower
        if self.buyingpower:
            _dict['buyingpower'] = self.buyingpower.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cushion
        if self.cushion:
            _dict['cushion'] = self.cushion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of daytradesremaining
        if self.daytradesremaining:
            _dict['daytradesremaining'] = self.daytradesremaining.to_dict()
        # override the default output from pydantic by calling `to_dict()` of daytradesremainingt1
        if self.daytradesremainingt1:
            _dict['daytradesremainingt+1'] = self.daytradesremainingt1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of daytradesremainingt2
        if self.daytradesremainingt2:
            _dict['daytradesremainingt+2'] = self.daytradesremainingt2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of daytradesremainingt3
        if self.daytradesremainingt3:
            _dict['daytradesremainingt+3'] = self.daytradesremainingt3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of daytradesremainingt4
        if self.daytradesremainingt4:
            _dict['daytradesremainingt+4'] = self.daytradesremainingt4.to_dict()
        # override the default output from pydantic by calling `to_dict()` of equitywithloanvalue
        if self.equitywithloanvalue:
            _dict['equitywithloanvalue'] = self.equitywithloanvalue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of equitywithloanvalue_c
        if self.equitywithloanvalue_c:
            _dict['equitywithloanvalue-c'] = self.equitywithloanvalue_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of equitywithloanvalue_f
        if self.equitywithloanvalue_f:
            _dict['equitywithloanvalue-f'] = self.equitywithloanvalue_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of equitywithloanvalue_s
        if self.equitywithloanvalue_s:
            _dict['equitywithloanvalue-s'] = self.equitywithloanvalue_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of excessliquidity
        if self.excessliquidity:
            _dict['excessliquidity'] = self.excessliquidity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of excessliquidity_c
        if self.excessliquidity_c:
            _dict['excessliquidity-c'] = self.excessliquidity_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of excessliquidity_f
        if self.excessliquidity_f:
            _dict['excessliquidity-f'] = self.excessliquidity_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of excessliquidity_s
        if self.excessliquidity_s:
            _dict['excessliquidity-s'] = self.excessliquidity_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fullavailablefunds
        if self.fullavailablefunds:
            _dict['fullavailablefunds'] = self.fullavailablefunds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fullavailablefunds_c
        if self.fullavailablefunds_c:
            _dict['fullavailablefunds-c'] = self.fullavailablefunds_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fullavailablefunds_f
        if self.fullavailablefunds_f:
            _dict['fullavailablefunds-f'] = self.fullavailablefunds_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fullavailablefunds_s
        if self.fullavailablefunds_s:
            _dict['fullavailablefunds-s'] = self.fullavailablefunds_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fullexcessliquidity
        if self.fullexcessliquidity:
            _dict['fullexcessliquidity'] = self.fullexcessliquidity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fullexcessliquidity_c
        if self.fullexcessliquidity_c:
            _dict['fullexcessliquidity-c'] = self.fullexcessliquidity_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fullexcessliquidity_f
        if self.fullexcessliquidity_f:
            _dict['fullexcessliquidity-f'] = self.fullexcessliquidity_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fullexcessliquidity_s
        if self.fullexcessliquidity_s:
            _dict['fullexcessliquidity-s'] = self.fullexcessliquidity_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fullinitmarginreq
        if self.fullinitmarginreq:
            _dict['fullinitmarginreq'] = self.fullinitmarginreq.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fullinitmarginreq_c
        if self.fullinitmarginreq_c:
            _dict['fullinitmarginreq-c'] = self.fullinitmarginreq_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fullinitmarginreq_f
        if self.fullinitmarginreq_f:
            _dict['fullinitmarginreq-f'] = self.fullinitmarginreq_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fullinitmarginreq_s
        if self.fullinitmarginreq_s:
            _dict['fullinitmarginreq-s'] = self.fullinitmarginreq_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fullmaintmarginreq
        if self.fullmaintmarginreq:
            _dict['fullmaintmarginreq'] = self.fullmaintmarginreq.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fullmaintmarginreq_c
        if self.fullmaintmarginreq_c:
            _dict['fullmaintmarginreq-c'] = self.fullmaintmarginreq_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fullmaintmarginreq_f
        if self.fullmaintmarginreq_f:
            _dict['fullmaintmarginreq-f'] = self.fullmaintmarginreq_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fullmaintmarginreq_s
        if self.fullmaintmarginreq_s:
            _dict['fullmaintmarginreq-s'] = self.fullmaintmarginreq_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of grosspositionvalue
        if self.grosspositionvalue:
            _dict['grosspositionvalue'] = self.grosspositionvalue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of grosspositionvalue_c
        if self.grosspositionvalue_c:
            _dict['grosspositionvalue-c'] = self.grosspositionvalue_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of grosspositionvalue_f
        if self.grosspositionvalue_f:
            _dict['grosspositionvalue-f'] = self.grosspositionvalue_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of grosspositionvalue_s
        if self.grosspositionvalue_s:
            _dict['grosspositionvalue-s'] = self.grosspositionvalue_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of guarantee
        if self.guarantee:
            _dict['guarantee'] = self.guarantee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of guarantee_c
        if self.guarantee_c:
            _dict['guarantee-c'] = self.guarantee_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of guarantee_f
        if self.guarantee_f:
            _dict['guarantee-f'] = self.guarantee_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of guarantee_s
        if self.guarantee_s:
            _dict['guarantee-s'] = self.guarantee_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of highestseverity
        if self.highestseverity:
            _dict['highestseverity'] = self.highestseverity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of highestseverity_c
        if self.highestseverity_c:
            _dict['highestseverity-c'] = self.highestseverity_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of highestseverity_f
        if self.highestseverity_f:
            _dict['highestseverity-f'] = self.highestseverity_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of highestseverity_s
        if self.highestseverity_s:
            _dict['highestseverity-s'] = self.highestseverity_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of indianstockhaircut
        if self.indianstockhaircut:
            _dict['indianstockhaircut'] = self.indianstockhaircut.to_dict()
        # override the default output from pydantic by calling `to_dict()` of indianstockhaircut_c
        if self.indianstockhaircut_c:
            _dict['indianstockhaircut-c'] = self.indianstockhaircut_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of indianstockhaircut_f
        if self.indianstockhaircut_f:
            _dict['indianstockhaircut-f'] = self.indianstockhaircut_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of indianstockhaircut_s
        if self.indianstockhaircut_s:
            _dict['indianstockhaircut-s'] = self.indianstockhaircut_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initmarginreq
        if self.initmarginreq:
            _dict['initmarginreq'] = self.initmarginreq.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initmarginreq_c
        if self.initmarginreq_c:
            _dict['initmarginreq-c'] = self.initmarginreq_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initmarginreq_f
        if self.initmarginreq_f:
            _dict['initmarginreq-f'] = self.initmarginreq_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initmarginreq_s
        if self.initmarginreq_s:
            _dict['initmarginreq-s'] = self.initmarginreq_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leverage
        if self.leverage:
            _dict['leverage'] = self.leverage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leverage_c
        if self.leverage_c:
            _dict['leverage-c'] = self.leverage_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leverage_f
        if self.leverage_f:
            _dict['leverage-f'] = self.leverage_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leverage_s
        if self.leverage_s:
            _dict['leverage-s'] = self.leverage_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadavailablefunds
        if self.lookaheadavailablefunds:
            _dict['lookaheadavailablefunds'] = self.lookaheadavailablefunds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadavailablefunds_c
        if self.lookaheadavailablefunds_c:
            _dict['lookaheadavailablefunds-c'] = self.lookaheadavailablefunds_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadavailablefunds_f
        if self.lookaheadavailablefunds_f:
            _dict['lookaheadavailablefunds-f'] = self.lookaheadavailablefunds_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadavailablefunds_s
        if self.lookaheadavailablefunds_s:
            _dict['lookaheadavailablefunds-s'] = self.lookaheadavailablefunds_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadexcessliquidity
        if self.lookaheadexcessliquidity:
            _dict['lookaheadexcessliquidity'] = self.lookaheadexcessliquidity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadexcessliquidity_c
        if self.lookaheadexcessliquidity_c:
            _dict['lookaheadexcessliquidity-c'] = self.lookaheadexcessliquidity_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadexcessliquidity_f
        if self.lookaheadexcessliquidity_f:
            _dict['lookaheadexcessliquidity-f'] = self.lookaheadexcessliquidity_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadexcessliquidity_s
        if self.lookaheadexcessliquidity_s:
            _dict['lookaheadexcessliquidity-s'] = self.lookaheadexcessliquidity_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadinitmarginreq
        if self.lookaheadinitmarginreq:
            _dict['lookaheadinitmarginreq'] = self.lookaheadinitmarginreq.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadinitmarginreq_c
        if self.lookaheadinitmarginreq_c:
            _dict['lookaheadinitmarginreq-c'] = self.lookaheadinitmarginreq_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadinitmarginreq_f
        if self.lookaheadinitmarginreq_f:
            _dict['lookaheadinitmarginreq-f'] = self.lookaheadinitmarginreq_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadinitmarginreq_s
        if self.lookaheadinitmarginreq_s:
            _dict['lookaheadinitmarginreq-s'] = self.lookaheadinitmarginreq_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadmaintmarginreq
        if self.lookaheadmaintmarginreq:
            _dict['lookaheadmaintmarginreq'] = self.lookaheadmaintmarginreq.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadmaintmarginreq_c
        if self.lookaheadmaintmarginreq_c:
            _dict['lookaheadmaintmarginreq-c'] = self.lookaheadmaintmarginreq_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadmaintmarginreq_f
        if self.lookaheadmaintmarginreq_f:
            _dict['lookaheadmaintmarginreq-f'] = self.lookaheadmaintmarginreq_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadmaintmarginreq_s
        if self.lookaheadmaintmarginreq_s:
            _dict['lookaheadmaintmarginreq-s'] = self.lookaheadmaintmarginreq_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookaheadnextchange
        if self.lookaheadnextchange:
            _dict['lookaheadnextchange'] = self.lookaheadnextchange.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maintmarginreq
        if self.maintmarginreq:
            _dict['maintmarginreq'] = self.maintmarginreq.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maintmarginreq_c
        if self.maintmarginreq_c:
            _dict['maintmarginreq-c'] = self.maintmarginreq_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maintmarginreq_f
        if self.maintmarginreq_f:
            _dict['maintmarginreq-f'] = self.maintmarginreq_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maintmarginreq_s
        if self.maintmarginreq_s:
            _dict['maintmarginreq-s'] = self.maintmarginreq_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of netliquidation
        if self.netliquidation:
            _dict['netliquidation'] = self.netliquidation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of netliquidation_c
        if self.netliquidation_c:
            _dict['netliquidation-c'] = self.netliquidation_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of netliquidation_f
        if self.netliquidation_f:
            _dict['netliquidation-f'] = self.netliquidation_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of netliquidation_s
        if self.netliquidation_s:
            _dict['netliquidation-s'] = self.netliquidation_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of netliquidationuncertainty
        if self.netliquidationuncertainty:
            _dict['netliquidationuncertainty'] = self.netliquidationuncertainty.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nlvandmargininreview
        if self.nlvandmargininreview:
            _dict['nlvandmargininreview'] = self.nlvandmargininreview.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pasharesvalue
        if self.pasharesvalue:
            _dict['pasharesvalue'] = self.pasharesvalue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pasharesvalue_c
        if self.pasharesvalue_c:
            _dict['pasharesvalue-c'] = self.pasharesvalue_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pasharesvalue_f
        if self.pasharesvalue_f:
            _dict['pasharesvalue-f'] = self.pasharesvalue_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pasharesvalue_s
        if self.pasharesvalue_s:
            _dict['pasharesvalue-s'] = self.pasharesvalue_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postexpirationexcess
        if self.postexpirationexcess:
            _dict['postexpirationexcess'] = self.postexpirationexcess.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postexpirationexcess_c
        if self.postexpirationexcess_c:
            _dict['postexpirationexcess-c'] = self.postexpirationexcess_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postexpirationexcess_f
        if self.postexpirationexcess_f:
            _dict['postexpirationexcess-f'] = self.postexpirationexcess_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postexpirationexcess_s
        if self.postexpirationexcess_s:
            _dict['postexpirationexcess-s'] = self.postexpirationexcess_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postexpirationmargin
        if self.postexpirationmargin:
            _dict['postexpirationmargin'] = self.postexpirationmargin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postexpirationmargin_c
        if self.postexpirationmargin_c:
            _dict['postexpirationmargin-c'] = self.postexpirationmargin_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postexpirationmargin_f
        if self.postexpirationmargin_f:
            _dict['postexpirationmargin-f'] = self.postexpirationmargin_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postexpirationmargin_s
        if self.postexpirationmargin_s:
            _dict['postexpirationmargin-s'] = self.postexpirationmargin_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previousdayequitywithloanvalue
        if self.previousdayequitywithloanvalue:
            _dict['previousdayequitywithloanvalue'] = self.previousdayequitywithloanvalue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previousdayequitywithloanvalue_c
        if self.previousdayequitywithloanvalue_c:
            _dict['previousdayequitywithloanvalue-c'] = self.previousdayequitywithloanvalue_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previousdayequitywithloanvalue_f
        if self.previousdayequitywithloanvalue_f:
            _dict['previousdayequitywithloanvalue-f'] = self.previousdayequitywithloanvalue_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previousdayequitywithloanvalue_s
        if self.previousdayequitywithloanvalue_s:
            _dict['previousdayequitywithloanvalue-s'] = self.previousdayequitywithloanvalue_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segmenttitle_c
        if self.segmenttitle_c:
            _dict['segmenttitle-c'] = self.segmenttitle_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segmenttitle_f
        if self.segmenttitle_f:
            _dict['segmenttitle-f'] = self.segmenttitle_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segmenttitle_s
        if self.segmenttitle_s:
            _dict['segmenttitle-s'] = self.segmenttitle_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of totalcashvalue
        if self.totalcashvalue:
            _dict['totalcashvalue'] = self.totalcashvalue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of totalcashvalue_c
        if self.totalcashvalue_c:
            _dict['totalcashvalue-c'] = self.totalcashvalue_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of totalcashvalue_f
        if self.totalcashvalue_f:
            _dict['totalcashvalue-f'] = self.totalcashvalue_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of totalcashvalue_s
        if self.totalcashvalue_s:
            _dict['totalcashvalue-s'] = self.totalcashvalue_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of totaldebitcardpendingcharges
        if self.totaldebitcardpendingcharges:
            _dict['totaldebitcardpendingcharges'] = self.totaldebitcardpendingcharges.to_dict()
        # override the default output from pydantic by calling `to_dict()` of totaldebitcardpendingcharges_c
        if self.totaldebitcardpendingcharges_c:
            _dict['totaldebitcardpendingcharges-c'] = self.totaldebitcardpendingcharges_c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of totaldebitcardpendingcharges_f
        if self.totaldebitcardpendingcharges_f:
            _dict['totaldebitcardpendingcharges-f'] = self.totaldebitcardpendingcharges_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of totaldebitcardpendingcharges_s
        if self.totaldebitcardpendingcharges_s:
            _dict['totaldebitcardpendingcharges-s'] = self.totaldebitcardpendingcharges_s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tradingtype_f
        if self.tradingtype_f:
            _dict['tradingtype-f'] = self.tradingtype_f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tradingtype_s
        if self.tradingtype_s:
            _dict['tradingtype-s'] = self.tradingtype_s.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PortfolioAccountIdSummaryGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountready": Summary.from_dict(obj["accountready"]) if obj.get("accountready") is not None else None,
            "accounttype": Summary.from_dict(obj["accounttype"]) if obj.get("accounttype") is not None else None,
            "accruedcash": Summary.from_dict(obj["accruedcash"]) if obj.get("accruedcash") is not None else None,
            "accruedcash-c": Summary.from_dict(obj["accruedcash-c"]) if obj.get("accruedcash-c") is not None else None,
            "accruedcash-f": Summary.from_dict(obj["accruedcash-f"]) if obj.get("accruedcash-f") is not None else None,
            "accruedcash-s": Summary.from_dict(obj["accruedcash-s"]) if obj.get("accruedcash-s") is not None else None,
            "accrueddividend": Summary.from_dict(obj["accrueddividend"]) if obj.get("accrueddividend") is not None else None,
            "accrueddividend-c": Summary.from_dict(obj["accrueddividend-c"]) if obj.get("accrueddividend-c") is not None else None,
            "accrueddividend-f": Summary.from_dict(obj["accrueddividend-f"]) if obj.get("accrueddividend-f") is not None else None,
            "accrueddividend-s": Summary.from_dict(obj["accrueddividend-s"]) if obj.get("accrueddividend-s") is not None else None,
            "availablefunds": Summary.from_dict(obj["availablefunds"]) if obj.get("availablefunds") is not None else None,
            "availablefunds-c": Summary.from_dict(obj["availablefunds-c"]) if obj.get("availablefunds-c") is not None else None,
            "availablefunds-f": Summary.from_dict(obj["availablefunds-f"]) if obj.get("availablefunds-f") is not None else None,
            "availablefunds-s": Summary.from_dict(obj["availablefunds-s"]) if obj.get("availablefunds-s") is not None else None,
            "billable": Summary.from_dict(obj["billable"]) if obj.get("billable") is not None else None,
            "billable-c": Summary.from_dict(obj["billable-c"]) if obj.get("billable-c") is not None else None,
            "billable-f": Summary.from_dict(obj["billable-f"]) if obj.get("billable-f") is not None else None,
            "billable-s": Summary.from_dict(obj["billable-s"]) if obj.get("billable-s") is not None else None,
            "buyingpower": Summary.from_dict(obj["buyingpower"]) if obj.get("buyingpower") is not None else None,
            "cushion": Summary.from_dict(obj["cushion"]) if obj.get("cushion") is not None else None,
            "daytradesremaining": Summary.from_dict(obj["daytradesremaining"]) if obj.get("daytradesremaining") is not None else None,
            "daytradesremainingt+1": Summary.from_dict(obj["daytradesremainingt+1"]) if obj.get("daytradesremainingt+1") is not None else None,
            "daytradesremainingt+2": Summary.from_dict(obj["daytradesremainingt+2"]) if obj.get("daytradesremainingt+2") is not None else None,
            "daytradesremainingt+3": Summary.from_dict(obj["daytradesremainingt+3"]) if obj.get("daytradesremainingt+3") is not None else None,
            "daytradesremainingt+4": Summary.from_dict(obj["daytradesremainingt+4"]) if obj.get("daytradesremainingt+4") is not None else None,
            "equitywithloanvalue": Summary.from_dict(obj["equitywithloanvalue"]) if obj.get("equitywithloanvalue") is not None else None,
            "equitywithloanvalue-c": Summary.from_dict(obj["equitywithloanvalue-c"]) if obj.get("equitywithloanvalue-c") is not None else None,
            "equitywithloanvalue-f": Summary.from_dict(obj["equitywithloanvalue-f"]) if obj.get("equitywithloanvalue-f") is not None else None,
            "equitywithloanvalue-s": Summary.from_dict(obj["equitywithloanvalue-s"]) if obj.get("equitywithloanvalue-s") is not None else None,
            "excessliquidity": Summary.from_dict(obj["excessliquidity"]) if obj.get("excessliquidity") is not None else None,
            "excessliquidity-c": Summary.from_dict(obj["excessliquidity-c"]) if obj.get("excessliquidity-c") is not None else None,
            "excessliquidity-f": Summary.from_dict(obj["excessliquidity-f"]) if obj.get("excessliquidity-f") is not None else None,
            "excessliquidity-s": Summary.from_dict(obj["excessliquidity-s"]) if obj.get("excessliquidity-s") is not None else None,
            "fullavailablefunds": Summary.from_dict(obj["fullavailablefunds"]) if obj.get("fullavailablefunds") is not None else None,
            "fullavailablefunds-c": Summary.from_dict(obj["fullavailablefunds-c"]) if obj.get("fullavailablefunds-c") is not None else None,
            "fullavailablefunds-f": Summary.from_dict(obj["fullavailablefunds-f"]) if obj.get("fullavailablefunds-f") is not None else None,
            "fullavailablefunds-s": Summary.from_dict(obj["fullavailablefunds-s"]) if obj.get("fullavailablefunds-s") is not None else None,
            "fullexcessliquidity": Summary.from_dict(obj["fullexcessliquidity"]) if obj.get("fullexcessliquidity") is not None else None,
            "fullexcessliquidity-c": Summary.from_dict(obj["fullexcessliquidity-c"]) if obj.get("fullexcessliquidity-c") is not None else None,
            "fullexcessliquidity-f": Summary.from_dict(obj["fullexcessliquidity-f"]) if obj.get("fullexcessliquidity-f") is not None else None,
            "fullexcessliquidity-s": Summary.from_dict(obj["fullexcessliquidity-s"]) if obj.get("fullexcessliquidity-s") is not None else None,
            "fullinitmarginreq": Summary.from_dict(obj["fullinitmarginreq"]) if obj.get("fullinitmarginreq") is not None else None,
            "fullinitmarginreq-c": Summary.from_dict(obj["fullinitmarginreq-c"]) if obj.get("fullinitmarginreq-c") is not None else None,
            "fullinitmarginreq-f": Summary.from_dict(obj["fullinitmarginreq-f"]) if obj.get("fullinitmarginreq-f") is not None else None,
            "fullinitmarginreq-s": Summary.from_dict(obj["fullinitmarginreq-s"]) if obj.get("fullinitmarginreq-s") is not None else None,
            "fullmaintmarginreq": Summary.from_dict(obj["fullmaintmarginreq"]) if obj.get("fullmaintmarginreq") is not None else None,
            "fullmaintmarginreq-c": Summary.from_dict(obj["fullmaintmarginreq-c"]) if obj.get("fullmaintmarginreq-c") is not None else None,
            "fullmaintmarginreq-f": Summary.from_dict(obj["fullmaintmarginreq-f"]) if obj.get("fullmaintmarginreq-f") is not None else None,
            "fullmaintmarginreq-s": Summary.from_dict(obj["fullmaintmarginreq-s"]) if obj.get("fullmaintmarginreq-s") is not None else None,
            "grosspositionvalue": Summary.from_dict(obj["grosspositionvalue"]) if obj.get("grosspositionvalue") is not None else None,
            "grosspositionvalue-c": Summary.from_dict(obj["grosspositionvalue-c"]) if obj.get("grosspositionvalue-c") is not None else None,
            "grosspositionvalue-f": Summary.from_dict(obj["grosspositionvalue-f"]) if obj.get("grosspositionvalue-f") is not None else None,
            "grosspositionvalue-s": Summary.from_dict(obj["grosspositionvalue-s"]) if obj.get("grosspositionvalue-s") is not None else None,
            "guarantee": Summary.from_dict(obj["guarantee"]) if obj.get("guarantee") is not None else None,
            "guarantee-c": Summary.from_dict(obj["guarantee-c"]) if obj.get("guarantee-c") is not None else None,
            "guarantee-f": Summary.from_dict(obj["guarantee-f"]) if obj.get("guarantee-f") is not None else None,
            "guarantee-s": Summary.from_dict(obj["guarantee-s"]) if obj.get("guarantee-s") is not None else None,
            "highestseverity": Summary.from_dict(obj["highestseverity"]) if obj.get("highestseverity") is not None else None,
            "highestseverity-c": Summary.from_dict(obj["highestseverity-c"]) if obj.get("highestseverity-c") is not None else None,
            "highestseverity-f": Summary.from_dict(obj["highestseverity-f"]) if obj.get("highestseverity-f") is not None else None,
            "highestseverity-s": Summary.from_dict(obj["highestseverity-s"]) if obj.get("highestseverity-s") is not None else None,
            "indianstockhaircut": Summary.from_dict(obj["indianstockhaircut"]) if obj.get("indianstockhaircut") is not None else None,
            "indianstockhaircut-c": Summary.from_dict(obj["indianstockhaircut-c"]) if obj.get("indianstockhaircut-c") is not None else None,
            "indianstockhaircut-f": Summary.from_dict(obj["indianstockhaircut-f"]) if obj.get("indianstockhaircut-f") is not None else None,
            "indianstockhaircut-s": Summary.from_dict(obj["indianstockhaircut-s"]) if obj.get("indianstockhaircut-s") is not None else None,
            "initmarginreq": Summary.from_dict(obj["initmarginreq"]) if obj.get("initmarginreq") is not None else None,
            "initmarginreq-c": Summary.from_dict(obj["initmarginreq-c"]) if obj.get("initmarginreq-c") is not None else None,
            "initmarginreq-f": Summary.from_dict(obj["initmarginreq-f"]) if obj.get("initmarginreq-f") is not None else None,
            "initmarginreq-s": Summary.from_dict(obj["initmarginreq-s"]) if obj.get("initmarginreq-s") is not None else None,
            "leverage": Summary.from_dict(obj["leverage"]) if obj.get("leverage") is not None else None,
            "leverage-c": Summary.from_dict(obj["leverage-c"]) if obj.get("leverage-c") is not None else None,
            "leverage-f": Summary.from_dict(obj["leverage-f"]) if obj.get("leverage-f") is not None else None,
            "leverage-s": Summary.from_dict(obj["leverage-s"]) if obj.get("leverage-s") is not None else None,
            "lookaheadavailablefunds": Summary.from_dict(obj["lookaheadavailablefunds"]) if obj.get("lookaheadavailablefunds") is not None else None,
            "lookaheadavailablefunds-c": Summary.from_dict(obj["lookaheadavailablefunds-c"]) if obj.get("lookaheadavailablefunds-c") is not None else None,
            "lookaheadavailablefunds-f": Summary.from_dict(obj["lookaheadavailablefunds-f"]) if obj.get("lookaheadavailablefunds-f") is not None else None,
            "lookaheadavailablefunds-s": Summary.from_dict(obj["lookaheadavailablefunds-s"]) if obj.get("lookaheadavailablefunds-s") is not None else None,
            "lookaheadexcessliquidity": Summary.from_dict(obj["lookaheadexcessliquidity"]) if obj.get("lookaheadexcessliquidity") is not None else None,
            "lookaheadexcessliquidity-c": Summary.from_dict(obj["lookaheadexcessliquidity-c"]) if obj.get("lookaheadexcessliquidity-c") is not None else None,
            "lookaheadexcessliquidity-f": Summary.from_dict(obj["lookaheadexcessliquidity-f"]) if obj.get("lookaheadexcessliquidity-f") is not None else None,
            "lookaheadexcessliquidity-s": Summary.from_dict(obj["lookaheadexcessliquidity-s"]) if obj.get("lookaheadexcessliquidity-s") is not None else None,
            "lookaheadinitmarginreq": Summary.from_dict(obj["lookaheadinitmarginreq"]) if obj.get("lookaheadinitmarginreq") is not None else None,
            "lookaheadinitmarginreq-c": Summary.from_dict(obj["lookaheadinitmarginreq-c"]) if obj.get("lookaheadinitmarginreq-c") is not None else None,
            "lookaheadinitmarginreq-f": Summary.from_dict(obj["lookaheadinitmarginreq-f"]) if obj.get("lookaheadinitmarginreq-f") is not None else None,
            "lookaheadinitmarginreq-s": Summary.from_dict(obj["lookaheadinitmarginreq-s"]) if obj.get("lookaheadinitmarginreq-s") is not None else None,
            "lookaheadmaintmarginreq": Summary.from_dict(obj["lookaheadmaintmarginreq"]) if obj.get("lookaheadmaintmarginreq") is not None else None,
            "lookaheadmaintmarginreq-c": Summary.from_dict(obj["lookaheadmaintmarginreq-c"]) if obj.get("lookaheadmaintmarginreq-c") is not None else None,
            "lookaheadmaintmarginreq-f": Summary.from_dict(obj["lookaheadmaintmarginreq-f"]) if obj.get("lookaheadmaintmarginreq-f") is not None else None,
            "lookaheadmaintmarginreq-s": Summary.from_dict(obj["lookaheadmaintmarginreq-s"]) if obj.get("lookaheadmaintmarginreq-s") is not None else None,
            "lookaheadnextchange": Summary.from_dict(obj["lookaheadnextchange"]) if obj.get("lookaheadnextchange") is not None else None,
            "maintmarginreq": Summary.from_dict(obj["maintmarginreq"]) if obj.get("maintmarginreq") is not None else None,
            "maintmarginreq-c": Summary.from_dict(obj["maintmarginreq-c"]) if obj.get("maintmarginreq-c") is not None else None,
            "maintmarginreq-f": Summary.from_dict(obj["maintmarginreq-f"]) if obj.get("maintmarginreq-f") is not None else None,
            "maintmarginreq-s": Summary.from_dict(obj["maintmarginreq-s"]) if obj.get("maintmarginreq-s") is not None else None,
            "netliquidation": Summary.from_dict(obj["netliquidation"]) if obj.get("netliquidation") is not None else None,
            "netliquidation-c": Summary.from_dict(obj["netliquidation-c"]) if obj.get("netliquidation-c") is not None else None,
            "netliquidation-f": Summary.from_dict(obj["netliquidation-f"]) if obj.get("netliquidation-f") is not None else None,
            "netliquidation-s": Summary.from_dict(obj["netliquidation-s"]) if obj.get("netliquidation-s") is not None else None,
            "netliquidationuncertainty": Summary.from_dict(obj["netliquidationuncertainty"]) if obj.get("netliquidationuncertainty") is not None else None,
            "nlvandmargininreview": Summary.from_dict(obj["nlvandmargininreview"]) if obj.get("nlvandmargininreview") is not None else None,
            "pasharesvalue": Summary.from_dict(obj["pasharesvalue"]) if obj.get("pasharesvalue") is not None else None,
            "pasharesvalue-c": Summary.from_dict(obj["pasharesvalue-c"]) if obj.get("pasharesvalue-c") is not None else None,
            "pasharesvalue-f": Summary.from_dict(obj["pasharesvalue-f"]) if obj.get("pasharesvalue-f") is not None else None,
            "pasharesvalue-s": Summary.from_dict(obj["pasharesvalue-s"]) if obj.get("pasharesvalue-s") is not None else None,
            "postexpirationexcess": Summary.from_dict(obj["postexpirationexcess"]) if obj.get("postexpirationexcess") is not None else None,
            "postexpirationexcess-c": Summary.from_dict(obj["postexpirationexcess-c"]) if obj.get("postexpirationexcess-c") is not None else None,
            "postexpirationexcess-f": Summary.from_dict(obj["postexpirationexcess-f"]) if obj.get("postexpirationexcess-f") is not None else None,
            "postexpirationexcess-s": Summary.from_dict(obj["postexpirationexcess-s"]) if obj.get("postexpirationexcess-s") is not None else None,
            "postexpirationmargin": Summary.from_dict(obj["postexpirationmargin"]) if obj.get("postexpirationmargin") is not None else None,
            "postexpirationmargin-c": Summary.from_dict(obj["postexpirationmargin-c"]) if obj.get("postexpirationmargin-c") is not None else None,
            "postexpirationmargin-f": Summary.from_dict(obj["postexpirationmargin-f"]) if obj.get("postexpirationmargin-f") is not None else None,
            "postexpirationmargin-s": Summary.from_dict(obj["postexpirationmargin-s"]) if obj.get("postexpirationmargin-s") is not None else None,
            "previousdayequitywithloanvalue": Summary.from_dict(obj["previousdayequitywithloanvalue"]) if obj.get("previousdayequitywithloanvalue") is not None else None,
            "previousdayequitywithloanvalue-c": Summary.from_dict(obj["previousdayequitywithloanvalue-c"]) if obj.get("previousdayequitywithloanvalue-c") is not None else None,
            "previousdayequitywithloanvalue-f": Summary.from_dict(obj["previousdayequitywithloanvalue-f"]) if obj.get("previousdayequitywithloanvalue-f") is not None else None,
            "previousdayequitywithloanvalue-s": Summary.from_dict(obj["previousdayequitywithloanvalue-s"]) if obj.get("previousdayequitywithloanvalue-s") is not None else None,
            "segmenttitle-c": Summary.from_dict(obj["segmenttitle-c"]) if obj.get("segmenttitle-c") is not None else None,
            "segmenttitle-f": Summary.from_dict(obj["segmenttitle-f"]) if obj.get("segmenttitle-f") is not None else None,
            "segmenttitle-s": Summary.from_dict(obj["segmenttitle-s"]) if obj.get("segmenttitle-s") is not None else None,
            "totalcashvalue": Summary.from_dict(obj["totalcashvalue"]) if obj.get("totalcashvalue") is not None else None,
            "totalcashvalue-c": Summary.from_dict(obj["totalcashvalue-c"]) if obj.get("totalcashvalue-c") is not None else None,
            "totalcashvalue-f": Summary.from_dict(obj["totalcashvalue-f"]) if obj.get("totalcashvalue-f") is not None else None,
            "totalcashvalue-s": Summary.from_dict(obj["totalcashvalue-s"]) if obj.get("totalcashvalue-s") is not None else None,
            "totaldebitcardpendingcharges": Summary.from_dict(obj["totaldebitcardpendingcharges"]) if obj.get("totaldebitcardpendingcharges") is not None else None,
            "totaldebitcardpendingcharges-c": Summary.from_dict(obj["totaldebitcardpendingcharges-c"]) if obj.get("totaldebitcardpendingcharges-c") is not None else None,
            "totaldebitcardpendingcharges-f": Summary.from_dict(obj["totaldebitcardpendingcharges-f"]) if obj.get("totaldebitcardpendingcharges-f") is not None else None,
            "totaldebitcardpendingcharges-s": Summary.from_dict(obj["totaldebitcardpendingcharges-s"]) if obj.get("totaldebitcardpendingcharges-s") is not None else None,
            "tradingtype-f": Summary.from_dict(obj["tradingtype-f"]) if obj.get("tradingtype-f") is not None else None,
            "tradingtype-s": Summary.from_dict(obj["tradingtype-s"]) if obj.get("tradingtype-s") is not None else None
        })
        return _obj


