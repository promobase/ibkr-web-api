# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibkr-web-api.models.iserver_secdef_search_post200_response_inner_sections_inner import IserverSecdefSearchPost200ResponseInnerSectionsInner
from typing import Optional, Set
from typing_extensions import Self

class IserverSecdefSearchPost200ResponseInner(BaseModel):
    """
    IserverSecdefSearchPost200ResponseInner
    """ # noqa: E501
    conid: Optional[StrictInt] = Field(default=None, description="Contract Identifier")
    company_header: Optional[StrictStr] = Field(default=None, description="Company Name - Exchange", alias="companyHeader")
    company_name: Optional[StrictStr] = Field(default=None, alias="companyName")
    symbol: Optional[StrictStr] = Field(default=None, description="Underlying symbol")
    description: Optional[StrictStr] = Field(default=None, description="Exchange")
    restricted: Optional[StrictStr] = None
    fop: Optional[StrictStr] = Field(default=None, description="List of Future Option expirations in YYYMMDD format separated by semicolon")
    opt: Optional[StrictStr] = Field(default=None, description="List of Option expirations in YYYYMMDD format separated by semicolon")
    war: Optional[StrictStr] = Field(default=None, description="List of Warrant expirations in YYYYMMDD format separated by semicolon")
    sections: Optional[List[IserverSecdefSearchPost200ResponseInnerSectionsInner]] = None
    __properties: ClassVar[List[str]] = ["conid", "companyHeader", "companyName", "symbol", "description", "restricted", "fop", "opt", "war", "sections"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IserverSecdefSearchPost200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sections (list)
        _items = []
        if self.sections:
            for _item_sections in self.sections:
                if _item_sections:
                    _items.append(_item_sections.to_dict())
            _dict['sections'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IserverSecdefSearchPost200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conid": obj.get("conid"),
            "companyHeader": obj.get("companyHeader"),
            "companyName": obj.get("companyName"),
            "symbol": obj.get("symbol"),
            "description": obj.get("description"),
            "restricted": obj.get("restricted"),
            "fop": obj.get("fop"),
            "opt": obj.get("opt"),
            "war": obj.get("war"),
            "sections": [IserverSecdefSearchPost200ResponseInnerSectionsInner.from_dict(_item) for _item in obj["sections"]] if obj.get("sections") is not None else None
        })
        return _obj


