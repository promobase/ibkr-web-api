# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TransactionsTransactionsInner(BaseModel):
    """
    TransactionsTransactionsInner
    """ # noqa: E501
    acctid: Optional[StrictStr] = None
    conid: Optional[Union[StrictFloat, StrictInt]] = None
    cur: Optional[StrictStr] = Field(default=None, description="currency code")
    fx_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Conversion rate from asset currency to response currency", alias="fxRate")
    desc: Optional[StrictStr] = Field(default=None, description="Transaction description")
    var_date: Optional[StrictStr] = Field(default=None, description="Date of transaction.  Epoch time, GMT", alias="date")
    type: Optional[StrictStr] = Field(default=None, description="Transaction Type Name: Examples: \"Sell\", \"Buy\", \"Corporate Action\", \"Dividend Payment\", \"Transfer\", \"Payment in Lieu\" Dividends and Transfers do not have price and quantity in response ")
    qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Not applicable for all transaction types")
    pr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="In asset currency. Not be applicable for all transaction types.")
    amt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Raw value, no formatting. Net transaction amount (may include commission, tax). In asset currency")
    __properties: ClassVar[List[str]] = ["acctid", "conid", "cur", "fxRate", "desc", "date", "type", "qty", "pr", "amt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionsTransactionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionsTransactionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acctid": obj.get("acctid"),
            "conid": obj.get("conid"),
            "cur": obj.get("cur"),
            "fxRate": obj.get("fxRate"),
            "desc": obj.get("desc"),
            "date": obj.get("date"),
            "type": obj.get("type"),
            "qty": obj.get("qty"),
            "pr": obj.get("pr"),
            "amt": obj.get("amt")
        })
        return _obj


