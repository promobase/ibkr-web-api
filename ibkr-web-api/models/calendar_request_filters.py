# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CalendarRequestFilters(BaseModel):
    """
    CalendarRequestFilters
    """ # noqa: E501
    recently_held: Optional[StrictStr] = Field(default=None, description="value can be 'true' or 'false'.")
    corporate_earnings: Optional[StrictStr] = Field(default=None, description="value can be 'true' or 'false'.")
    div_ex_dates: Optional[StrictStr] = Field(default=None, description="value can be 'true' or 'false'.", alias="DivExDates")
    ipo: Optional[StrictStr] = Field(default=None, description="value can be 'true' or 'false'.")
    splits: Optional[StrictStr] = Field(default=None, description="value can be 'true' or 'false'.")
    corporate_events: Optional[StrictStr] = Field(default=None, description="value can be 'true' or 'false'.")
    economic_events: Optional[StrictStr] = Field(default=None, description="value can be 'true' or 'false'.")
    option_show_monthly: Optional[StrictStr] = Field(default=None, description="value can be 'true' or 'false'.")
    option_show_weekly: Optional[StrictStr] = Field(default=None, description="value can be 'true' or 'false'.")
    country: Optional[StrictStr] = Field(default=None, description="default is 'All'.")
    limit: Optional[StrictStr] = Field(default=None, description="default is '250'.")
    limit_region: Optional[StrictStr] = Field(default=None, description="default is '50'.")
    __properties: ClassVar[List[str]] = ["recently_held", "corporate_earnings", "DivExDates", "ipo", "splits", "corporate_events", "economic_events", "option_show_monthly", "option_show_weekly", "country", "limit", "limit_region"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalendarRequestFilters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalendarRequestFilters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "recently_held": obj.get("recently_held"),
            "corporate_earnings": obj.get("corporate_earnings"),
            "DivExDates": obj.get("DivExDates"),
            "ipo": obj.get("ipo"),
            "splits": obj.get("splits"),
            "corporate_events": obj.get("corporate_events"),
            "economic_events": obj.get("economic_events"),
            "option_show_monthly": obj.get("option_show_monthly"),
            "option_show_weekly": obj.get("option_show_weekly"),
            "country": obj.get("country"),
            "limit": obj.get("limit"),
            "limit_region": obj.get("limit_region")
        })
        return _obj


