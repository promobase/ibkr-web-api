# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IserverContractRulesPost200ResponseRulesInnerOrderDefaultsInnerStringInner(BaseModel):
    """
    IserverContractRulesPost200ResponseRulesInnerOrderDefaultsInnerStringInner
    """ # noqa: E501
    orth: Optional[StrictBool] = Field(default=None, description="Outside of Regular Trading Hours", alias="ORTH")
    sp: Optional[StrictStr] = Field(default=None, description="Stop Price value", alias="SP")
    lp: Optional[StrictStr] = Field(default=None, description="Limit Price value", alias="LP")
    pc: Optional[StrictStr] = Field(default=None, description="Price Cap value", alias="PC")
    ta: Optional[StrictStr] = Field(default=None, description="Trailing amount value", alias="TA")
    tu: Optional[StrictStr] = Field(default=None, description="Trailing unit", alias="TU")
    roa: Optional[StrictStr] = Field(default=None, description="Releative offset amount", alias="ROA")
    rop: Optional[StrictStr] = Field(default=None, description="Relative offset percent", alias="ROP")
    tt: Optional[StrictStr] = Field(default=None, description="Touch trigger price", alias="TT")
    unp: Optional[StrictBool] = Field(default=None, description="Use Net Price for Bonds", alias="UNP")
    __properties: ClassVar[List[str]] = ["ORTH", "SP", "LP", "PC", "TA", "TU", "ROA", "ROP", "TT", "UNP"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IserverContractRulesPost200ResponseRulesInnerOrderDefaultsInnerStringInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IserverContractRulesPost200ResponseRulesInnerOrderDefaultsInnerStringInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ORTH": obj.get("ORTH"),
            "SP": obj.get("SP"),
            "LP": obj.get("LP"),
            "PC": obj.get("PC"),
            "TA": obj.get("TA"),
            "TU": obj.get("TU"),
            "ROA": obj.get("ROA"),
            "ROP": obj.get("ROP"),
            "TT": obj.get("TT"),
            "UNP": obj.get("UNP")
        })
        return _obj


