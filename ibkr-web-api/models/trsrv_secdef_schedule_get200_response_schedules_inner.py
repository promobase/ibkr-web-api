# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from ibkr-web-api.models.trsrv_secdef_schedule_get200_response_schedules_inner_sessions import TrsrvSecdefScheduleGet200ResponseSchedulesInnerSessions
from ibkr-web-api.models.trsrv_secdef_schedule_get200_response_schedules_inner_trading_times import TrsrvSecdefScheduleGet200ResponseSchedulesInnerTradingTimes
from typing import Optional, Set
from typing_extensions import Self

class TrsrvSecdefScheduleGet200ResponseSchedulesInner(BaseModel):
    """
    TrsrvSecdefScheduleGet200ResponseSchedulesInner
    """ # noqa: E501
    clearing_cycle_end_time: Optional[StrictInt] = Field(default=None, alias="clearingCycleEndTime")
    trading_schedule_date: Optional[StrictInt] = Field(default=None, description="20000101 stands for any Sat, 20000102 stands for any Sun, ... 20000107 stands for any Fri. Any other date stands for itself.", alias="tradingScheduleDate")
    sessions: Optional[TrsrvSecdefScheduleGet200ResponseSchedulesInnerSessions] = None
    trading_times: Optional[TrsrvSecdefScheduleGet200ResponseSchedulesInnerTradingTimes] = Field(default=None, alias="tradingTimes")
    __properties: ClassVar[List[str]] = ["clearingCycleEndTime", "tradingScheduleDate", "sessions", "tradingTimes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrsrvSecdefScheduleGet200ResponseSchedulesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sessions
        if self.sessions:
            _dict['sessions'] = self.sessions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trading_times
        if self.trading_times:
            _dict['tradingTimes'] = self.trading_times.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrsrvSecdefScheduleGet200ResponseSchedulesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clearingCycleEndTime": obj.get("clearingCycleEndTime"),
            "tradingScheduleDate": obj.get("tradingScheduleDate"),
            "sessions": TrsrvSecdefScheduleGet200ResponseSchedulesInnerSessions.from_dict(obj["sessions"]) if obj.get("sessions") is not None else None,
            "tradingTimes": TrsrvSecdefScheduleGet200ResponseSchedulesInnerTradingTimes.from_dict(obj["tradingTimes"]) if obj.get("tradingTimes") is not None else None
        })
        return _obj


