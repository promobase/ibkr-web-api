# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibkr-web-api.models.history_data_data_inner import HistoryDataDataInner
from typing import Optional, Set
from typing_extensions import Self

class HistoryData(BaseModel):
    """
    HistoryData
    """ # noqa: E501
    symbol: Optional[StrictStr] = Field(default=None, description="Underlying symbol")
    text: Optional[StrictStr] = Field(default=None, description="companyName")
    price_factor: Optional[StrictInt] = Field(default=None, description="priceFactor is price increment obtained from display rule", alias="priceFactor")
    start_time: Optional[StrictStr] = Field(default=None, description="start date time in the format YYYYMMDD-HH:mm:ss", alias="startTime")
    high: Optional[StrictStr] = Field(default=None, description="High value during this time series with format %h/%v/%t. %h is the high price (scaled by priceFactor), %v is volume (volume factor will always be 100 (reported volume = actual volume/100)) and %t is minutes from start time of the chart ")
    low: Optional[StrictStr] = Field(default=None, description="Low value during this time series with format %l/%v/%t. %l is the low price (scaled by priceFactor), %v is volume (volume factor will always be 100 (reported volume = actual volume/100)) and %t is minutes from start time of the chart ")
    time_period: Optional[StrictStr] = Field(default=None, description="The duration for the historical data request", alias="timePeriod")
    bar_length: Optional[StrictInt] = Field(default=None, description="The number of seconds in a bar", alias="barLength")
    md_availability: Optional[StrictStr] = Field(default=None, description="Market Data Availability. The field may contain two chars. The first char is the primary code: S = Streaming, R = Realtime, D = Delayed, Z = Frozen, Y = Frozen Delayed. The second char is the secondary code: P = Snapshot Available, p = Consolidated. ", alias="mdAvailability")
    mkt_data_delay: Optional[StrictInt] = Field(default=None, description="The time it takes, in milliseconds, to process the historical data request", alias="mktDataDelay")
    outside_rth: Optional[StrictBool] = Field(default=None, description="The historical data returned includes outside of regular trading hours ", alias="outsideRth")
    trading_day_duration: Optional[StrictInt] = Field(default=None, description="The number of seconds in the trading day", alias="tradingDayDuration")
    volume_factor: Optional[StrictInt] = Field(default=None, alias="volumeFactor")
    price_display_rule: Optional[StrictInt] = Field(default=None, alias="priceDisplayRule")
    price_display_value: Optional[StrictStr] = Field(default=None, alias="priceDisplayValue")
    negative_capable: Optional[StrictBool] = Field(default=None, alias="negativeCapable")
    message_version: Optional[StrictInt] = Field(default=None, alias="messageVersion")
    data: Optional[List[HistoryDataDataInner]] = None
    points: Optional[StrictInt] = Field(default=None, description="total number of points")
    travel_time: Optional[StrictInt] = Field(default=None, alias="travelTime")
    __properties: ClassVar[List[str]] = ["symbol", "text", "priceFactor", "startTime", "high", "low", "timePeriod", "barLength", "mdAvailability", "mktDataDelay", "outsideRth", "tradingDayDuration", "volumeFactor", "priceDisplayRule", "priceDisplayValue", "negativeCapable", "messageVersion", "data", "points", "travelTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HistoryData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(_item_data.to_dict())
            _dict['data'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HistoryData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "symbol": obj.get("symbol"),
            "text": obj.get("text"),
            "priceFactor": obj.get("priceFactor"),
            "startTime": obj.get("startTime"),
            "high": obj.get("high"),
            "low": obj.get("low"),
            "timePeriod": obj.get("timePeriod"),
            "barLength": obj.get("barLength"),
            "mdAvailability": obj.get("mdAvailability"),
            "mktDataDelay": obj.get("mktDataDelay"),
            "outsideRth": obj.get("outsideRth"),
            "tradingDayDuration": obj.get("tradingDayDuration"),
            "volumeFactor": obj.get("volumeFactor"),
            "priceDisplayRule": obj.get("priceDisplayRule"),
            "priceDisplayValue": obj.get("priceDisplayValue"),
            "negativeCapable": obj.get("negativeCapable"),
            "messageVersion": obj.get("messageVersion"),
            "data": [HistoryDataDataInner.from_dict(_item) for _item in obj["data"]] if obj.get("data") is not None else None,
            "points": obj.get("points"),
            "travelTime": obj.get("travelTime")
        })
        return _obj


