# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibkr-web-api.models.alert_request_conditions_inner import AlertRequestConditionsInner
from typing import Optional, Set
from typing_extensions import Self

class AlertRequest(BaseModel):
    """
    AlertRequest
    """ # noqa: E501
    order_id: Optional[StrictInt] = Field(default=None, description="orderId is required when modifying alert. You can get it from /iserver/account/:accountId/alerts ", alias="orderId")
    alert_name: Optional[StrictStr] = Field(default=None, description="name of alert", alias="alertName")
    alert_message: Optional[StrictStr] = Field(default=None, description="The message you want to receive via email or text message", alias="alertMessage")
    alert_repeatable: Optional[StrictInt] = Field(default=None, description="whether alert is repeatable or not, so value can only be 0 or 1, this has to be 1 for MTA alert", alias="alertRepeatable")
    email: Optional[StrictStr] = Field(default=None, description="email address to receive alert")
    send_message: Optional[StrictInt] = Field(default=None, description="whether allowing to send email or not, so value can only be 0 or 1, ", alias="sendMessage")
    tif: Optional[StrictStr] = Field(default=None, description="time in force, can only be GTC or GTD")
    expire_time: Optional[StrictStr] = Field(default=None, description="format, YYYYMMDD-HH:mm:ss, please NOTE this will only work when tif is GTD ", alias="expireTime")
    outside_rth: Optional[StrictInt] = Field(default=None, description="value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours. ", alias="outsideRth")
    i_tws_orders_only: Optional[StrictInt] = Field(default=None, description="value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile ", alias="iTWSOrdersOnly")
    show_popup: Optional[StrictInt] = Field(default=None, description="value can only be 0 or 1, set to 1 to allow to show alert in pop-ups", alias="showPopup")
    tool_id: Optional[StrictInt] = Field(default=None, description="for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert ", alias="toolId")
    play_audio: Optional[StrictStr] = Field(default=None, description="audio message to play when alert is triggered", alias="playAudio")
    conditions: Optional[List[AlertRequestConditionsInner]] = None
    __properties: ClassVar[List[str]] = ["orderId", "alertName", "alertMessage", "alertRepeatable", "email", "sendMessage", "tif", "expireTime", "outsideRth", "iTWSOrdersOnly", "showPopup", "toolId", "playAudio", "conditions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orderId": obj.get("orderId"),
            "alertName": obj.get("alertName"),
            "alertMessage": obj.get("alertMessage"),
            "alertRepeatable": obj.get("alertRepeatable"),
            "email": obj.get("email"),
            "sendMessage": obj.get("sendMessage"),
            "tif": obj.get("tif"),
            "expireTime": obj.get("expireTime"),
            "outsideRth": obj.get("outsideRth"),
            "iTWSOrdersOnly": obj.get("iTWSOrdersOnly"),
            "showPopup": obj.get("showPopup"),
            "toolId": obj.get("toolId"),
            "playAudio": obj.get("playAudio"),
            "conditions": [AlertRequestConditionsInner.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None
        })
        return _obj


