# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PositionInner(BaseModel):
    """
    Account Information
    """ # noqa: E501
    acct_id: Optional[StrictStr] = Field(default=None, alias="acctId")
    conid: Optional[StrictInt] = None
    contract_desc: Optional[StrictStr] = Field(default=None, alias="contractDesc")
    asset_class: Optional[StrictStr] = Field(default=None, alias="assetClass")
    position: Optional[Union[StrictFloat, StrictInt]] = None
    mkt_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mktPrice")
    mkt_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mktValue")
    currency: Optional[StrictStr] = None
    avg_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="avgCost")
    avg_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="avgPrice")
    realized_pnl: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="realizedPnl")
    unrealized_pnl: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="unrealizedPnl")
    exchs: Optional[StrictStr] = None
    expiry: Optional[StrictStr] = None
    put_or_call: Optional[StrictStr] = Field(default=None, alias="putOrCall")
    multiplier: Optional[Union[StrictFloat, StrictInt]] = None
    strike: Optional[Union[StrictFloat, StrictInt]] = None
    exercise_style: Optional[StrictStr] = Field(default=None, alias="exerciseStyle")
    und_conid: Optional[StrictInt] = Field(default=None, alias="undConid")
    con_exch_map: Optional[List[StrictStr]] = Field(default=None, alias="conExchMap")
    base_mkt_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="baseMktValue")
    base_mkt_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="baseMktPrice")
    base_avg_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="baseAvgCost")
    base_avg_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="baseAvgPrice")
    base_realized_pnl: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="baseRealizedPnl")
    base_unrealized_pnl: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="baseUnrealizedPnl")
    name: Optional[StrictStr] = None
    last_trading_day: Optional[StrictStr] = Field(default=None, alias="lastTradingDay")
    group: Optional[StrictStr] = None
    sector: Optional[StrictStr] = None
    sector_group: Optional[StrictStr] = Field(default=None, alias="sectorGroup")
    ticker: Optional[StrictStr] = None
    und_comp: Optional[StrictStr] = Field(default=None, alias="undComp")
    und_sym: Optional[StrictStr] = Field(default=None, alias="undSym")
    full_name: Optional[StrictStr] = Field(default=None, alias="fullName")
    page_size: Optional[StrictInt] = Field(default=None, alias="pageSize")
    model: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["acctId", "conid", "contractDesc", "assetClass", "position", "mktPrice", "mktValue", "currency", "avgCost", "avgPrice", "realizedPnl", "unrealizedPnl", "exchs", "expiry", "putOrCall", "multiplier", "strike", "exerciseStyle", "undConid", "conExchMap", "baseMktValue", "baseMktPrice", "baseAvgCost", "baseAvgPrice", "baseRealizedPnl", "baseUnrealizedPnl", "name", "lastTradingDay", "group", "sector", "sectorGroup", "ticker", "undComp", "undSym", "fullName", "pageSize", "model"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PositionInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PositionInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acctId": obj.get("acctId"),
            "conid": obj.get("conid"),
            "contractDesc": obj.get("contractDesc"),
            "assetClass": obj.get("assetClass"),
            "position": obj.get("position"),
            "mktPrice": obj.get("mktPrice"),
            "mktValue": obj.get("mktValue"),
            "currency": obj.get("currency"),
            "avgCost": obj.get("avgCost"),
            "avgPrice": obj.get("avgPrice"),
            "realizedPnl": obj.get("realizedPnl"),
            "unrealizedPnl": obj.get("unrealizedPnl"),
            "exchs": obj.get("exchs"),
            "expiry": obj.get("expiry"),
            "putOrCall": obj.get("putOrCall"),
            "multiplier": obj.get("multiplier"),
            "strike": obj.get("strike"),
            "exerciseStyle": obj.get("exerciseStyle"),
            "undConid": obj.get("undConid"),
            "conExchMap": obj.get("conExchMap"),
            "baseMktValue": obj.get("baseMktValue"),
            "baseMktPrice": obj.get("baseMktPrice"),
            "baseAvgCost": obj.get("baseAvgCost"),
            "baseAvgPrice": obj.get("baseAvgPrice"),
            "baseRealizedPnl": obj.get("baseRealizedPnl"),
            "baseUnrealizedPnl": obj.get("baseUnrealizedPnl"),
            "name": obj.get("name"),
            "lastTradingDay": obj.get("lastTradingDay"),
            "group": obj.get("group"),
            "sector": obj.get("sector"),
            "sectorGroup": obj.get("sectorGroup"),
            "ticker": obj.get("ticker"),
            "undComp": obj.get("undComp"),
            "undSym": obj.get("undSym"),
            "fullName": obj.get("fullName"),
            "pageSize": obj.get("pageSize"),
            "model": obj.get("model")
        })
        return _obj


