# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ibkr_web_api.models.iserver_account_account_id_order_whatif_post200_response_amount import IserverAccountAccountIdOrderWhatifPost200ResponseAmount
from ibkr_web_api.models.iserver_account_account_id_order_whatif_post200_response_equity import IserverAccountAccountIdOrderWhatifPost200ResponseEquity
from typing import Optional, Set
from typing_extensions import Self

class IserverAccountAccountIdOrderWhatifPost200Response(BaseModel):
    """
    IserverAccountAccountIdOrderWhatifPost200Response
    """ # noqa: E501
    amount: Optional[IserverAccountAccountIdOrderWhatifPost200ResponseAmount] = None
    equity: Optional[IserverAccountAccountIdOrderWhatifPost200ResponseEquity] = None
    initial: Optional[IserverAccountAccountIdOrderWhatifPost200ResponseEquity] = None
    maintenance: Optional[IserverAccountAccountIdOrderWhatifPost200ResponseEquity] = None
    warn: Optional[StrictStr] = None
    error: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["amount", "equity", "initial", "maintenance", "warn", "error"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IserverAccountAccountIdOrderWhatifPost200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of equity
        if self.equity:
            _dict['equity'] = self.equity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initial
        if self.initial:
            _dict['initial'] = self.initial.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maintenance
        if self.maintenance:
            _dict['maintenance'] = self.maintenance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IserverAccountAccountIdOrderWhatifPost200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": IserverAccountAccountIdOrderWhatifPost200ResponseAmount.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "equity": IserverAccountAccountIdOrderWhatifPost200ResponseEquity.from_dict(obj["equity"]) if obj.get("equity") is not None else None,
            "initial": IserverAccountAccountIdOrderWhatifPost200ResponseEquity.from_dict(obj["initial"]) if obj.get("initial") is not None else None,
            "maintenance": IserverAccountAccountIdOrderWhatifPost200ResponseEquity.from_dict(obj["maintenance"]) if obj.get("maintenance") is not None else None,
            "warn": obj.get("warn"),
            "error": obj.get("error")
        })
        return _obj


