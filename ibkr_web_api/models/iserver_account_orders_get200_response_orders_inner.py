# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IserverAccountOrdersGet200ResponseOrdersInner(BaseModel):
    """
    IserverAccountOrdersGet200ResponseOrdersInner
    """ # noqa: E501
    acct: Optional[StrictStr] = Field(default=None, description="Account number")
    conidex: Optional[StrictStr] = Field(default=None, description="conid and exchange. Format supports conid or conid@exchange")
    conid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Contract identifier")
    order_id: Optional[StrictStr] = Field(default=None, description="Order identifier", alias="orderId")
    cash_ccy: Optional[StrictStr] = Field(default=None, description="Cash currency", alias="cashCcy")
    size_and_fills: Optional[StrictStr] = Field(default=None, description="Quantity outstanding and total quantity concatenated with forward slash separator", alias="sizeAndFills")
    order_desc: Optional[StrictStr] = Field(default=None, description="Order description", alias="orderDesc")
    description1: Optional[StrictStr] = Field(default=None, description="Formatted ticker description")
    ticker: Optional[StrictStr] = Field(default=None, description="Underlying symbol")
    sec_type: Optional[StrictStr] = Field(default=None, description="Asset class", alias="secType")
    listing_exchange: Optional[StrictStr] = Field(default=None, description="Listing Exchange", alias="listingExchange")
    remaining_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Quantity remaining", alias="remainingQuantity")
    filled_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Quantity filled", alias="filledQuantity")
    company_name: Optional[StrictStr] = Field(default=None, description="Company Name", alias="companyName")
    status: Optional[StrictStr] = Field(default=None, description="Status of the order")
    orig_order_type: Optional[StrictStr] = Field(default=None, description="Original order type", alias="origOrderType")
    supports_tax_opt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Supports Tax Optimization with 0 for no and 1 for yes", alias="supportsTaxOpt")
    last_execution_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Last status update in format YYMMDDhhmms based in GMT", alias="lastExecutionTime")
    last_execution_time_r: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Last status update unix time in ms", alias="lastExecutionTime_r")
    order_type: Optional[StrictStr] = Field(default=None, description="Order type", alias="orderType")
    order_ref: Optional[StrictStr] = Field(default=None, description="Order reference")
    side: Optional[StrictStr] = Field(default=None, description="The side of the market of the order.  * BUY: Buy contract near posted ask price  * SELL: Sell contract near posted bid price  * ASSN: Option Assignment, if BUYSELL=BUY and OptionType=PUT or BUYSELL=SELL and OptionType=CALL  * EXER: Option Exercise, if BUYSELL=SELL and OptionType=PUT or BUYSELL=BUY and OptionType=CALL ")
    time_in_force: Optional[StrictStr] = Field(default=None, description="Time in force", alias="timeInForce")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price of order")
    bg_color: Optional[StrictStr] = Field(default=None, description="Background color in hex format", alias="bgColor")
    fg_color: Optional[StrictStr] = Field(default=None, description="Foreground color in hex format", alias="fgColor")
    __properties: ClassVar[List[str]] = ["acct", "conidex", "conid", "orderId", "cashCcy", "sizeAndFills", "orderDesc", "description1", "ticker", "secType", "listingExchange", "remainingQuantity", "filledQuantity", "companyName", "status", "origOrderType", "supportsTaxOpt", "lastExecutionTime", "lastExecutionTime_r", "orderType", "order_ref", "side", "timeInForce", "price", "bgColor", "fgColor"]

    @field_validator('side')
    def side_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BUY', 'SELL', 'ASSN', 'EXER']):
            raise ValueError("must be one of enum values ('BUY', 'SELL', 'ASSN', 'EXER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IserverAccountOrdersGet200ResponseOrdersInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IserverAccountOrdersGet200ResponseOrdersInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acct": obj.get("acct"),
            "conidex": obj.get("conidex"),
            "conid": obj.get("conid"),
            "orderId": obj.get("orderId"),
            "cashCcy": obj.get("cashCcy"),
            "sizeAndFills": obj.get("sizeAndFills"),
            "orderDesc": obj.get("orderDesc"),
            "description1": obj.get("description1"),
            "ticker": obj.get("ticker"),
            "secType": obj.get("secType"),
            "listingExchange": obj.get("listingExchange"),
            "remainingQuantity": obj.get("remainingQuantity"),
            "filledQuantity": obj.get("filledQuantity"),
            "companyName": obj.get("companyName"),
            "status": obj.get("status"),
            "origOrderType": obj.get("origOrderType"),
            "supportsTaxOpt": obj.get("supportsTaxOpt"),
            "lastExecutionTime": obj.get("lastExecutionTime"),
            "lastExecutionTime_r": obj.get("lastExecutionTime_r"),
            "orderType": obj.get("orderType"),
            "order_ref": obj.get("order_ref"),
            "side": obj.get("side"),
            "timeInForce": obj.get("timeInForce"),
            "price": obj.get("price"),
            "bgColor": obj.get("bgColor"),
            "fgColor": obj.get("fgColor")
        })
        return _obj


