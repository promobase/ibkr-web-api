# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IserverAccountAccountIdAlertsGet200ResponseInner(BaseModel):
    """
    IserverAccountAccountIdAlertsGet200ResponseInner
    """ # noqa: E501
    order_id: Optional[StrictInt] = None
    account: Optional[StrictStr] = Field(default=None, description="account id")
    alert_name: Optional[StrictStr] = None
    alert_active: Optional[StrictInt] = Field(default=None, description="Value can only be 0 or 1, 1 means active")
    order_time: Optional[StrictStr] = Field(default=None, description="format, YYYYMMDD-HH:mm:ss, the time when you created the alert ")
    alert_triggered: Optional[StrictBool] = Field(default=None, description="whether the alert has been triggered or not")
    alert_repeatable: Optional[StrictInt] = Field(default=None, description="whether the alert can be repeatable or not, value can be 1 or 0. 1 means true")
    __properties: ClassVar[List[str]] = ["order_id", "account", "alert_name", "alert_active", "order_time", "alert_triggered", "alert_repeatable"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IserverAccountAccountIdAlertsGet200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IserverAccountAccountIdAlertsGet200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "order_id": obj.get("order_id"),
            "account": obj.get("account"),
            "alert_name": obj.get("alert_name"),
            "alert_active": obj.get("alert_active"),
            "order_time": obj.get("order_time"),
            "alert_triggered": obj.get("alert_triggered"),
            "alert_repeatable": obj.get("alert_repeatable")
        })
        return _obj


