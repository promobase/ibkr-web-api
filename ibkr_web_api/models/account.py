# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from ibkr_web_api.models.account_parent import AccountParent
from typing import Optional, Set
from typing_extensions import Self

class Account(BaseModel):
    """
    account information
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The account identification value")
    account_id: Optional[StrictStr] = Field(default=None, description="The account number", alias="accountId")
    account_van: Optional[StrictStr] = Field(default=None, description="The accountAlias", alias="accountVan")
    account_title: Optional[StrictStr] = Field(default=None, description="Title of the account", alias="accountTitle")
    display_name: Optional[StrictStr] = Field(default=None, description="Whichever value is not null in this priority", alias="displayName")
    account_alias: Optional[StrictStr] = Field(default=None, description="User customizable account alias. Refer to [Configure Account Alias](https://guides.interactivebrokers.com/cp/cp.htm#am/settings/accountalias.htm) for details.", alias="accountAlias")
    account_status: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="When the account was opened in unix time.", alias="accountStatus")
    currency: Optional[StrictStr] = Field(default=None, description="Base currency of the account.")
    type: Optional[StrictStr] = Field(default=None, description="Account Type")
    trading_type: Optional[StrictStr] = Field(default=None, description="UNI - Deprecated property", alias="tradingType")
    faclient: Optional[StrictBool] = Field(default=None, description="If an account is a sub-account to a Financial Advisor.")
    clearing_status: Optional[StrictStr] = Field(default=None, description="Status of the Account   * O = Open   * P or N = Pending   * A = Abandoned   * R = Rejected   * C = Closed ", alias="clearingStatus")
    covestor: Optional[StrictBool] = Field(default=None, description="Is a Covestor Account")
    parent: Optional[AccountParent] = None
    desc: Optional[StrictStr] = Field(default=None, description="Formatted \"accountId - accountAlias\"")
    __properties: ClassVar[List[str]] = ["id", "accountId", "accountVan", "accountTitle", "displayName", "accountAlias", "accountStatus", "currency", "type", "tradingType", "faclient", "clearingStatus", "covestor", "parent", "desc"]

    @field_validator('display_name')
    def display_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['accountTitle', 'accountVan', 'accountId']):
            raise ValueError("must be one of enum values ('accountTitle', 'accountVan', 'accountId')")
        return value

    @field_validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUD', 'GBP', 'CAD', 'CNH', 'CZK', 'DKK', 'EUR', 'HKD', 'HUF', 'INR', 'ILS', 'JPY', 'MXN', 'NOK', 'NZD', 'PLN', 'RUB', 'SGD', 'SEK', 'CHF', 'USD']):
            raise ValueError("must be one of enum values ('AUD', 'GBP', 'CAD', 'CNH', 'CZK', 'DKK', 'EUR', 'HKD', 'HUF', 'INR', 'ILS', 'JPY', 'MXN', 'NOK', 'NZD', 'PLN', 'RUB', 'SGD', 'SEK', 'CHF', 'USD')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INDIVIDUAL', 'JOINT', 'ORG', 'TRUST', 'DEMO']):
            raise ValueError("must be one of enum values ('INDIVIDUAL', 'JOINT', 'ORG', 'TRUST', 'DEMO')")
        return value

    @field_validator('clearing_status')
    def clearing_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['O', 'P', 'N', 'A', 'R', 'C']):
            raise ValueError("must be one of enum values ('O', 'P', 'N', 'A', 'R', 'C')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "accountId": obj.get("accountId"),
            "accountVan": obj.get("accountVan"),
            "accountTitle": obj.get("accountTitle"),
            "displayName": obj.get("displayName"),
            "accountAlias": obj.get("accountAlias"),
            "accountStatus": obj.get("accountStatus"),
            "currency": obj.get("currency"),
            "type": obj.get("type"),
            "tradingType": obj.get("tradingType"),
            "faclient": obj.get("faclient"),
            "clearingStatus": obj.get("clearingStatus"),
            "covestor": obj.get("covestor"),
            "parent": AccountParent.from_dict(obj["parent"]) if obj.get("parent") is not None else None,
            "desc": obj.get("desc")
        })
        return _obj


