# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class HistoryResultBarsDataInner(BaseModel):
    """
    HistoryResultBarsDataInner
    """ # noqa: E501
    t: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Time - Formatted in unix time in ms.")
    o: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Open - First price returned for bar value.")
    c: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Close - Last price returned for bar value.")
    h: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="High - High price returned for bar value.")
    l: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Low - Last price returned for bar value.")
    v: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Volume - Traded volume for bar value.")
    __properties: ClassVar[List[str]] = ["t", "o", "c", "h", "l", "v"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HistoryResultBarsDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HistoryResultBarsDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "t": obj.get("t"),
            "o": obj.get("o"),
            "c": obj.get("c"),
            "h": obj.get("h"),
            "l": obj.get("l"),
            "v": obj.get("v")
        })
        return _obj


