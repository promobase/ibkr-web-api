# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ibkr_web_api.models.iserver_contract_rules_post200_response_rules_inner_can_trade_acct_ids_inner import IserverContractRulesPost200ResponseRulesInnerCanTradeAcctIdsInner
from ibkr_web_api.models.iserver_contract_rules_post200_response_rules_inner_cqt_types_inner import IserverContractRulesPost200ResponseRulesInnerCqtTypesInner
from ibkr_web_api.models.iserver_contract_rules_post200_response_rules_inner_fraq_types_inner import IserverContractRulesPost200ResponseRulesInnerFraqTypesInner
from ibkr_web_api.models.iserver_contract_rules_post200_response_rules_inner_ibalgo_types_inner import IserverContractRulesPost200ResponseRulesInnerIbalgoTypesInner
from ibkr_web_api.models.iserver_contract_rules_post200_response_rules_inner_order_defaults_inner import IserverContractRulesPost200ResponseRulesInnerOrderDefaultsInner
from ibkr_web_api.models.iserver_contract_rules_post200_response_rules_inner_order_types_inner import IserverContractRulesPost200ResponseRulesInnerOrderTypesInner
from ibkr_web_api.models.iserver_contract_rules_post200_response_rules_inner_order_types_outside_inner import IserverContractRulesPost200ResponseRulesInnerOrderTypesOutsideInner
from ibkr_web_api.models.iserver_contract_rules_post200_response_rules_inner_tif_types_inner import IserverContractRulesPost200ResponseRulesInnerTifTypesInner
from typing import Optional, Set
from typing_extensions import Self

class IserverContractRulesPost200ResponseRulesInner(BaseModel):
    """
    IserverContractRulesPost200ResponseRulesInner
    """ # noqa: E501
    algo_eligible: Optional[StrictBool] = Field(default=None, alias="algoEligible")
    can_trade_acct_ids: Optional[List[IserverContractRulesPost200ResponseRulesInnerCanTradeAcctIdsInner]] = Field(default=None, alias="canTradeAcctIds")
    error: Optional[StrictStr] = Field(default=None, description="Returns a description on any errors with order presets")
    order_types: Optional[List[IserverContractRulesPost200ResponseRulesInnerOrderTypesInner]] = Field(default=None, alias="orderTypes")
    ibalgo_types: Optional[List[IserverContractRulesPost200ResponseRulesInnerIbalgoTypesInner]] = Field(default=None, alias="ibalgoTypes")
    fraq_types: Optional[List[IserverContractRulesPost200ResponseRulesInnerFraqTypesInner]] = Field(default=None, alias="fraqTypes")
    cqt_types: Optional[List[IserverContractRulesPost200ResponseRulesInnerCqtTypesInner]] = Field(default=None, alias="cqtTypes")
    order_defaults: Optional[List[IserverContractRulesPost200ResponseRulesInnerOrderDefaultsInner]] = Field(default=None, description="If object returned will provide the defaults based on user settings", alias="orderDefaults")
    order_types_outside: Optional[List[IserverContractRulesPost200ResponseRulesInnerOrderTypesOutsideInner]] = Field(default=None, alias="orderTypesOutside")
    default_size: Optional[StrictInt] = Field(default=None, description="Default quantity", alias="defaultSize")
    cash_size: Optional[StrictInt] = Field(default=None, description="cash value", alias="cashSize")
    size_increment: Optional[StrictInt] = Field(default=None, description="increment quantity value", alias="sizeIncrement")
    tif_types: Optional[List[IserverContractRulesPost200ResponseRulesInnerTifTypesInner]] = Field(default=None, alias="tifTypes")
    default_tif: Optional[StrictStr] = Field(default=None, description="Default time in force value", alias="defaultTIF")
    limit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Limit price", alias="limitPrice")
    stopprice: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Stop price")
    order_origination: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Order origin designation for US securities options and Options Clearing Corporation", alias="orderOrigination")
    preview: Optional[StrictBool] = Field(default=None, description="order preview required")
    display_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="displaySize")
    fraq_int: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="decimal places for fractional order size", alias="fraqInt")
    cash_ccy: Optional[StrictStr] = Field(default=None, description="Cash currency for the contract", alias="cashCcy")
    cash_qty_incr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Increment value for cash quantity", alias="cashQtyIncr")
    price_magnifier: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price Magnifier", alias="priceMagnifier")
    negative_capable: Optional[StrictBool] = Field(default=None, description="trading negative price support", alias="negativeCapable")
    increment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price increment value")
    increment_digits: Optional[StrictInt] = Field(default=None, description="Number of digits for price increment", alias="incrementDigits")
    __properties: ClassVar[List[str]] = ["algoEligible", "canTradeAcctIds", "error", "orderTypes", "ibalgoTypes", "fraqTypes", "cqtTypes", "orderDefaults", "orderTypesOutside", "defaultSize", "cashSize", "sizeIncrement", "tifTypes", "defaultTIF", "limitPrice", "stopprice", "orderOrigination", "preview", "displaySize", "fraqInt", "cashCcy", "cashQtyIncr", "priceMagnifier", "negativeCapable", "increment", "incrementDigits"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IserverContractRulesPost200ResponseRulesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in can_trade_acct_ids (list)
        _items = []
        if self.can_trade_acct_ids:
            for _item_can_trade_acct_ids in self.can_trade_acct_ids:
                if _item_can_trade_acct_ids:
                    _items.append(_item_can_trade_acct_ids.to_dict())
            _dict['canTradeAcctIds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_types (list)
        _items = []
        if self.order_types:
            for _item_order_types in self.order_types:
                if _item_order_types:
                    _items.append(_item_order_types.to_dict())
            _dict['orderTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ibalgo_types (list)
        _items = []
        if self.ibalgo_types:
            for _item_ibalgo_types in self.ibalgo_types:
                if _item_ibalgo_types:
                    _items.append(_item_ibalgo_types.to_dict())
            _dict['ibalgoTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in fraq_types (list)
        _items = []
        if self.fraq_types:
            for _item_fraq_types in self.fraq_types:
                if _item_fraq_types:
                    _items.append(_item_fraq_types.to_dict())
            _dict['fraqTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cqt_types (list)
        _items = []
        if self.cqt_types:
            for _item_cqt_types in self.cqt_types:
                if _item_cqt_types:
                    _items.append(_item_cqt_types.to_dict())
            _dict['cqtTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_defaults (list)
        _items = []
        if self.order_defaults:
            for _item_order_defaults in self.order_defaults:
                if _item_order_defaults:
                    _items.append(_item_order_defaults.to_dict())
            _dict['orderDefaults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in order_types_outside (list)
        _items = []
        if self.order_types_outside:
            for _item_order_types_outside in self.order_types_outside:
                if _item_order_types_outside:
                    _items.append(_item_order_types_outside.to_dict())
            _dict['orderTypesOutside'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tif_types (list)
        _items = []
        if self.tif_types:
            for _item_tif_types in self.tif_types:
                if _item_tif_types:
                    _items.append(_item_tif_types.to_dict())
            _dict['tifTypes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IserverContractRulesPost200ResponseRulesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algoEligible": obj.get("algoEligible"),
            "canTradeAcctIds": [IserverContractRulesPost200ResponseRulesInnerCanTradeAcctIdsInner.from_dict(_item) for _item in obj["canTradeAcctIds"]] if obj.get("canTradeAcctIds") is not None else None,
            "error": obj.get("error"),
            "orderTypes": [IserverContractRulesPost200ResponseRulesInnerOrderTypesInner.from_dict(_item) for _item in obj["orderTypes"]] if obj.get("orderTypes") is not None else None,
            "ibalgoTypes": [IserverContractRulesPost200ResponseRulesInnerIbalgoTypesInner.from_dict(_item) for _item in obj["ibalgoTypes"]] if obj.get("ibalgoTypes") is not None else None,
            "fraqTypes": [IserverContractRulesPost200ResponseRulesInnerFraqTypesInner.from_dict(_item) for _item in obj["fraqTypes"]] if obj.get("fraqTypes") is not None else None,
            "cqtTypes": [IserverContractRulesPost200ResponseRulesInnerCqtTypesInner.from_dict(_item) for _item in obj["cqtTypes"]] if obj.get("cqtTypes") is not None else None,
            "orderDefaults": [IserverContractRulesPost200ResponseRulesInnerOrderDefaultsInner.from_dict(_item) for _item in obj["orderDefaults"]] if obj.get("orderDefaults") is not None else None,
            "orderTypesOutside": [IserverContractRulesPost200ResponseRulesInnerOrderTypesOutsideInner.from_dict(_item) for _item in obj["orderTypesOutside"]] if obj.get("orderTypesOutside") is not None else None,
            "defaultSize": obj.get("defaultSize"),
            "cashSize": obj.get("cashSize"),
            "sizeIncrement": obj.get("sizeIncrement"),
            "tifTypes": [IserverContractRulesPost200ResponseRulesInnerTifTypesInner.from_dict(_item) for _item in obj["tifTypes"]] if obj.get("tifTypes") is not None else None,
            "defaultTIF": obj.get("defaultTIF"),
            "limitPrice": obj.get("limitPrice"),
            "stopprice": obj.get("stopprice"),
            "orderOrigination": obj.get("orderOrigination"),
            "preview": obj.get("preview"),
            "displaySize": obj.get("displaySize"),
            "fraqInt": obj.get("fraqInt"),
            "cashCcy": obj.get("cashCcy"),
            "cashQtyIncr": obj.get("cashQtyIncr"),
            "priceMagnifier": obj.get("priceMagnifier"),
            "negativeCapable": obj.get("negativeCapable"),
            "increment": obj.get("increment"),
            "incrementDigits": obj.get("incrementDigits")
        })
        return _obj


