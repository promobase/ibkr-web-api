# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    contains all the order related info
    """ # noqa: E501
    acct: Optional[StrictStr] = Field(default=None, description="account id")
    conid: Optional[StrictInt] = None
    order_desc: Optional[StrictStr] = Field(default=None, alias="orderDesc")
    description1: Optional[StrictStr] = None
    ticker: Optional[StrictStr] = Field(default=None, description="for example FB")
    sec_type: Optional[StrictStr] = Field(default=None, description="for example STK", alias="secType")
    listing_exchange: Optional[StrictStr] = Field(default=None, description="for example NASDAQ.NMS", alias="listingExchange")
    remaining_quantity: Optional[StrictStr] = Field(default=None, alias="remainingQuantity")
    filled_quantity: Optional[StrictStr] = Field(default=None, alias="filledQuantity")
    company_name: Optional[StrictStr] = Field(default=None, alias="companyName")
    status: Optional[StrictStr] = Field(default=None, description="* PendingSubmit - Indicates the order was sent, but confirmation has not been received that it has been received by the destination.                   Occurs most commonly if an exchange is closed. * PendingCancel - Indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation. * PreSubmitted - Indicates that a simulated order type has been accepted by the IBKR system and that this order has yet to be elected.                  The order is held in the IBKR system until the election criteria are met. At that time the order is transmitted to the order destination as specified. * Submitted - Indicates that the order has been accepted at the order destination and is working. * Cancelled - Indicates that the balance of the order has been confirmed cancelled by the IB system.               This could occur unexpectedly when IB or the destination has rejected the order. * Filled - Indicates that the order has been completely filled. * Inactive - Indicates the order is not working, for instance if the order was invalid and triggered an error message,              or if the order was to short a security and shares have not yet been located. ")
    orig_order_type: Optional[StrictStr] = Field(default=None, description="for example Limit", alias="origOrderType")
    side: Optional[StrictStr] = Field(default=None, description="BUY or SELL")
    price: Optional[Union[StrictFloat, StrictInt]] = None
    bg_color: Optional[StrictStr] = Field(default=None, description="back-ground color", alias="bgColor")
    fg_color: Optional[StrictStr] = Field(default=None, alias="fgColor")
    order_id: Optional[StrictInt] = Field(default=None, alias="orderId")
    parent_id: Optional[StrictInt] = Field(default=None, description="Only exists in child order of bracket", alias="parentId")
    order_ref: Optional[StrictStr] = Field(default=None, description="User defined string used to identify the order. Value is set using \"cOID\" field while placing an order.")
    __properties: ClassVar[List[str]] = ["acct", "conid", "orderDesc", "description1", "ticker", "secType", "listingExchange", "remainingQuantity", "filledQuantity", "companyName", "status", "origOrderType", "side", "price", "bgColor", "fgColor", "orderId", "parentId", "order_ref"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acct": obj.get("acct"),
            "conid": obj.get("conid"),
            "orderDesc": obj.get("orderDesc"),
            "description1": obj.get("description1"),
            "ticker": obj.get("ticker"),
            "secType": obj.get("secType"),
            "listingExchange": obj.get("listingExchange"),
            "remainingQuantity": obj.get("remainingQuantity"),
            "filledQuantity": obj.get("filledQuantity"),
            "companyName": obj.get("companyName"),
            "status": obj.get("status"),
            "origOrderType": obj.get("origOrderType"),
            "side": obj.get("side"),
            "price": obj.get("price"),
            "bgColor": obj.get("bgColor"),
            "fgColor": obj.get("fgColor"),
            "orderId": obj.get("orderId"),
            "parentId": obj.get("parentId"),
            "order_ref": obj.get("order_ref")
        })
        return _obj


