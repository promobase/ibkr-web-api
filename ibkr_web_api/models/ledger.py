# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Ledger(BaseModel):
    """
    Ledger
    """ # noqa: E501
    commoditymarketvalue: Optional[Union[StrictFloat, StrictInt]] = None
    futuremarketvalue: Optional[Union[StrictFloat, StrictInt]] = None
    settledcash: Optional[Union[StrictFloat, StrictInt]] = None
    exchangerate: Optional[Union[StrictFloat, StrictInt]] = None
    sessionid: Optional[StrictInt] = None
    cashbalance: Optional[Union[StrictFloat, StrictInt]] = None
    corporatebondsmarketvalue: Optional[Union[StrictFloat, StrictInt]] = None
    warrantsmarketvalue: Optional[Union[StrictFloat, StrictInt]] = None
    netliquidationvalue: Optional[Union[StrictFloat, StrictInt]] = None
    interest: Optional[Union[StrictFloat, StrictInt]] = None
    unrealizedpnl: Optional[Union[StrictFloat, StrictInt]] = None
    stockmarketvalue: Optional[Union[StrictFloat, StrictInt]] = None
    moneyfunds: Optional[Union[StrictFloat, StrictInt]] = None
    currency: Optional[StrictStr] = None
    realizedpnl: Optional[Union[StrictFloat, StrictInt]] = None
    funds: Optional[Union[StrictFloat, StrictInt]] = None
    acctcode: Optional[StrictStr] = None
    issueroptionsmarketvalue: Optional[Union[StrictFloat, StrictInt]] = None
    key: Optional[StrictStr] = None
    timestamp: Optional[StrictInt] = None
    severity: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["commoditymarketvalue", "futuremarketvalue", "settledcash", "exchangerate", "sessionid", "cashbalance", "corporatebondsmarketvalue", "warrantsmarketvalue", "netliquidationvalue", "interest", "unrealizedpnl", "stockmarketvalue", "moneyfunds", "currency", "realizedpnl", "funds", "acctcode", "issueroptionsmarketvalue", "key", "timestamp", "severity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Ledger from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Ledger from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commoditymarketvalue": obj.get("commoditymarketvalue"),
            "futuremarketvalue": obj.get("futuremarketvalue"),
            "settledcash": obj.get("settledcash"),
            "exchangerate": obj.get("exchangerate"),
            "sessionid": obj.get("sessionid"),
            "cashbalance": obj.get("cashbalance"),
            "corporatebondsmarketvalue": obj.get("corporatebondsmarketvalue"),
            "warrantsmarketvalue": obj.get("warrantsmarketvalue"),
            "netliquidationvalue": obj.get("netliquidationvalue"),
            "interest": obj.get("interest"),
            "unrealizedpnl": obj.get("unrealizedpnl"),
            "stockmarketvalue": obj.get("stockmarketvalue"),
            "moneyfunds": obj.get("moneyfunds"),
            "currency": obj.get("currency"),
            "realizedpnl": obj.get("realizedpnl"),
            "funds": obj.get("funds"),
            "acctcode": obj.get("acctcode"),
            "issueroptionsmarketvalue": obj.get("issueroptionsmarketvalue"),
            "key": obj.get("key"),
            "timestamp": obj.get("timestamp"),
            "severity": obj.get("severity")
        })
        return _obj


