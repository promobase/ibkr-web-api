# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SecdefInfo(BaseModel):
    """
    Contains some basic info of contract
    """ # noqa: E501
    conid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="IBKR contract identifier")
    symbol: Optional[StrictStr] = Field(default=None, description="Underlying symbol")
    sec_type: Optional[StrictStr] = Field(default=None, description="Security type", alias="secType")
    exchange: Optional[StrictStr] = Field(default=None, description="Primary Exchange, Routing or Trading Venue")
    listing_exchange: Optional[StrictStr] = Field(default=None, description="Main Trading Venue", alias="listingExchange")
    right: Optional[StrictStr] = Field(default=None, description="Put or Call of the option. C = Call Option, P = Put Option")
    strike: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Set price at which a derivative contract can be bought or sold. The strike price also known as exercise price.")
    currency: Optional[StrictStr] = Field(default=None, description="Currency the contract trades in")
    cusip: Optional[StrictStr] = Field(default=None, description="Committee on Uniform Securities Identification Procedures number")
    coupon: Optional[StrictStr] = Field(default=None, description="Annual interest rate paid on a bond")
    desc1: Optional[StrictStr] = Field(default=None, description="Currency pairs for Forex e.g. EUR.AUD, EUR.CAD, EUR.CHF etc.")
    desc2: Optional[StrictStr] = Field(default=None, description="Formatted expiration, strike and right")
    maturity_date: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Format YYYYMMDD, the date on which the underlying transaction settles if the option is exercised", alias="maturityDate")
    multiplier: Optional[StrictStr] = Field(default=None, description="Multiplier for total premium paid or received for derivative contract.")
    trading_class: Optional[StrictStr] = Field(default=None, description="Designation of the contract.", alias="tradingClass")
    valid_exchanges: Optional[StrictStr] = Field(default=None, description="Comma separated list of exchanges or trading venues.", alias="validExchanges")
    __properties: ClassVar[List[str]] = ["conid", "symbol", "secType", "exchange", "listingExchange", "right", "strike", "currency", "cusip", "coupon", "desc1", "desc2", "maturityDate", "multiplier", "tradingClass", "validExchanges"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecdefInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecdefInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conid": obj.get("conid"),
            "symbol": obj.get("symbol"),
            "secType": obj.get("secType"),
            "exchange": obj.get("exchange"),
            "listingExchange": obj.get("listingExchange"),
            "right": obj.get("right"),
            "strike": obj.get("strike"),
            "currency": obj.get("currency"),
            "cusip": obj.get("cusip"),
            "coupon": obj.get("coupon"),
            "desc1": obj.get("desc1"),
            "desc2": obj.get("desc2"),
            "maturityDate": obj.get("maturityDate"),
            "multiplier": obj.get("multiplier"),
            "tradingClass": obj.get("tradingClass"),
            "validExchanges": obj.get("validExchanges")
        })
        return _obj


