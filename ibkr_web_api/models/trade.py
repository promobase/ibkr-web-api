# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Trade(BaseModel):
    """
    Trade
    """ # noqa: E501
    execution_id: Optional[StrictStr] = Field(default=None, description="execution identifier for the order")
    symbol: Optional[StrictStr] = Field(default=None, description="Underlying Symbol")
    side: Optional[StrictStr] = Field(default=None, description="The side of the market of the order.   * B - Buy contract near posted ask price   * S - Sell contract near posted bid price   * X - Option expired ")
    order_description: Optional[StrictStr] = Field(default=None, description="Formatted description of the order \"%side% %size% @ %price% on %exchange%\".")
    trade_time: Optional[StrictStr] = Field(default=None, description="Time of Status update in format \"YYYYMMDD-hh:mm:ss\".")
    trade_time_r: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Time of status update in format unix time.")
    size: Optional[StrictStr] = Field(default=None, description="Quantity of the order")
    price: Optional[StrictStr] = Field(default=None, description="Average Price")
    order_ref: Optional[StrictStr] = Field(default=None, description="User defined string used to identify the order. Value is set using \"cOID\" field while placing an order.")
    submitter: Optional[StrictStr] = Field(default=None, description="User that submitted order")
    exchange: Optional[StrictStr] = Field(default=None, description="Exchange or venue of order")
    commission: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Commission of the order")
    net_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Net cost of the order, including contract multiplier and quantity.")
    account: Optional[StrictStr] = Field(default=None, description="accountCode")
    acount_code: Optional[StrictStr] = Field(default=None, description="Account Number", alias="acountCode")
    company_name: Optional[StrictStr] = Field(default=None, description="Contracts company name")
    contract_description_1: Optional[StrictStr] = Field(default=None, description="Format contract name")
    sec_type: Optional[StrictStr] = Field(default=None, description="Asset class")
    conid: Optional[StrictStr] = Field(default=None, description="IBKR's contract identifier")
    conidex: Optional[StrictStr] = Field(default=None, description="conid and exchange. Format supports conid or conid@exchange")
    position: Optional[StrictStr] = Field(default=None, description="Total quantity owned for this contract")
    clearing_id: Optional[StrictStr] = Field(default=None, description="Firm which will settle the trade. For IBExecution customers only.")
    clearing_name: Optional[StrictStr] = Field(default=None, description="Specifies the true beneficiary of the order. For IBExecution customers only.")
    liquidation_trade: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="If order adds liquidity to the market.")
    __properties: ClassVar[List[str]] = ["execution_id", "symbol", "side", "order_description", "trade_time", "trade_time_r", "size", "price", "order_ref", "submitter", "exchange", "commission", "net_amount", "account", "acountCode", "company_name", "contract_description_1", "sec_type", "conid", "conidex", "position", "clearing_id", "clearing_name", "liquidation_trade"]

    @field_validator('side')
    def side_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['B', 'S', 'X']):
            raise ValueError("must be one of enum values ('B', 'S', 'X')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Trade from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Trade from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "execution_id": obj.get("execution_id"),
            "symbol": obj.get("symbol"),
            "side": obj.get("side"),
            "order_description": obj.get("order_description"),
            "trade_time": obj.get("trade_time"),
            "trade_time_r": obj.get("trade_time_r"),
            "size": obj.get("size"),
            "price": obj.get("price"),
            "order_ref": obj.get("order_ref"),
            "submitter": obj.get("submitter"),
            "exchange": obj.get("exchange"),
            "commission": obj.get("commission"),
            "net_amount": obj.get("net_amount"),
            "account": obj.get("account"),
            "acountCode": obj.get("acountCode"),
            "company_name": obj.get("company_name"),
            "contract_description_1": obj.get("contract_description_1"),
            "sec_type": obj.get("sec_type"),
            "conid": obj.get("conid"),
            "conidex": obj.get("conidex"),
            "position": obj.get("position"),
            "clearing_id": obj.get("clearing_id"),
            "clearing_name": obj.get("clearing_name"),
            "liquidation_trade": obj.get("liquidation_trade")
        })
        return _obj


