# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AlertRequestConditionsInner(BaseModel):
    """
    AlertRequestConditionsInner
    """ # noqa: E501
    type: Optional[StrictInt] = Field(default=None, description="Types: 1-Price, 3-Time, 4-Margin, 5-Trade, 6-Volume, 7: MTA market 8: MTA Position, 9: MTA Acc. Daily PN& ")
    conidex: Optional[StrictStr] = Field(default=None, description="conid and exchange. Format supports conid or conid@exchange")
    operator: Optional[StrictStr] = Field(default=None, description="optional, operator for the current condition, can be >= or <=")
    trigger_method: Optional[StrictStr] = Field(default=None, description="optional, only some type of conditions have triggerMethod", alias="triggerMethod")
    value: Optional[StrictStr] = Field(default=None, description="can not be empty, can pass default value \"*\"")
    logic_bind: Optional[StrictStr] = Field(default=None, description="\"a\" means \"AND\", \"o\" means \"OR\", \"n\" means \"END\", the last one condition in the condition array should \"n\" ", alias="logicBind")
    time_zone: Optional[StrictStr] = Field(default=None, description="only needed for some MTA alert condition", alias="timeZone")
    __properties: ClassVar[List[str]] = ["type", "conidex", "operator", "triggerMethod", "value", "logicBind", "timeZone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertRequestConditionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertRequestConditionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "conidex": obj.get("conidex"),
            "operator": obj.get("operator"),
            "triggerMethod": obj.get("triggerMethod"),
            "value": obj.get("value"),
            "logicBind": obj.get("logicBind"),
            "timeZone": obj.get("timeZone")
        })
        return _obj


