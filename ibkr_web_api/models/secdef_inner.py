# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ibkr_web_api.models.secdef_inner_increment_rules import SecdefInnerIncrementRules
from typing import Optional, Set
from typing_extensions import Self

class SecdefInner(BaseModel):
    """
    security definition information.
    """ # noqa: E501
    conid: Optional[StrictInt] = Field(default=None, description="IBKR contract identifier.")
    currency: Optional[StrictStr] = Field(default=None, description="Currency contract trades in.")
    cross_currency: Optional[StrictBool] = Field(default=None, description="Defines if a derivative contract has a different currency.", alias="crossCurrency")
    time: Optional[StrictInt] = None
    chinese_name: Optional[StrictStr] = Field(default=None, description="HTML encoded company description in Chinese.", alias="chineseName")
    all_exchanges: Optional[StrictStr] = Field(default=None, description="List of exchanges and venues contract trades.", alias="allExchanges")
    listing_exchange: Optional[StrictStr] = Field(default=None, description="Main trading venue.", alias="listingExchange")
    name: Optional[StrictStr] = Field(default=None, description="Company Name.")
    asset_class: Optional[StrictStr] = Field(default=None, description="Group of financial instruments which have similar financial characteristics and behave similar in the marketplace.", alias="assetClass")
    expiry: Optional[StrictStr] = Field(default=None, description="Specific data contract expires.")
    last_trading_day: Optional[StrictStr] = Field(default=None, description="Final day derivative contract can be traded before delivery of the underlying asset or cash settlement.", alias="lastTradingDay")
    group: Optional[StrictStr] = Field(default=None, description="Potential characteristic of each product.")
    put_or_call: Optional[StrictStr] = Field(default=None, description="Defines the right to buy or sell of the underlying security.", alias="putOrCall")
    sector: Optional[StrictStr] = Field(default=None, description="The category of the economy.")
    sector_group: Optional[StrictStr] = Field(default=None, description="Stock Group contract belongs too.", alias="sectorGroup")
    strike: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Set price at which a derivative contract can be bought or sold.")
    ticker: Optional[StrictStr] = Field(default=None, description="Contract symbol.")
    und_conid: Optional[StrictInt] = Field(default=None, description="Underlying contract identifier.", alias="undConid")
    multiplier: Optional[StrictInt] = Field(default=None, description="Multiplier for total premium paid or received for derivative contract.")
    type: Optional[StrictStr] = Field(default=None, description="Stock type.")
    und_comp: Optional[StrictStr] = Field(default=None, description="Company name for underlying contract.", alias="undComp")
    und_sym: Optional[StrictStr] = Field(default=None, description="IBKR Symbol for underlying contract.", alias="undSym")
    has_options: Optional[StrictBool] = Field(default=None, description="If contract has an option.", alias="hasOptions")
    full_name: Optional[StrictStr] = Field(default=None, description="Formatted company name with underlying symbol, expiration, strike, right.", alias="fullName")
    is_us: Optional[StrictBool] = Field(default=None, description="If contract is a US contract. Currently supported for stocks, options and warrants.", alias="isUS")
    increment_rules: Optional[SecdefInnerIncrementRules] = Field(default=None, alias="incrementRules")
    __properties: ClassVar[List[str]] = ["conid", "currency", "crossCurrency", "time", "chineseName", "allExchanges", "listingExchange", "name", "assetClass", "expiry", "lastTradingDay", "group", "putOrCall", "sector", "sectorGroup", "strike", "ticker", "undConid", "multiplier", "type", "undComp", "undSym", "hasOptions", "fullName", "isUS", "incrementRules"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecdefInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of increment_rules
        if self.increment_rules:
            _dict['incrementRules'] = self.increment_rules.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecdefInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conid": obj.get("conid"),
            "currency": obj.get("currency"),
            "crossCurrency": obj.get("crossCurrency"),
            "time": obj.get("time"),
            "chineseName": obj.get("chineseName"),
            "allExchanges": obj.get("allExchanges"),
            "listingExchange": obj.get("listingExchange"),
            "name": obj.get("name"),
            "assetClass": obj.get("assetClass"),
            "expiry": obj.get("expiry"),
            "lastTradingDay": obj.get("lastTradingDay"),
            "group": obj.get("group"),
            "putOrCall": obj.get("putOrCall"),
            "sector": obj.get("sector"),
            "sectorGroup": obj.get("sectorGroup"),
            "strike": obj.get("strike"),
            "ticker": obj.get("ticker"),
            "undConid": obj.get("undConid"),
            "multiplier": obj.get("multiplier"),
            "type": obj.get("type"),
            "undComp": obj.get("undComp"),
            "undSym": obj.get("undSym"),
            "hasOptions": obj.get("hasOptions"),
            "fullName": obj.get("fullName"),
            "isUS": obj.get("isUS"),
            "incrementRules": SecdefInnerIncrementRules.from_dict(obj["incrementRules"]) if obj.get("incrementRules") is not None else None
        })
        return _obj


