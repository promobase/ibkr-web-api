# coding: utf-8

"""
    Client Portal Web API

    Client Poral Web API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IserverContractConidAlgosGet200ResponseInnerParametersInner(BaseModel):
    """
    IserverContractConidAlgosGet200ResponseInnerParametersInner
    """ # noqa: E501
    id: StrictStr = Field(description="The algo parameter")
    required: Optional[StrictBool] = Field(default=None, description="If true a value must be entered.")
    name: Optional[StrictStr] = Field(default=None, description="Descriptive name of the parameter.")
    value_class_name: StrictStr = Field(description="Format of the parameter.", alias="valueClassName")
    min_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Smallest value, only applies to parameters with valueClassName=Double.", alias="minValue")
    max_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Largest value, only applies to parameters with valueClassName=Double.", alias="maxValue")
    default_value: Optional[StrictBool] = Field(default=None, description="User configured preset for this parameter.", alias="defaultValue")
    legal_strings: Optional[StrictStr] = Field(default=None, description="The list of choices", alias="legalStrings")
    description: Optional[StrictStr] = Field(default=None, description="Detailed description of the parameter.")
    gui_rank: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The order in UI, used when building dynamic UI so that more important parameters are presented first.", alias="guiRank")
    price_market_rule: Optional[StrictBool] = Field(default=None, description="If true, must specify parameter using market rule format. Only applies to parameters with valueClassName=Double.", alias="priceMarketRule")
    enabled_conditions: Optional[StrictStr] = Field(default=None, description="The rules that UI should apply to algo parameters depending on chosen order type:  * MKT:speedUp:=:no - hide SpeedUp param when MKT is chosen for order type.  * LMT:strategyType:<>:empty - strategyType param cannot be empty when LMT is chosen for order type.  * MKT:strategyType:=:Marketable - set strategyType param to Marketable and disable (no other choice) when MKT is chosen for order type. ", alias="enabledConditions")
    __properties: ClassVar[List[str]] = ["id", "required", "name", "valueClassName", "minValue", "maxValue", "defaultValue", "legalStrings", "description", "guiRank", "priceMarketRule", "enabledConditions"]

    @field_validator('value_class_name')
    def value_class_name_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['double', 'string', 'time', 'boolean']):
            raise ValueError("must be one of enum values ('double', 'string', 'time', 'boolean')")
        return value

    @field_validator('enabled_conditions')
    def enabled_conditions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MKT:speedUp:=:no', 'LMT:strategyType:<>:empty', 'MKT:strategyType:=:Marketable']):
            raise ValueError("must be one of enum values ('MKT:speedUp:=:no', 'LMT:strategyType:<>:empty', 'MKT:strategyType:=:Marketable')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IserverContractConidAlgosGet200ResponseInnerParametersInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IserverContractConidAlgosGet200ResponseInnerParametersInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "required": obj.get("required"),
            "name": obj.get("name"),
            "valueClassName": obj.get("valueClassName"),
            "minValue": obj.get("minValue"),
            "maxValue": obj.get("maxValue"),
            "defaultValue": obj.get("defaultValue"),
            "legalStrings": obj.get("legalStrings"),
            "description": obj.get("description"),
            "guiRank": obj.get("guiRank"),
            "priceMarketRule": obj.get("priceMarketRule"),
            "enabledConditions": obj.get("enabledConditions")
        })
        return _obj


