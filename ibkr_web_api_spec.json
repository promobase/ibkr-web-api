{
  "openapi": "3.0.1",
  "info": {
    "title": "Client Portal Web API",
    "description": "Client Poral Web API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:5000/v1/api"
    }
  ],
  "paths": {
    "/fyi/unreadnumber": {
      "get": {
        "tags": [
          "FYI"
        ],
        "summary": "Get unread number of fyis. The HTTP method POST is also supported.",
        "description": "Returns the total number of unread fyis\n",
        "responses": {
          "200": {
            "description": "An object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "BN": {
                      "type": "integer",
                      "description": "unread number"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fyi/settings": {
      "get": {
        "tags": [
          "FYI"
        ],
        "summary": "Get a list of subscriptions",
        "description": "Return the current choices of subscriptions, we can toggle the option\n",
        "responses": {
          "200": {
            "description": "An array",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "A": {
                        "type": "integer",
                        "description": "optional, if A doesn't exist, it means user can't toggle this option. 0-off, 1-on."
                      },
                      "FC": {
                        "type": "string",
                        "description": "fyi code"
                      },
                      "H": {
                        "type": "integer",
                        "description": "disclaimer read, 1 = yes, = 0 no."
                      },
                      "FD": {
                        "type": "string",
                        "description": "detailed description"
                      },
                      "FN": {
                        "type": "string",
                        "description": "title"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fyi/settings/{typecode}": {
      "post": {
        "tags": [
          "FYI"
        ],
        "summary": "Enable/Disable certain subscription",
        "description": "Configure which typecode you would like to enable/disable.\n",
        "parameters": [
          {
            "name": "typecode",
            "in": "path",
            "description": "fyi code",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 means successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/fyi/disclaimer/{typecode}": {
      "get": {
        "tags": [
          "FYI"
        ],
        "summary": "Get disclaimer for a certain kind of fyi",
        "parameters": [
          {
            "name": "typecode",
            "in": "path",
            "description": "fyi code, for example --M8, EA",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "receives the disclaimer message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "DT": {
                      "type": "string",
                      "description": "disclaimer message"
                    },
                    "FC": {
                      "type": "string",
                      "description": "fyi code"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "FYI"
        ],
        "summary": "Mark disclaimer read",
        "parameters": [
          {
            "name": "typecode",
            "in": "path",
            "description": "fyi code, for example --M8, EA",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 means successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "T": {
                      "type": "integer"
                    },
                    "V": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fyi/deliveryoptions": {
      "get": {
        "tags": [
          "FYI"
        ],
        "summary": "Get delivery options",
        "description": "options for sending fyis to email and other devices\n",
        "responses": {
          "200": {
            "description": "An object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "M": {
                      "type": "integer",
                      "description": "Email option is enabled or not 0-off, 1-on."
                    },
                    "E": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "NM": {
                            "type": "string",
                            "description": "device name"
                          },
                          "I": {
                            "type": "string",
                            "description": "device id"
                          },
                          "UI": {
                            "type": "string",
                            "description": "unique device id"
                          },
                          "A": {
                            "type": "string",
                            "description": "device is enabled or not 0-true, 1-false."
                          }
                        },
                        "description": "device"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fyi/deliveryoptions/email": {
      "put": {
        "tags": [
          "FYI"
        ],
        "summary": "Enable/Disable email option",
        "parameters": [
          {
            "name": "enabled",
            "in": "query",
            "description": "true/false",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 means successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "T": {
                      "type": "integer"
                    },
                    "V": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fyi/deliveryoptions/device": {
      "post": {
        "tags": [
          "FYI"
        ],
        "summary": "Enable/Disable device option",
        "requestBody": {
          "description": "device info",
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "devicename": {
                    "type": "string"
                  },
                  "deviceId": {
                    "type": "string"
                  },
                  "uiName": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "200 means successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "T": {
                      "type": "integer"
                    },
                    "V": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/fyi/deliveryoptions/{deviceId}": {
      "delete": {
        "tags": [
          "FYI"
        ],
        "summary": "Delete a device",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 means successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/fyi/notifications": {
      "get": {
        "tags": [
          "FYI"
        ],
        "summary": "Get a list of notifications",
        "parameters": [
          {
            "name": "exclude",
            "in": "query",
            "description": "if set, don't set include",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "if set, don't set exclude",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "max number of fyis in response",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notifications"
                }
              }
            }
          }
        }
      }
    },
    "/fyi/notifications/more": {
      "get": {
        "tags": [
          "FYI"
        ],
        "summary": "Get more notifications based on a certain one",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "id of last notification in the list",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notifications"
                }
              }
            }
          }
        }
      }
    },
    "/fyi/notifications/{notificationId}": {
      "put": {
        "tags": [
          "FYI"
        ],
        "summary": "Get a list of notifications",
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "description": "mark a notification read",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "when 200 receives, it means successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/trsrv/secdef": {
      "post": {
        "tags": [
          "Contract"
        ],
        "summary": "Secdef by Conid",
        "description": "Returns a list of security definitions for the given conids",
        "requestBody": {
          "description": "request body",
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "conids": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "description": "contract id"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "returns an array of secdef info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/secdef"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/trsrv/secdef/schedule": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Get trading schedule for symbol",
        "description": "Returns the trading schedule up to a month for the requested contract",
        "parameters": [
          {
            "name": "assetClass",
            "in": "query",
            "description": "specify the asset class of the contract.\nAvailable values-- Stock: STK, Option: OPT, Future: FUT, Contract For Difference: CFD, Warrant: WAR, Forex: SWP, Mutual Fund: FND, Bond: BND, Inter-Commodity Spreads: ICS\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "symbol",
            "in": "query",
            "description": "Underlying Symbol for specified contract, for example 'AAPL' for US Stock - Apple Inc.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "description": "Native exchange for contract, for example 'NASDAQ' for US Stock - Apple Inc.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exchangeFilter",
            "in": "query",
            "description": "Response only returns trading schedule for specified exchange",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Exchange parameter id"
                    },
                    "tradeVenueId": {
                      "type": "string",
                      "description": "Reference on a trade venue of given exchange parameter"
                    },
                    "schedules": {
                      "type": "array",
                      "description": "Always contains at least one 'tradingTime'  and zero or more 'sessionTime' tags",
                      "items": {
                        "type": "object",
                        "properties": {
                          "clearingCycleEndTime": {
                            "type": "integer"
                          },
                          "tradingScheduleDate": {
                            "type": "integer",
                            "description": "20000101 stands for any Sat, 20000102 stands for any Sun, ... 20000107 stands for any Fri. Any other date stands for itself."
                          },
                          "sessions": {
                            "type": "object",
                            "properties": {
                              "openingTime": {
                                "type": "integer"
                              },
                              "closingTime": {
                                "type": "integer"
                              },
                              "prop": {
                                "type": "string",
                                "description": "If the whole trading day is considered LIQUID then the value 'LIQUID' is returned."
                              }
                            },
                            "description": "If the LIQUID hours differs from the total trading day then a separate 'session' tag is returned."
                          },
                          "tradingTimes": {
                            "type": "object",
                            "properties": {
                              "openingTime": {
                                "type": "integer"
                              },
                              "closingTime": {
                                "type": "integer"
                              },
                              "cancelDayOrders": {
                                "type": "string"
                              }
                            },
                            "description": "Returns tradingTime in exchange time zone."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/trsrv/futures": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Security Futures by Symbol",
        "description": "Returns a list of non-expired future contracts for given symbol(s)",
        "parameters": [
          {
            "name": "symbols",
            "in": "query",
            "description": "list of case-sensitive symbols separated by comma",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an object with symbol and and array of its future contracts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "symbol": {
                      "$ref": "#/components/schemas/futures"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/trsrv/stocks": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Security Stocks by Symbol",
        "description": "Returns an object contains all stock contracts for given symbol(s)",
        "parameters": [
          {
            "name": "symbols",
            "in": "query",
            "description": "list of upper-sensitive symbols separated by comma",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an object with symbols",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "symbol": {
                      "$ref": "#/components/schemas/stocks"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ws": {
      "post": {
        "tags": [
          "Streaming"
        ],
        "summary": "Websocket Endpoint",
        "description": "The streaming API is documented under [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.",
        "responses": {
          "200": {
            "description": "confirms session is open",
            "content": {}
          }
        }
      }
    },
    "/tickle": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Ping the server to keep the session open",
        "description": "If the gateway has not received any requests for several minutes an open session will automatically timeout. The tickle endpoint pings the server to prevent the session from ending.",
        "responses": {
          "200": {
            "description": "confirms session is open",
            "content": {}
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Ends the current session",
        "description": "Logs the user out of the gateway session. Any further activity requires re-authentication.",
        "responses": {
          "200": {
            "description": "returned status indicates if user is logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "confirmed": {
                      "type": "boolean",
                      "description": "true means username is still logged in, false means it is not"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ccp/auth/init": {
      "post": {
        "tags": [
          "CCP (Beta)"
        ],
        "summary": "Start CCP Session",
        "description": "Initiate a brokerage session to CCP. Only one brokerage session type can run at a time. If an existing brokerage session to iServer is running then call the endpoint /logout first. Note at this time only order management is possible from CCP session, market data and scanner endpoints can't be used since they are only available from iServer session. Work is in progress to provide new CCP endpoints for market data and scanners.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "compete": {
                    "type": "boolean",
                    "description": "Allow competing CCP session to run"
                  },
                  "locale": {
                    "type": "string",
                    "description": "Concatenate value for language and region, set to \"en_US\""
                  },
                  "mac": {
                    "type": "string",
                    "description": "Local MAC Address"
                  },
                  "machineId": {
                    "type": "string",
                    "description": "Local machine ID"
                  },
                  "username": {
                    "type": "string",
                    "description": "Login user, set to dash \"-\""
                  }
                }
              }
            }
          }
        },
        "responses": {
          "500": {
            "description": "System error",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "200": {
            "description": "Returns challenge for connection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "challenge": {
                      "type": "object",
                      "description": "Challenge in hex format"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hmds/history": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Market Data History (Beta)",
        "description": "Using a direct connection to the market data farm, will provide a list of historical market data for given conid.",
        "parameters": [
          {
            "name": "conid",
            "in": "query",
            "description": "contract id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "Time period for history request. \n  * min: Minutes\n  * h: Hours\n  * d: Days\n  * w: Weeks\n  * m: Months\n  * y: Years\n",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "min",
                "h",
                "d",
                "w",
                "m",
                "y"
              ]
            }
          },
          {
            "name": "bar",
            "in": "query",
            "description": "Duration of time for each candlestick bar.\n  * min: Minutes\n  * h: Hours\n  * d: Days\n  * w: Weeks\n  * m: Months\n",
            "schema": {
              "type": "string",
              "enum": [
                "min",
                "h",
                "d",
                "w",
                "m"
              ]
            }
          },
          {
            "name": "outsideRth",
            "in": "query",
            "description": "For contracts that support it, will determine if history data includes outside of regular trading hours.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "200": {
            "description": "Valid result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/history-result"
                }
              }
            }
          }
        }
      }
    },
    "/ccp/auth/response": {
      "post": {
        "tags": [
          "CCP (Beta)"
        ],
        "summary": "Complete CCP Session",
        "description": "Session Token Authentication",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "response": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "500": {
            "description": "System error",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "200": {
            "description": "Valid result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "passed": {
                      "type": "boolean",
                      "description": "If sso authentication completed"
                    },
                    "authenticated": {
                      "type": "boolean",
                      "description": "If connection is authenticated"
                    },
                    "connected": {
                      "type": "boolean",
                      "description": "Connected to CCP session"
                    },
                    "competing": {
                      "type": "boolean",
                      "description": "If user already has an existing brokerage session running."
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "auth"
      }
    },
    "/ccp/status": {
      "get": {
        "tags": [
          "CCP (Beta)"
        ],
        "summary": "CCP Status",
        "description": "Provide the current CCP session status. When using the Gateway this endpoint will also initiate a brokerage session to CCP by sending /auth/init and response.",
        "responses": {
          "500": {
            "description": "System error",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "200": {
            "description": "Valid result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authenticated": {
                      "type": "boolean",
                      "description": "Login session is authenticated to the CCP."
                    },
                    "connected": {
                      "type": "boolean",
                      "description": "Login session is connected"
                    },
                    "name": {
                      "type": "string",
                      "description": "server name"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ccp/account": {
      "get": {
        "tags": [
          "CCP (Beta)"
        ],
        "summary": "Brokerage Accounts",
        "description": "Provides the list of tradeable accounts",
        "responses": {
          "200": {
            "description": "An array of accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mainAcct": {
                      "type": "string",
                      "description": "The primary or parent account."
                    },
                    "acctList": {
                      "type": "array",
                      "description": "List of tradeable or Sub Accounts",
                      "items": {
                        "type": "object",
                        "properties": {
                          "0": {
                            "type": "string",
                            "description": "For multi-account structures each trading account will numbered from 0 to ..."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ccp/positions": {
      "get": {
        "tags": [
          "CCP (Beta)"
        ],
        "summary": "Positions",
        "description": "List of positions",
        "responses": {
          "500": {
            "description": "System error",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "200": {
            "description": "Valid result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/position-data"
                }
              }
            }
          }
        }
      }
    },
    "/ccp/orders": {
      "get": {
        "tags": [
          "CCP (Beta)"
        ],
        "summary": "Order Status",
        "description": "Get status for all orders",
        "parameters": [
          {
            "name": "acct",
            "in": "query",
            "description": "User Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cancelled",
            "in": "query",
            "description": "Return only Rejected or Cancelled orders since today midnight",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "System error",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "200": {
            "description": "An Object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orders": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/order-data"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ccp/order": {
      "put": {
        "tags": [
          "CCP (Beta)"
        ],
        "summary": "Update Order",
        "description": "Updates an Order. Updating an order requires the same arguments as placing an order besides the conid. Note: The status of the order can be queried through GET /ccp/order.\n",
        "parameters": [
          {
            "name": "acct",
            "in": "query",
            "description": "User Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Order ID to be modified",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "System error, for example when connection to CCP failed",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "200": {
            "description": "An Object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order-data"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CCP (Beta)"
        ],
        "summary": "Submit Order",
        "description": "Submits an Order.\n",
        "parameters": [
          {
            "name": "acct",
            "in": "query",
            "description": "User Account",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conid",
            "in": "query",
            "description": "Contract identifier from IBKR's database.",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ccy",
            "in": "query",
            "description": "Contract Currency",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "USD",
                "GBP",
                "EUR"
              ]
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "description": "Exchange",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "NYSE",
                "CBOE",
                "NYMEX"
              ]
            }
          },
          {
            "name": "qty",
            "in": "query",
            "description": "Order Quantity",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Order Price; required if order type is limit",
            "schema": {
              "type": "string",
              "enum": [
                "limit",
                "market"
              ]
            }
          },
          {
            "name": "side",
            "in": "query",
            "description": "Side",
            "schema": {
              "type": "string",
              "enum": [
                "sell",
                "buy"
              ]
            }
          },
          {
            "name": "price",
            "in": "query",
            "description": "Order Price; required if order type is limit",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "tif",
            "in": "query",
            "description": "Time in Force",
            "schema": {
              "type": "string",
              "enum": [
                "IOC",
                "GTC"
              ]
            }
          }
        ],
        "responses": {
          "500": {
            "description": "System error, for example when connection to CCP failed",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "200": {
            "description": "An Object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order-data"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CCP (Beta)"
        ],
        "summary": "Delete Order",
        "description": "Sends an Order cancellation request. The status of the order can be queried through /ccp/order. Passing arguments as GET is also supported (requires passing action=delete) (GET is meant for development only)\n",
        "parameters": [
          {
            "name": "acct",
            "in": "query",
            "description": "Account Number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Order Identifier of original submit order",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "System error, for example when connection to CCP failed",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "200": {
            "description": "An Object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order-data"
                }
              }
            }
          }
        }
      }
    },
    "/ccp/trades": {
      "get": {
        "tags": [
          "CCP (Beta)"
        ],
        "summary": "Trades",
        "description": "Get a list of Trades, by default, the list is from today midnight to Date.now().\n",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date (YYYYMMDD-HH:mm:ss) or offset (-1,-2,-3..). To value should be bigger than from value.\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "System error",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Access denied",
            "content": {}
          },
          "200": {
            "description": "An Object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orders": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/order-data"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sso/validate": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Validate SSO",
        "description": "Validates the current session for the SSO user",
        "responses": {
          "500": {
            "description": "System failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "200": {
            "description": "An Object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "LOGIN_TYPE": {
                      "type": "number",
                      "description": "1 for Live, 2 for Paper"
                    },
                    "USER_NAME": {
                      "type": "string",
                      "description": "Username"
                    },
                    "USER_ID": {
                      "type": "number",
                      "description": "User ID"
                    },
                    "expire": {
                      "type": "number",
                      "description": "Time in milliseconds until session expires. Caller needs to call the again to re-validate session"
                    },
                    "RESULT": {
                      "type": "boolean",
                      "description": "true if session was validated; false if not."
                    },
                    "AUTH_TIME": {
                      "type": "number",
                      "description": "Time of session validation"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hmds/scanner": {
      "post": {
        "tags": [
          "Scanner"
        ],
        "summary": "Run Scanner (Beta)",
        "description": "Using a direct connection to the market data farm, will provide results to the requested scanner.",
        "requestBody": {
          "description": "request body",
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "instrument": {
                    "type": "string",
                    "example": "BOND.GOVT"
                  },
                  "locations": {
                    "type": "string",
                    "example": "BOND.GOVT.US"
                  },
                  "scanCode": {
                    "type": "string",
                    "example": "FAR_MATURITY_DATE"
                  },
                  "secType": {
                    "type": "string",
                    "example": "BOND"
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "example": "bondValidNetBidOrAskOnly"
                        },
                        "value": {
                          "type": "object",
                          "description": "Value can be either an integer, double, boolean or a string depending upon the type of filter specified in the code section",
                          "example": "true"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "200": {
            "description": "Valid result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scanner-result"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/md/snapshot": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Market Data Snapshot (Beta)",
        "description": "Get a snapshot of Market Data for the given conid(s).See response for a list of available fields that can be requested from the fields argument.\nMust be connected to a brokerage session before can query snapshot data.\nFirst /snapshot endpoint call for given conid(s) will initiate the market data request, make an additional request to receive field values back.\nTo receive all available fields the /snapshot endpoint will need to be called several times.\nTo receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.\n",
        "parameters": [
          {
            "name": "conids",
            "in": "query",
            "description": "List of conids comma separated. Optional exchange and instrument type can be specified.\n  * conid: IBKR Contract Identifier\n  * exchange: Exchange or venue\n  * instrType: Instrument Type supported values: CS (Stocks), OPT (Options), FUT (Futures), FOP (Future Options), WAR (Warrants), BOND (Bonds), FUND (Mutual Funds), CASH (Forex), CFD (Contract for difference), IND (Index)\n",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "conid@exchange:instrType"
              ]
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "list of fields separated by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "System failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "200": {
            "description": "An Object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/market-data"
                }
              }
            }
          }
        }
      }
    },
    "/pa/performance": {
      "post": {
        "tags": [
          "PortfolioAnalyst"
        ],
        "summary": "Account Performance",
        "description": "Returns the performance (MTM) for the given accounts, if more than one account is passed, the result is consolidated.",
        "requestBody": {
          "description": "an array of account ids",
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "acctIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "account id"
                    }
                  },
                  "freq": {
                    "type": "string",
                    "description": "Frequency of cumulative performance data points: 'D'aily, 'M'onthly,'Q'uarterly.\n",
                    "enum": [
                      "D",
                      "M",
                      "Q"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "returns an object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/performance"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/pa/summary": {
      "post": {
        "tags": [
          "PortfolioAnalyst"
        ],
        "summary": "Account Balance's Summary (Deprecated)",
        "description": "This endpoint is going to be deprecated. Please use /pa/performance instead.\nReturns a summary of all account balances for the given accounts, if more than one account is passe, the result is consolidated.",
        "requestBody": {
          "description": "an array of account ids",
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "acctIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "account id"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "returns an object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/summary"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-codegen-request-body-name": "body"
      }
    },
    "/pa/transactions": {
      "post": {
        "tags": [
          "PortfolioAnalyst"
        ],
        "summary": "Position's Transaction History",
        "description": "transaction history for a given number of conids and accounts.\nTypes of transactions include dividend payments, buy and sell transactions, transfers.\n",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "acctIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "account id"
                    }
                  },
                  "conids": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "description": "array only supports one conid at a time."
                    }
                  },
                  "currency": {
                    "type": "string",
                    "description": "optional defaults to USD.",
                    "example": "USD"
                  },
                  "days": {
                    "type": "number",
                    "description": "optional, default value is 90",
                    "example": 7.0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "returns an object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transactions"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/accounts": {
      "get": {
        "tags": [
          "Account",
          "Portfolio"
        ],
        "summary": "Portfolio Accounts",
        "description": "In non-tiered account structures, returns a list of accounts for which the user can view position and account information. This endpoint must be called prior to calling other /portfolio endpoints for those accounts. For querying a list of accounts which the user can trade, see /iserver/accounts. For a list of subaccounts in tiered account structures (e.g. financial advisor or ibroker accounts) see /portfolio/subaccounts.",
        "responses": {
          "200": {
            "description": "An array",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accounts"
                }
              }
            }
          }
        }
      }
    },
    "/portfolio/subaccounts": {
      "get": {
        "tags": [
          "Account",
          "Portfolio"
        ],
        "summary": "List of Sub-Accounts",
        "description": "Used in tiered account structures (such as Financial Advisor and IBroker Accounts) to return a list of up to 100 sub-accounts for which the user can view position and account-related information. This endpoint must be called prior to calling other /portfolio endpoints for those sub-accounts. If you have more than 100 sub-accounts use /portfolio/subaccounts2. To query a list of accounts the user can trade, see /iserver/accounts.",
        "responses": {
          "200": {
            "description": "An array",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            }
          }
        }
      }
    },
    "/portfolio/subaccounts2": {
      "get": {
        "tags": [
          "Account",
          "Portfolio"
        ],
        "summary": "List of Sub-Accounts (Large Accounts)",
        "description": "Used in tiered account structures (such as Financial Advisor and IBroker Accounts) to return a list of sub-accounts, paginated up to 20 accounts per page, for which the user can view position and account-related information. This endpoint must be called prior to calling other /portfolio endpoints for those sub-accounts. If you have less than 100 sub-accounts use /portfolio/subaccounts. To query a list of accounts the user can trade, see /iserver/accounts.",
        "parameters": [
          {
            "name": "page",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "default": "0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An object containing an array",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "description": "Number of sub-accounts"
                        },
                        "pageSize": {
                          "type": "number",
                          "description": "How many sub-accounts are returned for the page requested. A max of 20 per page."
                        },
                        "pageNume": {
                          "type": "number",
                          "description": "Current page number."
                        }
                      }
                    },
                    "subaccounts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The account identification value"
                          },
                          "accountId": {
                            "type": "string",
                            "description": "The account number",
                            "example": "U12345678 for Individual Live Accounts, DU12345678 for Individual Paper Accounts"
                          },
                          "accountVan": {
                            "type": "string",
                            "description": "The accountAlias"
                          },
                          "accountTitle": {
                            "type": "string",
                            "description": "Title of the account"
                          },
                          "displayName": {
                            "type": "string",
                            "description": "Whichever value is not null in this priority",
                            "enum": [
                              "accountTitle",
                              "accountVan",
                              "accountId"
                            ]
                          },
                          "accountAlias": {
                            "type": "string",
                            "description": "User customizable account alias. Refer to [Configure Account Alias](https://guides.interactivebrokers.com/cp/cp.htm#am/settings/accountalias.htm) for details."
                          },
                          "accountStatus": {
                            "type": "number",
                            "description": "When the account was opened in unix time."
                          },
                          "currency": {
                            "type": "string",
                            "description": "Base currency of the account.",
                            "enum": [
                              "AUD",
                              "GBP",
                              "CAD",
                              "CNH",
                              "CZK",
                              "DKK",
                              "EUR",
                              "HKD",
                              "HUF",
                              "INR",
                              "ILS",
                              "JPY",
                              "MXN",
                              "NOK",
                              "NZD",
                              "PLN",
                              "RUB",
                              "SGD",
                              "SEK",
                              "CHF",
                              "USD"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "description": "Account Type",
                            "enum": [
                              "INDIVIDUAL",
                              "JOINT",
                              "ORG",
                              "TRUST",
                              "DEMO"
                            ]
                          },
                          "tradingType": {
                            "type": "string",
                            "description": "UNI - Deprecated property"
                          },
                          "faclient": {
                            "type": "boolean",
                            "description": "If an account is a sub-account to a Financial Advisor."
                          },
                          "clearingStatus": {
                            "type": "string",
                            "description": "Status of the Account\n  * O = Open\n  * P or N = Pending\n  * A = Abandoned\n  * R = Rejected\n  * C = Closed\n  covestor:\n    type: boolean\n    description: Is a Covestor Account\n  parent:\n    type: object\n    properties:\n      mmc:\n        type: array\n        items:\n          type: string\n          description: Money Manager Client (MMC) Account\n      accountId:\n        type: string\n        description: Account Number for Money Manager Client\n      isMParent:\n        type: boolean\n        description: Is MM a Parent Account\n      isMChild:\n        type: boolean\n        description: Is MM a Child Account\n      isMultiplex:\n        type: boolean\n        description: Is a Multiplex Account. These are account models with individual account being parent and managed account being child.\n  desc:\n    type: string\n    description: Formatted \"accountId - accountAlias\"\n",
                            "enum": [
                              "O",
                              "P",
                              "N",
                              "A",
                              "R",
                              "C"
                            ]
                          }
                        },
                        "description": "Account information"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/portfolio/{accountId}/meta": {
      "get": {
        "tags": [
          "Account",
          "Portfolio"
        ],
        "summary": "Account Information",
        "description": "Account information related to account Id /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accounts"
                }
              }
            }
          }
        }
      }
    },
    "/portfolio/{accountId}/allocation": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Account Allocation",
        "description": "Information about the account's portfolio allocation by Asset Class, Industry and Category.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an object of three different allocations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/allocation"
                }
              }
            }
          }
        }
      }
    },
    "/portfolio/allocation": {
      "post": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Account Alloction (All Accounts)",
        "description": "Similar to /portfolio/{accountId}/allocation but returns a consolidated view of of all the accounts returned by /portfolio/accounts. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.",
        "requestBody": {
          "description": "accounts info",
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "acctIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "account id"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "returns an object of three different allocations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/allocation"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/portfolio/{accountId}/positions/{pageId}": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Portfolio Positions",
        "description": "Returns a list of positions for the given account. The endpoint supports paging, page's default size is 30 positions. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageId",
            "in": "path",
            "description": "page id",
            "required": true,
            "schema": {
              "type": "string",
              "default": "0"
            }
          },
          {
            "name": "model",
            "in": "query",
            "description": "optional",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "declare the table to be sorted by which column",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "direction",
            "in": "query",
            "description": "in which order, a means ascending - d means descending",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "period for pnl column, can be 1D, 7D, 1M...",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of positions in the portfolio",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/position"
                }
              }
            }
          }
        }
      }
    },
    "/portfolio/{accountId}/position/{conid}": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Position by Conid",
        "description": "Returns a list of all positions matching the conid. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conid",
            "in": "path",
            "description": "contract id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list containing only one position for the conid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/position"
                }
              }
            }
          }
        }
      }
    },
    "/portfolio/{accountId}/positions/invalidate": {
      "post": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Invalidates the backend cache of the Portfolio",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Means successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/portfolio/{accountId}/summary": {
      "get": {
        "tags": [
          "Account",
          "Portfolio"
        ],
        "summary": "Account Summary",
        "description": "Returns information about margin, cash balances and other information related to specified account. See also /portfolio/{accountId}/ledger. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an object containing account summary. The object contains multiple properties. A property is sufficed with -c if its provides commodity value, -s if it provides security value and -c if its UKL segment value",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accountready": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "accounttype": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "accruedcash": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "accruedcash-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "accruedcash-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "accruedcash-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "accrueddividend": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "accrueddividend-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "accrueddividend-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "accrueddividend-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "availablefunds": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "availablefunds-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "availablefunds-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "availablefunds-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "billable": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "billable-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "billable-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "billable-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "buyingpower": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "cushion": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "daytradesremaining": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "daytradesremainingt+1": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "daytradesremainingt+2": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "daytradesremainingt+3": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "daytradesremainingt+4": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "equitywithloanvalue": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "equitywithloanvalue-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "equitywithloanvalue-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "equitywithloanvalue-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "excessliquidity": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "excessliquidity-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "excessliquidity-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "excessliquidity-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "fullavailablefunds": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "fullavailablefunds-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "fullavailablefunds-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "fullavailablefunds-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "fullexcessliquidity": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "fullexcessliquidity-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "fullexcessliquidity-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "fullexcessliquidity-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "fullinitmarginreq": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "fullinitmarginreq-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "fullinitmarginreq-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "fullinitmarginreq-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "fullmaintmarginreq": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "fullmaintmarginreq-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "fullmaintmarginreq-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "fullmaintmarginreq-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "grosspositionvalue": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "grosspositionvalue-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "grosspositionvalue-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "grosspositionvalue-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "guarantee": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "guarantee-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "guarantee-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "guarantee-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "highestseverity": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "highestseverity-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "highestseverity-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "highestseverity-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "indianstockhaircut": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "indianstockhaircut-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "indianstockhaircut-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "indianstockhaircut-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "initmarginreq": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "initmarginreq-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "initmarginreq-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "initmarginreq-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "leverage": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "leverage-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "leverage-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "leverage-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadavailablefunds": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadavailablefunds-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadavailablefunds-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadavailablefunds-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadexcessliquidity": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadexcessliquidity-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadexcessliquidity-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadexcessliquidity-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadinitmarginreq": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadinitmarginreq-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadinitmarginreq-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadinitmarginreq-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadmaintmarginreq": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadmaintmarginreq-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadmaintmarginreq-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadmaintmarginreq-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "lookaheadnextchange": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "maintmarginreq": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "maintmarginreq-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "maintmarginreq-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "maintmarginreq-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "netliquidation": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "netliquidation-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "netliquidation-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "netliquidation-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "netliquidationuncertainty": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "nlvandmargininreview": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "pasharesvalue": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "pasharesvalue-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "pasharesvalue-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "pasharesvalue-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "postexpirationexcess": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "postexpirationexcess-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "postexpirationexcess-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "postexpirationexcess-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "postexpirationmargin": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "postexpirationmargin-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "postexpirationmargin-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "postexpirationmargin-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "previousdayequitywithloanvalue": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "previousdayequitywithloanvalue-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "previousdayequitywithloanvalue-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "previousdayequitywithloanvalue-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "segmenttitle-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "segmenttitle-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "segmenttitle-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "totalcashvalue": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "totalcashvalue-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "totalcashvalue-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "totalcashvalue-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "totaldebitcardpendingcharges": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "totaldebitcardpendingcharges-c": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "totaldebitcardpendingcharges-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "totaldebitcardpendingcharges-s": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "tradingtype-f": {
                      "$ref": "#/components/schemas/summary"
                    },
                    "tradingtype-s": {
                      "$ref": "#/components/schemas/summary"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/portfolio/{accountId}/ledger": {
      "get": {
        "tags": [
          "Account",
          "Portfolio"
        ],
        "summary": "Account Ledger",
        "description": "Information regarding settled cash, cash balances, etc. in the account's base currency and any other cash balances hold in other currencies.  /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint. The list of supported currencies is available at https://www.interactivebrokers.com/en/index.php?f=3185.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 means successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "BASE": {
                      "$ref": "#/components/schemas/ledger"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/portfolio/positions/{conid}": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Positions by Conid",
        "description": "Returns an object of all positions matching the conid for all the selected accounts. For portfolio models the conid could be in more than one model, returning an array with the name of the model it belongs to. /portfolio/accounts or /portfolio/subaccounts must be called prior to this endpoint.",
        "parameters": [
          {
            "name": "conid",
            "in": "path",
            "description": "contract id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an object containing account and its position information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ACCTID": {
                      "$ref": "#/components/schemas/position"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iserver/auth/status": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Authentication Status",
        "description": "Current Authentication status to the Brokerage system. Market Data and Trading is not possible if not authenticated, e.g. authenticated shows false",
        "responses": {
          "200": {
            "description": "Authentication Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authStatus"
                }
              }
            }
          }
        }
      }
    },
    "/iserver/reauthenticate": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Tries to re-authenticate to Brokerage",
        "description": "When using the CP Gateway, this endpoint provides a way to reauthenticate to the Brokerage system as long as there is a valid SSO session, see /sso/validate.\n",
        "responses": {
          "200": {
            "description": "Authentication Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authStatus"
                }
              }
            }
          }
        }
      }
    },
    "/iserver/account/trades": {
      "get": {
        "tags": [
          "Trades"
        ],
        "summary": "List of Trades for the selected account",
        "description": "Returns a list of trades for the currently selected account for current day and six previous days. It is advised to call this endpoint once per session.\n",
        "responses": {
          "200": {
            "description": "An array of trades",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/trade"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iserver/accounts": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Brokerage Accounts",
        "description": "Returns a list of accounts the user has trading access to, their respective aliases and the currently selected account. Note this endpoint must be called before modifying an order or querying open orders.",
        "responses": {
          "200": {
            "description": "An array of accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accounts": {
                      "type": "array",
                      "description": "Unique account id",
                      "items": {
                        "type": "string"
                      }
                    },
                    "aliases": {
                      "type": "object",
                      "properties": {},
                      "description": "Account Id and its alias"
                    },
                    "selectedAccount": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iserver/account": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Switch Account",
        "description": "If an user has multiple accounts, and user wants to get orders, trades, etc. of an account other than currently selected account, then user can update the currently selected account using this API and then can fetch required information for the newly updated account.",
        "requestBody": {
          "description": "account id",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/set-account"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "an object containing updated account ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "set": {
                      "type": "boolean"
                    },
                    "acctId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/iserver/account/{accountId}/alert": {
      "post": {
        "tags": [
          "Alert"
        ],
        "summary": "Create or modify alert",
        "description": "Please note here, DO NOT pass orderId when creating a new alert, toolId is only required for MTA alert\n",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "alert info",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/alert-request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "returns an object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "request_id": {
                      "type": "integer"
                    },
                    "order_id": {
                      "type": "integer"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "text": {
                      "type": "string"
                    },
                    "order_status": {
                      "type": "string"
                    },
                    "warning_message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/iserver/account/:accountId/alerts": {
      "get": {
        "tags": [
          "Alert"
        ],
        "summary": "Get a list of available alerts",
        "description": "The response will contain both active and inactive alerts, but it won't have MTA alert",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an array of objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "order_id": {
                        "type": "integer"
                      },
                      "account": {
                        "type": "string",
                        "description": "account id"
                      },
                      "alert_name": {
                        "type": "string"
                      },
                      "alert_active": {
                        "type": "integer",
                        "description": "Value can only be 0 or 1, 1 means active"
                      },
                      "order_time": {
                        "type": "string",
                        "description": "format, YYYYMMDD-HH:mm:ss, the time when you created the alert\n"
                      },
                      "alert_triggered": {
                        "type": "boolean",
                        "description": "whether the alert has been triggered or not"
                      },
                      "alert_repeatable": {
                        "type": "integer",
                        "description": "whether the alert can be repeatable or not, value can be 1 or 0. 1 means true"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iserver/account/:accountId/alert/activate": {
      "post": {
        "tags": [
          "Alert"
        ],
        "summary": "Activate or deactivate an alert",
        "description": "Please note, if alertId is 0, it will activate/deactivate all alerts",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "order request info",
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "alertId": {
                    "type": "integer",
                    "description": "alert id(order id)"
                  },
                  "alertActive": {
                    "type": "integer",
                    "description": "1 to activate, 0 to deactivate"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "returns an object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "request_id": {
                      "type": "integer"
                    },
                    "order_id": {
                      "type": "integer"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "text": {
                      "type": "string"
                    },
                    "order_status": {
                      "type": "string"
                    },
                    "failure_list": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/iserver/account/:accountId/alert/:alertId": {
      "delete": {
        "tags": [
          "Alert"
        ],
        "summary": "Delete an alert",
        "description": "Please be careful, if alertId is 0, it will delete all alerts",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "alertId",
            "in": "path",
            "description": "alert id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "request_id": {
                      "type": "integer"
                    },
                    "order_id": {
                      "type": "integer"
                    },
                    "success": {
                      "type": "boolean"
                    },
                    "text": {
                      "type": "string"
                    },
                    "order_status": {
                      "type": "string"
                    },
                    "failure_list": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iserver/account/alert/:id": {
      "get": {
        "tags": [
          "Alert"
        ],
        "summary": "Get details of an alert",
        "description": "Use the endpoint /iserver/account/:accountId/alerts to receive the alert id.\nThe order_id in the response is the alert id.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "alert id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/alert-response"
                }
              }
            }
          }
        }
      }
    },
    "/iserver/account/mta": {
      "get": {
        "tags": [
          "Alert"
        ],
        "summary": "Get MTA alert",
        "description": "Each login user only has one mobile trading assistant (MTA) alert with it's own unique tool id.\nThe tool id cannot be changed. When modified a new order Id is generated. MTA alerts can not\nbe created or deleted. If you call delete /iserver/account/:accountId/alert/:alertId,\nit will reset MTA to default. See [here](https://www.interactivebrokers.com/en/software/mobileiphonemobile/mobileiphone.htm#monitor/trading-assistant.htm) for more information on MTA alerts.\n",
        "responses": {
          "200": {
            "description": "returns an object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/alert-response"
                }
              }
            }
          }
        }
      }
    },
    "/iserver/account/orders": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Live Orders",
        "description": "The endpoint is meant to be used in polling mode, e.g. requesting every x seconds.\nThe response will contain two objects, one is notification, the other is orders.\nOrders is the list of live orders (cancelled, filled, submitted).\nNotifications contains information about execute orders as they happen, see status field.\nTo receive streaming live orders the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.\n",
        "parameters": [
          {
            "name": "Filters",
            "in": "query",
            "description": "list of filters separated by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An object contains two arrays",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "filters": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "description": "Only return list of orders for filter value. More than one filter can be specified comma separated.\n  * inactive: Order was received by the system but is no longer active because it was rejected or cancelled.\n  * pending_submit: Order has been transmitted but have not received confirmation yet that order accepted by destination exchange or venue.\n  * pre_submitted: Simulated order transmitted but the order has yet to be elected. Order is held by IB system until election criteria are met.\n  * submitted: Order has been accepted by the system.\n  * filled: Order has been completely filled.\n  * pending_cancel: Sent an order cancellation request but have not yet received confirmation order cancelled by destination exchange or venue.\n  * cancelled: The balance of your order has been confirmed canceled by the system.\n  * warn_state: Order has a specific warning message such as for basket orders.\n  * sort_by_time: There is an initial sort by order state performed so active orders are always above inactive and filled then orders are sorted chronologically.\n",
                        "enum": [
                          "inactive",
                          "pending_submit",
                          "pre_submitted",
                          "submitted",
                          "filled",
                          "pending_cancel",
                          "cancelled",
                          "warn_state",
                          "sort_by_time"
                        ]
                      }
                    },
                    "orders": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "acct": {
                            "type": "string",
                            "description": "Account number"
                          },
                          "conidex": {
                            "type": "string",
                            "description": "conid and exchange. Format supports conid or conid@exchange"
                          },
                          "conid": {
                            "type": "number",
                            "description": "Contract identifier"
                          },
                          "orderId": {
                            "type": "string",
                            "description": "Order identifier"
                          },
                          "cashCcy": {
                            "type": "string",
                            "description": "Cash currency"
                          },
                          "sizeAndFills": {
                            "type": "string",
                            "description": "Quantity outstanding and total quantity concatenated with forward slash separator"
                          },
                          "orderDesc": {
                            "type": "string",
                            "description": "Order description"
                          },
                          "description1": {
                            "type": "string",
                            "description": "Formatted ticker description"
                          },
                          "ticker": {
                            "type": "string",
                            "description": "Underlying symbol"
                          },
                          "secType": {
                            "type": "string",
                            "description": "Asset class"
                          },
                          "listingExchange": {
                            "type": "string",
                            "description": "Listing Exchange"
                          },
                          "remainingQuantity": {
                            "type": "number",
                            "description": "Quantity remaining"
                          },
                          "filledQuantity": {
                            "type": "number",
                            "description": "Quantity filled"
                          },
                          "companyName": {
                            "type": "string",
                            "description": "Company Name"
                          },
                          "status": {
                            "type": "string",
                            "description": "Status of the order"
                          },
                          "origOrderType": {
                            "type": "string",
                            "description": "Original order type"
                          },
                          "supportsTaxOpt": {
                            "type": "number",
                            "description": "Supports Tax Optimization with 0 for no and 1 for yes"
                          },
                          "lastExecutionTime": {
                            "type": "number",
                            "description": "Last status update in format YYMMDDhhmms based in GMT"
                          },
                          "lastExecutionTime_r": {
                            "type": "number",
                            "description": "Last status update unix time in ms"
                          },
                          "orderType": {
                            "type": "string",
                            "description": "Order type"
                          },
                          "order_ref": {
                            "type": "string",
                            "description": "Order reference"
                          },
                          "side": {
                            "type": "string",
                            "description": "The side of the market of the order.\n * BUY: Buy contract near posted ask price\n * SELL: Sell contract near posted bid price\n * ASSN: Option Assignment, if BUYSELL=BUY and OptionType=PUT or BUYSELL=SELL and OptionType=CALL\n * EXER: Option Exercise, if BUYSELL=SELL and OptionType=PUT or BUYSELL=BUY and OptionType=CALL\n",
                            "enum": [
                              "BUY",
                              "SELL",
                              "ASSN",
                              "EXER"
                            ]
                          },
                          "timeInForce": {
                            "type": "string",
                            "description": "Time in force"
                          },
                          "price": {
                            "type": "number",
                            "description": "Price of order"
                          },
                          "bgColor": {
                            "type": "string",
                            "description": "Background color in hex format"
                          },
                          "fgColor": {
                            "type": "string",
                            "description": "Foreground color in hex format"
                          }
                        }
                      }
                    },
                    "snapshot": {
                      "type": "boolean",
                      "description": "If live order update is a snapshot"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iserver/account/{accountId}/order": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Place Order (Deprecated)",
        "description": "This endpoint is going to be deprecated, you can use /iserver/account/{accountId}/orders, just pass one order\nin the array, the order structure will be same.\nPlease note here, sometimes this endpoint alone can't make sure you submit the order successfully,\nyou could receive some questions in the response, you have to to answer them in order to submit the order\nsuccessfully. You can use \"/iserver/reply/{replyid}\" endpoint to answer questions\n",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "order request info",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/order-request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "returns an array",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "message": {
                        "type": "array",
                        "description": "Please note here, if the message is a question, you have to reply to question in order to submit\nthe order successfully. See more in the \"/iserver/reply/{replyid}\" endpoint.\n",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-codegen-request-body-name": "body"
      }
    },
    "/iserver/account/{accountId}/orders": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Place Orders",
        "description": "When connected to an IServer Brokerage Session, this endpoint will allow you to submit orders. \nCP WEB API supports various advanced orderTypes, for additional details and examples refer to [IBKR Quant Blog](https://www.tradersinsight.news/category/ibkr-quant-news/programming_languages/rest-development/).\n  * Bracket - Attach additional opposite-side order(s) by using a single **cOID** sent with the parent and set the same value for **parentId** in each child order(s).\n  * Cash Quantity -  Send orders using monetary value by specifying **cashQty** instead of quantity, e.g. cashQty: 200. The endpoint /iserver/contract/rules returns list of valid orderTypes in cqtTypes.\n  * Currency Conversion - Convert cash from one currency to another by including **isCcyConv** = **true**. To specify the cash quantity use **fxQTY** instead of quantity, e.g. fxQTY: 100.\n  * Fractional - Contracts that support fractional shares can be traded by specifying **quantity** as a float, e.g. quantity: 0.001. The endpoint /iserver/contract/rules returns a list of valid orderTypes in fraqTypes.\n  * IB Algos - Attached user-defined settings to your trades by using any of IBKR's Algo Orders. Use the endpoint /iserver/contract/{conid}/algos to identify the available strategies for a contract.\n  * One-Cancels-All (OCA) - Group multiple unrelated orders by passing order request info in an array and including **isSingleGroup = true** for each order. All orders will be assigned the same oca_group_id.\n",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "order request info",
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "orders": {
                    "type": "array",
                    "description": "Notes for bracket orders: 1. Children orders will not have its own \"cOID\", so please donot pass \"cOID\"\nparameter in child order.Instead, they will have a \"parentId\" which must be equal to \"cOID\" of parent.\n2. When you cancel a parent order, it will cancel all bracket orders, when you cancel one child order,\nit will also cancel its sibling order.\n",
                    "items": {
                      "$ref": "#/components/schemas/order-request"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "returns an array",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "message": {
                        "type": "array",
                        "description": "Please note here, if the message is a question, you have to reply to question in order to submit\nthe order successfully. See more in the \"/iserver/reply/{replyid}\" endpoint.\n",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/iserver/account/orders/{faGroup}": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Place Orders for FA",
        "description": "Financial Advisors can use this endpoint to place an order for a specified group. To place an order for a specified account use the endpoint /iserver/account/{accountId}/order.\nMore information about groups can be found in the [TWS Users' Guide:](https://guides.interactivebrokers.com/twsguide/twsguide.htm#usersguidebook/financialadvisors/create_an_account_group_for_share_allocation.htm).\n",
        "parameters": [
          {
            "name": "faGroup",
            "in": "path",
            "description": "financial advisor group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "order request info",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/order-request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "returns an array",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "message": {
                        "type": "array",
                        "description": "Please note here, if the message is a question, you have to reply to question in order to submit\nthe order successfully. See more in the \"/iserver/reply/{replyid}\" endpoint.\n",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/iserver/reply/{replyid}": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Place Order Reply",
        "description": "Reply to questions when placing orders and submit orders",
        "parameters": [
          {
            "name": "replyid",
            "in": "path",
            "description": "Please use the \"id\" from the response of \"Place Order\" endpoint",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Answer to question",
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "confirmed": {
                    "type": "boolean",
                    "description": "answer to question, true means yes, false means no"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Order is submitted successfully, returns an array contains one object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "order_id": {
                        "type": "string"
                      },
                      "order_status": {
                        "type": "string"
                      },
                      "local_order_id": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "When you send \"confirmed-false\" in the request, you will receive this",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "for example-order not confirmed"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/iserver/account/{accountId}/order/whatif": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Preview Order (Deprecated)",
        "description": "This end-point is going to be deprecated, you can use /iserver/account/{accountId}/orders/whatif,\njust pass one order in the array, the order structure will be same.\nThis endpoint allows you to preview order without actually submitting the order and you can get\ncommission information in the response.\n",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "order info",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/order-request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "returns an object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "string",
                          "description": "for example 23,000 USD"
                        },
                        "commission": {
                          "type": "string",
                          "description": "for example 1.1 ... 1.2 USD"
                        },
                        "total": {
                          "type": "string"
                        }
                      }
                    },
                    "equity": {
                      "type": "object",
                      "properties": {
                        "current": {
                          "type": "string"
                        },
                        "change": {
                          "type": "string"
                        },
                        "after": {
                          "type": "string"
                        }
                      }
                    },
                    "initial": {
                      "type": "object",
                      "properties": {
                        "current": {
                          "type": "string"
                        },
                        "change": {
                          "type": "string"
                        },
                        "after": {
                          "type": "string"
                        }
                      }
                    },
                    "maintenance": {
                      "type": "object",
                      "properties": {
                        "current": {
                          "type": "string"
                        },
                        "change": {
                          "type": "string"
                        },
                        "after": {
                          "type": "string"
                        }
                      }
                    },
                    "warn": {
                      "type": "string"
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-codegen-request-body-name": "body"
      }
    },
    "/iserver/account/{accountId}/orders/whatif": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Preview Orders",
        "description": "This endpoint allows you to preview order without actually submitting the order and you can get\ncommission information in the response. Also supports bracket orders.\n",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "order info",
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "orders": {
                    "type": "array",
                    "description": "Notes for bracket orders: 1. Children orders will not have its own \"cOID\", so please donot pass \"cOID\"\nparameter in child order.Instead, they will have a \"parentId\" which must be equal to \"cOID\" of parent.\n2. When you cancel a parent order, it will cancel all bracket orders, when you cancel one child order,\nit will also cancel its sibling order.\n",
                    "items": {
                      "$ref": "#/components/schemas/order-request"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "returns an object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "amount": {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "string",
                          "description": "for example 23,000 USD"
                        },
                        "commission": {
                          "type": "string",
                          "description": "for example 1.1 ... 1.2 USD"
                        },
                        "total": {
                          "type": "string"
                        }
                      }
                    },
                    "equity": {
                      "type": "object",
                      "properties": {
                        "current": {
                          "type": "string"
                        },
                        "change": {
                          "type": "string"
                        },
                        "after": {
                          "type": "string"
                        }
                      }
                    },
                    "initial": {
                      "type": "object",
                      "properties": {
                        "current": {
                          "type": "string"
                        },
                        "change": {
                          "type": "string"
                        },
                        "after": {
                          "type": "string"
                        }
                      }
                    },
                    "maintenance": {
                      "type": "object",
                      "properties": {
                        "current": {
                          "type": "string"
                        },
                        "change": {
                          "type": "string"
                        },
                        "after": {
                          "type": "string"
                        }
                      }
                    },
                    "warn": {
                      "type": "string"
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/iserver/account/order/status/{orderId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Order Status",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Customer order id, use /iservers/account/orders endpoint to query orderId.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order-status"
                }
              }
            }
          }
        }
      }
    },
    "/iserver/account/{accountId}/order/{orderId}": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Modify Order",
        "description": "Modifies an open order. Must call /iserver/accounts endpoint prior to modifying an order. Use /iservers/account/orders endpoint to review open-order(s).",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id, or fa group if modifying a group order",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "Customer order id, use /iservers/account/orders endpoint to query orderId.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "modify-order request",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/modify-order"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "returns an array",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "order_id": {
                        "type": "string"
                      },
                      "local_order_id": {
                        "type": "string"
                      },
                      "order_status": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Cancel Order",
        "description": "Cancels an open order. Must call /iserver/accounts endpoint prior to cancelling an order. Use /iservers/account/orders endpoint to review open-order(s) and get latest order status.",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account id, or fa group if deleting a group order",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "Customer order id, use /iservers/account/orders endpoint to query orderId.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an object with order id, message, conid and account id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "order_id": {
                      "type": "string"
                    },
                    "msg": {
                      "type": "string"
                    },
                    "conid": {
                      "type": "integer"
                    },
                    "account": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iserver/marketdata/snapshot": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Market Data",
        "description": "Get Market Data for the given conid(s). The endpoint will return by default bid, ask, last, change, change pct, close, listing exchange.\nSee response fields for a list of available fields that can be request via fields argument.\nThe endpoint /iserver/accounts must be called prior to /iserver/marketdata/snapshot.\nFor derivative contracts the endpoint /iserver/secdef/search must be called first.\nFirst /snapshot endpoint call for given conid will initiate the market data request. \nTo receive all available fields the /snapshot endpoint will need to be called several times.\nTo receive streaming market data the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.\n",
        "parameters": [
          {
            "name": "conids",
            "in": "query",
            "description": "list of conids separated by comma",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "time period since which updates are required. uses epoch time with milliseconds.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "list of fields separated by comma",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "server_id": {
                        "type": "string"
                      },
                      "conid": {
                        "type": "integer"
                      },
                      "_updated": {
                        "type": "integer"
                      },
                      "31": {
                        "type": "string",
                        "description": "Last Price - The last price at which the contract traded. May contain one of the following prefixes:\n  * C - Previous day's closing price.\n  * H - Trading has halted.\n"
                      },
                      "55": {
                        "type": "string",
                        "description": "Symbol"
                      },
                      "58": {
                        "type": "string",
                        "description": "Text"
                      },
                      "70": {
                        "type": "string",
                        "description": "High - Current day high price"
                      },
                      "71": {
                        "type": "string",
                        "description": "Low - Current day low price"
                      },
                      "73": {
                        "type": "string",
                        "description": "Market Value - The current market value of  your position in the security. Market Value is calculated with real time market data (even when not subscribed to market data)."
                      },
                      "74": {
                        "type": "string",
                        "description": "Avg Price - The average price of the position."
                      },
                      "75": {
                        "type": "string",
                        "description": "Unrealized PnL - Unrealized profit or loss. Unrealized PnL is calculated with real time market data (even when not subscribed to market data)."
                      },
                      "76": {
                        "type": "string",
                        "description": "Formatted position"
                      },
                      "77": {
                        "type": "string",
                        "description": "Formatted Unrealized PnL"
                      },
                      "78": {
                        "type": "string",
                        "description": "Daily PnL - Your profit or loss of the day since prior close. Daily PnL is calculated with real time market data (even when not subscribed to market data)."
                      },
                      "79": {
                        "type": "string",
                        "description": "Realized PnL - Realized profit or loss. Realized PnL is calculated with real time market data (even when not subscribed to market data)."
                      },
                      "80": {
                        "type": "string",
                        "description": "Unrealized PnL % - Unrealized profit or loss expressed in percentage."
                      },
                      "82": {
                        "type": "string",
                        "description": "Change - The difference between the last price and the close on the previous trading day"
                      },
                      "83": {
                        "type": "string",
                        "description": "Change % - The difference between the last price and the close on the previous trading day in percentage."
                      },
                      "84": {
                        "type": "string",
                        "description": "Bid Price - The highest-priced bid on the contract."
                      },
                      "85": {
                        "type": "string",
                        "description": "Ask Size - The number of contracts or shares offered at the ask price. For US stocks, the number displayed is divided by 100."
                      },
                      "86": {
                        "type": "string",
                        "description": "Ask Price - The lowest-priced offer on the contract."
                      },
                      "87": {
                        "type": "string",
                        "description": "Volume - Volume for the day, formatted with 'K' for thousands or 'M' for millions. For higher precision volume refer to field 7762."
                      },
                      "87_raw (deprecated)": {
                        "type": "string",
                        "description": "Raw Volume - Volume for the day, provided in long form without formatted with K/M. This field value is deprecated, for high precision volume refer to field 7762."
                      },
                      "88": {
                        "type": "string",
                        "description": "Bid Size - The number of contracts or shares bid for at the bid price. For US stocks, the number displayed is divided by 100."
                      },
                      "6004": {
                        "type": "string",
                        "description": "Exchange"
                      },
                      "6008": {
                        "type": "integer",
                        "description": "Conid - Contract identifier from IBKR's database."
                      },
                      "6070": {
                        "type": "string",
                        "description": "SecType - The asset class of the instrument."
                      },
                      "6072": {
                        "type": "string",
                        "description": "Months"
                      },
                      "6073": {
                        "type": "string",
                        "description": "Regular Expiry"
                      },
                      "6119": {
                        "type": "string",
                        "description": "Marker for market data delivery method (similar to request id)"
                      },
                      "6457": {
                        "type": "integer",
                        "description": "Underlying Conid. Use /trsrv/secdef to get more information about the security"
                      },
                      "6508": {
                        "type": "string",
                        "description": "Service Params."
                      },
                      "6509": {
                        "type": "string",
                        "description": "Market Data Availability. The field may contain three chars. First char defines: R = RealTime, D = Delayed,\nZ = Frozen, Y = Frozen Delayed, N = Not Subscribed. Second char defines: P = Snapshot, p = Consolidated.\nThird char defines: B = Book\n  * RealTime - Data is relayed back in real time without delay, market data subscription(s) are required.\n  * Delayed - Data is relayed back 15-20 min delayed. \n  * Frozen - Last recorded data at market close, relayed back in real time.\n  * Frozen Delayed - Last recorded data at market close, relayed back delayed.\n  * Not Subscribed - User does not have the required market data subscription(s) to relay back either real time or delayed data.\n  * Snapshot - Snapshot request is available for contract.\n  * Consolidated - Market data is aggregated across multiple exchanges or venues.\n  * Book - Top of the book data is available for contract.\n"
                      },
                      "7051": {
                        "type": "string",
                        "description": "Company name"
                      },
                      "7057": {
                        "type": "string",
                        "description": "Ask Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY\n"
                      },
                      "7058": {
                        "type": "string",
                        "description": "Last Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY\n"
                      },
                      "7059": {
                        "type": "string",
                        "description": "Last Size - The number of unites traded at the last price"
                      },
                      "7068": {
                        "type": "string",
                        "description": "Bid Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY\n"
                      },
                      "7084": {
                        "type": "string",
                        "description": "Implied Vol./Hist. Vol % - The ratio of the implied volatility over the historical volatility, expressed as a percentage."
                      },
                      "7085": {
                        "type": "string",
                        "description": "Put/Call Interest - Put option open interest/call option open interest for the trading day."
                      },
                      "7086": {
                        "type": "string",
                        "description": "Put/Call Volume - Put option volume/call option volume for the trading day."
                      },
                      "7087": {
                        "type": "string",
                        "description": "Hist. Vol. % - 30-day real-time historical volatility."
                      },
                      "7088": {
                        "type": "string",
                        "description": "Hist. Vol. Close % - Shows the historical volatility based on previous close price."
                      },
                      "7089": {
                        "type": "string",
                        "description": "Opt. Volume - Option Volume"
                      },
                      "7094": {
                        "type": "string",
                        "description": "Conid + Exchange"
                      },
                      "7184": {
                        "type": "string",
                        "description": "canBeTraded - If contract is a trade-able instrument. Returns 1(true) or 0(false)."
                      },
                      "7219": {
                        "type": "string",
                        "description": "Contract Description"
                      },
                      "7220": {
                        "type": "string",
                        "description": "Contract Description"
                      },
                      "7221": {
                        "type": "string",
                        "description": "Listing Exchange"
                      },
                      "7280": {
                        "type": "string",
                        "description": "Industry - Displays the type of industry under which the underlying company can be categorized."
                      },
                      "7281": {
                        "type": "string",
                        "description": "Category - Displays a more detailed level of description within the industry under which the underlying company can be categorized."
                      },
                      "7282": {
                        "type": "string",
                        "description": "Average Volume - The average daily trading volume over 90 days."
                      },
                      "7283": {
                        "type": "string",
                        "description": "Option Implied Vol. % - A prediction of how volatile an underlying will be in the future.\nAt the market volatility estimated for a maturity thirty calendar days forward of the current trading day, and based on option prices from two consecutive expiration months.\nTo query the Implied Vol. % of a specific strike refer to field 7633.\n"
                      },
                      "7284": {
                        "type": "string",
                        "description": "Historic Volume (30d)"
                      },
                      "7285": {
                        "type": "string",
                        "description": "Put/Call Ratio"
                      },
                      "7286": {
                        "type": "string",
                        "description": "Dividend Amount - Displays the amount of the next dividend."
                      },
                      "7287": {
                        "type": "string",
                        "description": "Dividend Yield % - This value is the toal of the expected dividend payments over the next twelve months per share divided by the Current Price and is expressed as a percentage.\nFor derivatives, this displays the total of the expected dividend payments over the expiry date.\n"
                      },
                      "7288": {
                        "type": "string",
                        "description": "Ex-date of the dividend"
                      },
                      "7289": {
                        "type": "string",
                        "description": "Market Cap"
                      },
                      "7290": {
                        "type": "string",
                        "description": "P/E"
                      },
                      "7291": {
                        "type": "string",
                        "description": "EPS"
                      },
                      "7292": {
                        "type": "string",
                        "description": "Cost Basis - Your current position in this security multiplied by the average price and multiplier."
                      },
                      "7293": {
                        "type": "string",
                        "description": "52 Week High - The highest price for the past 52 weeks."
                      },
                      "7294": {
                        "type": "string",
                        "description": "52 Week Low - The lowest price for the past 52 weeks."
                      },
                      "7295": {
                        "type": "string",
                        "description": "Open - Today's opening price."
                      },
                      "7296": {
                        "type": "string",
                        "description": "Close - Today's closing price."
                      },
                      "7308": {
                        "type": "string",
                        "description": "Delta - The ratio of the change in the price of the option to the corresponding change in the price of the underlying."
                      },
                      "7309": {
                        "type": "string",
                        "description": "Gamma - The rate of change for the delta with respect to the underlying asset's price."
                      },
                      "7310": {
                        "type": "string",
                        "description": "Theta - A measure of the rate of decline the value of an option due to the passage of time."
                      },
                      "7311": {
                        "type": "string",
                        "description": "Vega - The amount that the price of an option changes compared to a 1% change in the volatility."
                      },
                      "7607": {
                        "type": "string",
                        "description": "Opt. Volume Change % - Today's option volume as a percentage of the average option volume."
                      },
                      "7633": {
                        "type": "string",
                        "description": "Implied Vol. % - The implied volatility for the specific strike of the option in percentage. To query the Option Implied Vol. % from the underlying refer to field 7283. \n"
                      },
                      "7635": {
                        "type": "string",
                        "description": "Mark - The mark price is, the ask price if ask is less than last price, the bid price if bid is more than the last price, otherwise it's equal to last price."
                      },
                      "7636": {
                        "type": "string",
                        "description": "Shortable Shares - Number of shares available for shorting."
                      },
                      "7637": {
                        "type": "string",
                        "description": "Fee Rate - Interest rate charged on borrowed shares."
                      },
                      "7638": {
                        "type": "string",
                        "description": "Option Open Interest"
                      },
                      "7639": {
                        "type": "string",
                        "description": "% of Mark Value - Displays the market value of the contract as a percentage of the total market value of the account.\nMark Value is calculated with real time market data (even when not subscribed to market data).\n"
                      },
                      "7644": {
                        "type": "string",
                        "description": "Shortable - Describes the level of difficulty with which the security can be sold short."
                      },
                      "7655": {
                        "type": "string",
                        "description": "Morningstar Rating - Displays Morningstar Rating provided value. Requires [Morningstar](https://www.interactivebrokers.com/en/index.php?f=14262) subscription."
                      },
                      "7671": {
                        "type": "string",
                        "description": "Dividends - This value is the total of the expected dividend payments over the next twelve months per share."
                      },
                      "7672": {
                        "type": "string",
                        "description": "Dividends TTM - This value is the total of the expected dividend payments over the last twelve months per share."
                      },
                      "7674": {
                        "type": "string",
                        "description": "EMA(200) - Exponential moving average (N=200)."
                      },
                      "7675": {
                        "type": "string",
                        "description": "EMA(100) - Exponential moving average (N=100)."
                      },
                      "7676": {
                        "type": "string",
                        "description": "EMA(50) - Exponential moving average (N=50)."
                      },
                      "7677": {
                        "type": "string",
                        "description": "EMA(20) - Exponential moving average (N=20)."
                      },
                      "7678": {
                        "type": "string",
                        "description": "Price/EMA(200) - Price to Exponential moving average (N=200) ratio -1, displayed in percents."
                      },
                      "7679": {
                        "type": "string",
                        "description": "Price/EMA(100) - Price to Exponential moving average (N=100) ratio -1, displayed in percents."
                      },
                      "7680": {
                        "type": "string",
                        "description": "Price/EMA(50) - Price to Exponential moving average (N=50) ratio -1, displayed in percents."
                      },
                      "7681": {
                        "type": "string",
                        "description": "Price/EMA(20) - Price to Exponential moving average (N=20) ratio -1, displayed in percents."
                      },
                      "7682": {
                        "type": "string",
                        "description": "Change Since Open - The difference between the last price and the open price."
                      },
                      "7683": {
                        "type": "string",
                        "description": "Upcoming Event - Shows the next major company event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription."
                      },
                      "7684": {
                        "type": "string",
                        "description": "Upcoming Event Date - The date of the next major company event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription."
                      },
                      "7685": {
                        "type": "string",
                        "description": "Upcoming Analyst Meeting - The date and time of the next scheduled analyst meeting. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription."
                      },
                      "7686": {
                        "type": "string",
                        "description": "Upcoming Earnings - The date and time of the next scheduled earnings/earnings call event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription."
                      },
                      "7687": {
                        "type": "string",
                        "description": "Upcoming Misc Event - The date and time of the next shareholder meeting, presentation or other event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription."
                      },
                      "7688": {
                        "type": "string",
                        "description": "Recent Analyst Meeting - The date and time of the most recent analyst meeting. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription."
                      },
                      "7689": {
                        "type": "string",
                        "description": "Recent Earnings - The date and time of the most recent earnings/earning call event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription."
                      },
                      "7690": {
                        "type": "string",
                        "description": "Recent Misc Event - The date and time of the most recent shareholder meeting, presentation or other event. Requires [Wall Street Horizon](https://www.interactivebrokers.com/en/index.php?f=24674) subscription."
                      },
                      "7694": {
                        "type": "string",
                        "description": "Probability of Max Return - Customer implied probability of maximum potential gain."
                      },
                      "7695": {
                        "type": "string",
                        "description": "Break Even - Break even points"
                      },
                      "7696": {
                        "type": "string",
                        "description": "SPX Delta - Beta Weighted Delta is calculated using the formula; Delta x dollar adjusted beta, where adjusted beta is adjusted by the ratio of the close price."
                      },
                      "7697": {
                        "type": "string",
                        "description": "Futures Open Interest - Total number of outstanding futures contracts"
                      },
                      "7698": {
                        "type": "string",
                        "description": "Last Yield - Implied yield of the bond if it is purchased at the current last price. Last yield is calculated using the Last price on all possible call dates.\nIt is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates.\nThe yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.\n"
                      },
                      "7699": {
                        "type": "string",
                        "description": "Bid Yield - Implied yield of the bond if it is purchased at the current bid price. Bid yield is calculated using the Ask on all possible call dates.\nIt is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates.\nThe yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.\n"
                      },
                      "7700": {
                        "type": "string",
                        "description": "Probability of Max Return - Customer implied probability of maximum potential gain."
                      },
                      "7702": {
                        "type": "string",
                        "description": "Probability of Max Loss - Customer implied probability of maximum potential loss."
                      },
                      "7703": {
                        "type": "string",
                        "description": "Profit Probability - Customer implied probability of any gain."
                      },
                      "7704": {
                        "type": "string",
                        "description": "Organization Type"
                      },
                      "7705": {
                        "type": "string",
                        "description": "Debt Class"
                      },
                      "7706": {
                        "type": "string",
                        "description": "Ratings - Ratings issued for bond contract."
                      },
                      "7707": {
                        "type": "string",
                        "description": "Bond State Code"
                      },
                      "7708": {
                        "type": "string",
                        "description": "Bond Type"
                      },
                      "7714": {
                        "type": "string",
                        "description": "Last Trading Date"
                      },
                      "7715": {
                        "type": "string",
                        "description": "Issue Date"
                      },
                      "7718": {
                        "type": "string",
                        "description": "Beta - Beta is against standard index."
                      },
                      "7720": {
                        "type": "string",
                        "description": "Ask Yield - Implied yield of the bond if it is purchased at the current offer. Ask yield is calculated using the Bid on all possible call dates.\nIt is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates.\nThe yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.\n"
                      },
                      "7741": {
                        "type": "string",
                        "description": "Prior Close - Yesterday's closing price"
                      },
                      "7762": {
                        "type": "string",
                        "description": "Volume Long - High precision volume for the day. For formatted volume refer to field 87."
                      },
                      "7768": {
                        "type": "string",
                        "description": "hasTradingPermissions - if user has trading permissions for specified contract. Returns 1(true) or 0(false)."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "sent when accounts are not queried before sending this request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iserver/marketdata/{conid}/unsubscribe": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Market Data Cancel (Single)",
        "description": "Cancel market data for given conid. To cancel all market data request(s), see /iserver/marketdata/unsubscribeall.\n",
        "parameters": [
          {
            "name": "conid",
            "in": "path",
            "description": "contract id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "cancel failed",
            "content": {}
          },
          "200": {
            "description": "confirms market data for conid is cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "confirmed": {
                      "type": "string",
                      "description": "success means market data was cancelled."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iserver/marketdata/unsubscribeall": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Market Data Cancel (All)",
        "description": "Cancel all market data request(s). To cancel market data for given conid, see /iserver/marketdata/{conid}/unsubscribe.\n",
        "responses": {
          "200": {
            "description": "confirms market data is cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "confirmed": {
                      "type": "boolean",
                      "description": "true means market data is cancelled, false means it is not."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iserver/marketdata/history": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Market Data History",
        "description": "Get historical market Data for given conid, length of data is controlled by 'period' and 'bar'.\nFormatted as: min=minute, h=hour, d=day, w=week, m=month, y=year\ne.g. period =1y with bar =1w returns 52 data points (Max of 1000 data points supported).\n**Note**: There's a limit of 5 concurrent requests. Excessive requests will return a 'Too many requests' status 429 response.\n",
        "parameters": [
          {
            "name": "conid",
            "in": "query",
            "description": "contract id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "description": "Exchange of the conid (e.g. ISLAND, NYSE, etc.). Default value is empty which corresponds to primary exchange of the conid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "available time period-- {1-30}min, {1-8}h, {1-1000}d, {1-792}w, {1-182}m, {1-15}y",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bar",
            "in": "query",
            "description": "possible value-- 1min, 2min, 3min, 5min, 10min, 15min, 30min, 1h, 2h, 3h, 4h, 8h, 1d, 1w, 1m",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outsideRth",
            "in": "query",
            "description": "For contracts that support it, will determine if historical data includes outside of regular trading hours.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/history-data"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "System Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/system-error"
                }
              }
            }
          }
        }
      }
    },
    "/iserver/contract/{conid}/info": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Contract Details",
        "description": "Using the Contract Identifier get contract info. You can use this to prefill your order before you submit an order",
        "parameters": [
          {
            "name": "conid",
            "in": "path",
            "description": "contract id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contract"
                }
              }
            }
          }
        }
      }
    },
    "/iserver/secdef/search": {
      "post": {
        "tags": [
          "Contract"
        ],
        "summary": "Search by Symbol or Name",
        "description": "Search by underlying symbol or company name. Relays back what derivative contract(s) it has. This endpoint must be called before using /secdef/info.\nIf company name is specified will only receive limited response: conid, companyName, companyHeader and symbol.\n",
        "requestBody": {
          "description": "Symbol or Company Name to be searched",
          "content": {
            "*/*": {
              "schema": {
                "required": [
                  "symbol"
                ],
                "type": "object",
                "properties": {
                  "symbol": {
                    "type": "string",
                    "description": "symbol or name to be searched"
                  },
                  "name": {
                    "type": "boolean",
                    "description": "should be true if the search is to be performed by name. false by default."
                  },
                  "secType": {
                    "type": "string",
                    "description": "If search is done by name, only the assets provided in this field will be returned. Currently, only STK is supported."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "returns an array of results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "conid": {
                        "type": "integer",
                        "description": "Contract Identifier"
                      },
                      "companyHeader": {
                        "type": "string",
                        "description": "Company Name - Exchange"
                      },
                      "companyName": {
                        "type": "string"
                      },
                      "symbol": {
                        "type": "string",
                        "description": "Underlying symbol"
                      },
                      "description": {
                        "type": "string",
                        "description": "Exchange"
                      },
                      "restricted": {
                        "type": "string"
                      },
                      "fop": {
                        "type": "string",
                        "description": "List of Future Option expirations in YYYMMDD format separated by semicolon"
                      },
                      "opt": {
                        "type": "string",
                        "description": "List of Option expirations in YYYYMMDD format separated by semicolon"
                      },
                      "war": {
                        "type": "string",
                        "description": "List of Warrant expirations in YYYYMMDD format separated by semicolon"
                      },
                      "sections": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "secType": {
                              "type": "string",
                              "description": "Asset Class"
                            },
                            "months": {
                              "type": "string",
                              "description": "List of expiration month(s) and year(s) in MMMYY format separated by semicolon"
                            },
                            "symbol": {
                              "type": "string",
                              "description": "Underlying symbol"
                            },
                            "exchange": {
                              "type": "string",
                              "description": "Listing Exchange"
                            },
                            "legSecType": {
                              "type": "string",
                              "description": "For combo's defines the asset class for each leg"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "symbol"
      }
    },
    "/iserver/secdef/strikes": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Search Strikes",
        "description": "Query strikes for Options/Warrants. For the conid of the underlying contract, available contract months and exchanges use \"/iserver/secdef/search\"",
        "parameters": [
          {
            "name": "conid",
            "in": "query",
            "description": "contract id of the underlying contract",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sectype",
            "in": "query",
            "description": "OPT/WAR",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "contract month",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "description": "optional, default is SMART",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an object contains call/put strike prices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "call": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": ""
                      }
                    },
                    "put": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": ""
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iserver/secdef/info": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Secdef Info",
        "description": "Provides Contract Details of Futures, Options, Warrants, Cash and CFDs based on conid. To get the strike price for Options/Warrants use \"/iserver/secdef/strikes\" endpoint. Must call /secdef/search for the underlying contract first.",
        "parameters": [
          {
            "name": "conid",
            "in": "query",
            "description": "underlying contract id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sectype",
            "in": "query",
            "description": "FUT/OPT/WAR/CASH/CFD",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "contract month, only required for FUT/OPT/WAR in the format MMMYY, example JAN00",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "description": "optional, default is SMART",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "strike",
            "in": "query",
            "description": "optional, only required for OPT/WAR",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "right",
            "in": "query",
            "description": "C for call, P for put",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an array of objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/secdef-info"
                  }
                }
              }
            }
          },
          "500": {
            "description": "error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iserver/contract/{conid}/algos": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "IB Algo Params",
        "description": "Returns supported IB Algos for contract. Must be called a second time to query the list of available parameters.",
        "parameters": [
          {
            "name": "conid",
            "in": "path",
            "description": "IBKR contract identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "algos",
            "in": "query",
            "description": "List of algo ids delimited by \";\" to filter by. Max of 8 algos ids can be specified.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addDescription",
            "in": "query",
            "description": "Whether or not to add algo descriptions to response. Set to 1 for yes, 0 for no.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addParams",
            "in": "query",
            "description": "Whether or not to show algo parameters.  Set to 1 for yes, 0 for no.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an array of algos",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "id": {
                        "type": "string"
                      },
                      "parameters": {
                        "type": "array",
                        "items": {
                          "required": [
                            "id",
                            "valueClassName"
                          ],
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The algo parameter"
                            },
                            "required": {
                              "type": "boolean",
                              "description": "If true a value must be entered."
                            },
                            "name": {
                              "type": "string",
                              "description": "Descriptive name of the parameter."
                            },
                            "valueClassName": {
                              "type": "string",
                              "description": "Format of the parameter.",
                              "enum": [
                                "double",
                                "string",
                                "time",
                                "boolean"
                              ]
                            },
                            "minValue": {
                              "type": "number",
                              "description": "Smallest value, only applies to parameters with valueClassName=Double."
                            },
                            "maxValue": {
                              "type": "number",
                              "description": "Largest value, only applies to parameters with valueClassName=Double."
                            },
                            "defaultValue": {
                              "type": "boolean",
                              "description": "User configured preset for this parameter."
                            },
                            "legalStrings": {
                              "type": "string",
                              "description": "The list of choices",
                              "example": ""
                            },
                            "description": {
                              "type": "string",
                              "description": "Detailed description of the parameter."
                            },
                            "guiRank": {
                              "type": "number",
                              "description": "The order in UI, used when building dynamic UI so that more important parameters are presented first."
                            },
                            "priceMarketRule": {
                              "type": "boolean",
                              "description": "If true, must specify parameter using market rule format. Only applies to parameters with valueClassName=Double."
                            },
                            "enabledConditions": {
                              "type": "string",
                              "description": "The rules that UI should apply to algo parameters depending on chosen order type:\n * MKT:speedUp:=:no - hide SpeedUp param when MKT is chosen for order type.\n * LMT:strategyType:<>:empty - strategyType param cannot be empty when LMT is chosen for order type.\n * MKT:strategyType:=:Marketable - set strategyType param to Marketable and disable (no other choice) when MKT is chosen for order type.\n",
                              "enum": [
                                "MKT:speedUp:=:no",
                                "LMT:strategyType:<>:empty",
                                "MKT:strategyType:=:Marketable"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iserver/contract/rules": {
      "post": {
        "tags": [
          "Contract"
        ],
        "summary": "Contract Rules",
        "description": "Returns trading related rules for a specific contract and side. For both contract info and rules use the endpoint /iserver/contract/{conid}/info-and-rules.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "required": [
                  "conid",
                  "isBuy"
                ],
                "type": "object",
                "properties": {
                  "conid": {
                    "type": "string",
                    "description": "IBKR contract identifier"
                  },
                  "isBuy": {
                    "type": "boolean",
                    "description": "Side of the market rules apply too. Set to **true** for Buy Orders, set to **false** for Sell Orders"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "returns an array",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rules": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "algoEligible": {
                            "type": "boolean"
                          },
                          "canTradeAcctIds": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "0": {
                                  "type": "string",
                                  "description": "List of Accounts that can be traded"
                                }
                              }
                            }
                          },
                          "error": {
                            "type": "string",
                            "description": "Returns a description on any errors with order presets"
                          },
                          "orderTypes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "0": {
                                  "type": "string",
                                  "description": "list of available order types"
                                }
                              }
                            }
                          },
                          "ibalgoTypes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "0": {
                                  "type": "string",
                                  "description": "order types that support IB Algos"
                                }
                              }
                            }
                          },
                          "fraqTypes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "0": {
                                  "type": "string",
                                  "description": "order types that support fractional trades"
                                }
                              }
                            }
                          },
                          "cqtTypes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "0": {
                                  "type": "string",
                                  "description": "order types that support cash quantity trades"
                                }
                              }
                            }
                          },
                          "orderDefaults": {
                            "type": "array",
                            "description": "If object returned will provide the defaults based on user settings",
                            "items": {
                              "type": "object",
                              "properties": {
                                "string": {
                                  "type": "array",
                                  "description": "orderType",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "ORTH": {
                                        "type": "boolean",
                                        "description": "Outside of Regular Trading Hours"
                                      },
                                      "SP": {
                                        "type": "string",
                                        "description": "Stop Price value"
                                      },
                                      "LP": {
                                        "type": "string",
                                        "description": "Limit Price value"
                                      },
                                      "PC": {
                                        "type": "string",
                                        "description": "Price Cap value"
                                      },
                                      "TA": {
                                        "type": "string",
                                        "description": "Trailing amount value"
                                      },
                                      "TU": {
                                        "type": "string",
                                        "description": "Trailing unit"
                                      },
                                      "ROA": {
                                        "type": "string",
                                        "description": "Releative offset amount"
                                      },
                                      "ROP": {
                                        "type": "string",
                                        "description": "Relative offset percent"
                                      },
                                      "TT": {
                                        "type": "string",
                                        "description": "Touch trigger price"
                                      },
                                      "UNP": {
                                        "type": "boolean",
                                        "description": "Use Net Price for Bonds"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "orderTypesOutside": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "0": {
                                  "type": "string",
                                  "description": "order types that support outside of regular trading hours"
                                }
                              }
                            }
                          },
                          "defaultSize": {
                            "type": "integer",
                            "description": "Default quantity"
                          },
                          "cashSize": {
                            "type": "integer",
                            "description": "cash value"
                          },
                          "sizeIncrement": {
                            "type": "integer",
                            "description": "increment quantity value"
                          },
                          "tifTypes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "0": {
                                  "type": "string",
                                  "description": "Time in Force values, formatted with o for supporting Outside regular trading hours and a for Algo trading"
                                }
                              }
                            }
                          },
                          "defaultTIF": {
                            "type": "string",
                            "description": "Default time in force value"
                          },
                          "limitPrice": {
                            "type": "number",
                            "description": "Limit price"
                          },
                          "stopprice": {
                            "type": "number",
                            "description": "Stop price"
                          },
                          "orderOrigination": {
                            "type": "number",
                            "description": "Order origin designation for US securities options and Options Clearing Corporation"
                          },
                          "preview": {
                            "type": "boolean",
                            "description": "order preview required"
                          },
                          "displaySize": {
                            "type": "number"
                          },
                          "fraqInt": {
                            "type": "number",
                            "description": "decimal places for fractional order size"
                          },
                          "cashCcy": {
                            "type": "string",
                            "description": "Cash currency for the contract"
                          },
                          "cashQtyIncr": {
                            "type": "number",
                            "description": "Increment value for cash quantity"
                          },
                          "priceMagnifier": {
                            "type": "number",
                            "description": "Price Magnifier"
                          },
                          "negativeCapable": {
                            "type": "boolean",
                            "description": "trading negative price support"
                          },
                          "increment": {
                            "type": "number",
                            "description": "Price increment value"
                          },
                          "incrementDigits": {
                            "type": "integer",
                            "description": "Number of digits for price increment"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "conid"
      }
    },
    "/iserver/contract/{conid}/info-and-rules": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Info and Rules",
        "description": "Returns both contract info and rules from a single endpoint.\nFor only contract rules, use the endpoint /iserver/contract/rules.\nFor only contract info, use the endpoint /iserver/contract/{conid}/info. \n",
        "parameters": [
          {
            "name": "conid",
            "in": "path",
            "description": "IBKR contract identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isBuy",
            "in": "query",
            "description": "Side of the market rules apply too. Set to **true** for Buy Orders, set to **false** for Sell Orders",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "returns an array",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cfi_code": {
                      "type": "string",
                      "description": "Classification of Financial Instrument codes"
                    },
                    "symbol": {
                      "type": "string",
                      "description": "Underlying symbol"
                    },
                    "cusip": {
                      "type": "string"
                    },
                    "expiry_full": {
                      "type": "number",
                      "description": "Expiration Date in the format YYYYMMDD"
                    },
                    "con_id": {
                      "type": "number",
                      "description": "IBKRs contract identifier"
                    },
                    "maturity_date": {
                      "type": "number",
                      "description": "Date on which the underlying transaction settles if the option is exercised"
                    },
                    "industry": {
                      "type": "string",
                      "description": "Specific group of companies or businesses."
                    },
                    "instrument_type": {
                      "type": "string",
                      "description": "Asset Class of the contract"
                    },
                    "trading_class": {
                      "type": "string",
                      "description": "Designation of the contract"
                    },
                    "valid_exchanges": {
                      "type": "string",
                      "description": "Comma separated list of exchanges or trading venues"
                    },
                    "allow_sell_long": {
                      "type": "boolean",
                      "description": "Allowed to sell shares that you own"
                    },
                    "is_zero_commission_security": {
                      "type": "boolean",
                      "description": "Supports zero commission trades"
                    },
                    "local_symbol": {
                      "type": "string",
                      "description": "Contracts symbol from primary exchange. For options it is the OCC symbol."
                    },
                    "classifier": {
                      "type": "string"
                    },
                    "currency": {
                      "type": "string",
                      "description": "Currency contract trades in"
                    },
                    "text": {
                      "type": "string",
                      "description": "Formatted contract parameters"
                    },
                    "underlying_con_id": {
                      "type": "number",
                      "description": "IBKRs contract identifier for the underlying instrument"
                    },
                    "r_t_h": {
                      "type": "boolean",
                      "description": "Provides trading outside of Regular Trading Hours"
                    },
                    "multiplier": {
                      "type": "string",
                      "description": "numerical value of each point of price movement"
                    },
                    "strike": {
                      "type": "string",
                      "description": "fixed price at which the owner of the option buys or sells the underlying"
                    },
                    "right": {
                      "type": "string",
                      "description": "Put or Call of the option"
                    },
                    "underlying_issuer": {
                      "type": "string",
                      "description": "Legal entity for underlying contract"
                    },
                    "contract_month": {
                      "type": "string",
                      "description": "Month the contract must be satisfied by making or accepting delivery"
                    },
                    "company_name": {
                      "type": "string",
                      "description": "Contracts company name"
                    },
                    "smart_available": {
                      "type": "boolean",
                      "description": "Support IBKRs SMART routing"
                    },
                    "exchange": {
                      "type": "string",
                      "description": "Primary Exchange, Routing or Trading Venue"
                    },
                    "rules": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "algoEligible": {
                            "type": "boolean",
                            "description": "Contract supports algo orders"
                          },
                          "canTradeAcctIds": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "0": {
                                  "type": "string",
                                  "description": "List of Accounts that can be traded"
                                }
                              }
                            }
                          },
                          "error": {
                            "type": "string",
                            "description": "Returns a description on any errors with order presets"
                          },
                          "orderTypes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "0": {
                                  "type": "string",
                                  "description": "list of available order types"
                                }
                              }
                            }
                          },
                          "ibalgoTypes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "0": {
                                  "type": "string",
                                  "description": "order types that support IB Algos"
                                }
                              }
                            }
                          },
                          "fraqTypes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "0": {
                                  "type": "string",
                                  "description": "order types that support fractional trades"
                                }
                              }
                            }
                          },
                          "cqtTypes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "0": {
                                  "type": "string",
                                  "description": "order types that support cash quantity trades"
                                }
                              }
                            }
                          },
                          "orderDefaults": {
                            "type": "array",
                            "description": "If object returned will provide the defaults based on user settings",
                            "items": {
                              "type": "object",
                              "properties": {
                                "string": {
                                  "type": "array",
                                  "description": "orderType",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "ORTH": {
                                        "type": "boolean",
                                        "description": "Outside of Regular Trading Hours"
                                      },
                                      "SP": {
                                        "type": "string",
                                        "description": "Stop Price value"
                                      },
                                      "LP": {
                                        "type": "string",
                                        "description": "Limit Price value"
                                      },
                                      "PC": {
                                        "type": "string",
                                        "description": "Price Cap value"
                                      },
                                      "TA": {
                                        "type": "string",
                                        "description": "Trailing amount value"
                                      },
                                      "TU": {
                                        "type": "string",
                                        "description": "Trailing unit"
                                      },
                                      "ROA": {
                                        "type": "string",
                                        "description": "Releative offset amount"
                                      },
                                      "ROP": {
                                        "type": "string",
                                        "description": "Relative offset percent"
                                      },
                                      "TT": {
                                        "type": "string",
                                        "description": "Touch trigger price"
                                      },
                                      "UNP": {
                                        "type": "boolean",
                                        "description": "Use Net Price for Bonds"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "orderTypesOutside": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "0": {
                                  "type": "string",
                                  "description": "order types that support outside of regular trading hours"
                                }
                              }
                            }
                          },
                          "defaultSize": {
                            "type": "integer",
                            "description": "Default quantity"
                          },
                          "cashSize": {
                            "type": "integer",
                            "description": "cash value"
                          },
                          "sizeIncrement": {
                            "type": "integer",
                            "description": "increment quantity value"
                          },
                          "tifTypes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "0": {
                                  "type": "string",
                                  "description": "Time in Force values, formatted with o for supporting Outside regular trading hours and a for Algo trading"
                                }
                              }
                            }
                          },
                          "defaultTIF": {
                            "type": "string",
                            "description": "Default time in force value"
                          },
                          "limitPrice": {
                            "type": "number",
                            "description": "Limit price"
                          },
                          "stopprice": {
                            "type": "number",
                            "description": "Stop price"
                          },
                          "orderOrigination": {
                            "type": "number",
                            "description": "Order origin designation for US securities options and Options Clearing Corporation"
                          },
                          "preview": {
                            "type": "boolean",
                            "description": "order preview required"
                          },
                          "displaySize": {
                            "type": "number"
                          },
                          "fraqInt": {
                            "type": "number",
                            "description": "decimal places for fractional order size"
                          },
                          "cashCcy": {
                            "type": "string",
                            "description": "Cash currency for the contract"
                          },
                          "cashQtyIncr": {
                            "type": "number",
                            "description": "Increment value for cash quantity"
                          },
                          "priceMagnifier": {
                            "type": "number",
                            "description": "Price Magnifier"
                          },
                          "negativeCapable": {
                            "type": "boolean",
                            "description": "trading negative price support"
                          },
                          "increment": {
                            "type": "number",
                            "description": "Price increment value"
                          },
                          "incrementDigits": {
                            "type": "integer",
                            "description": "Number of digits for price increment"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iserver/scanner/params": {
      "get": {
        "tags": [
          "Scanner"
        ],
        "summary": "Scanner Parameters",
        "description": "Returns an object contains four lists contain all parameters for scanners",
        "responses": {
          "200": {
            "description": "An object contains lists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scan_type_list": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "display_name": {
                            "type": "string"
                          },
                          "code": {
                            "type": "string"
                          },
                          "instruments": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "type of instrument"
                            }
                          }
                        }
                      }
                    },
                    "instrument_list": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "display_name": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "filters": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "code of filter"
                            }
                          }
                        }
                      }
                    },
                    "filter_list": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "group": {
                            "type": "string"
                          },
                          "display_name": {
                            "type": "string"
                          },
                          "code": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "location_tree": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "display_name": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "locations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "display_name": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iserver/scanner/run": {
      "post": {
        "tags": [
          "Scanner"
        ],
        "summary": "Scanner Run",
        "description": "Searches for contracts according to the filters specified in scanner/params endpoint",
        "requestBody": {
          "description": "scanner-params request",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/scanner-params"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "returns an array",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "server_id": {
                        "type": "string"
                      },
                      "column_name": {
                        "type": "string"
                      },
                      "symbol": {
                        "type": "string",
                        "description": "Underlying symbol"
                      },
                      "conidex": {
                        "type": "string",
                        "description": "conid and exchange. Format supports conid or conid@exchange"
                      },
                      "con_id": {
                        "type": "number"
                      },
                      "available_chart_periods": {
                        "type": "string",
                        "description": "List of available chart periods"
                      },
                      "company_name": {
                        "type": "string",
                        "description": "Contracts company name"
                      },
                      "contract_description_1": {
                        "type": "string",
                        "description": "Format contract name",
                        "example": "FB Stock (NASDAQ.NMS)"
                      },
                      "listing_exchange": {
                        "type": "string"
                      },
                      "sec_type": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/iserver/account/pnl/partitioned": {
      "get": {
        "tags": [
          "PnL",
          "Account"
        ],
        "summary": "PnL for the selected account",
        "description": "Returns an object containing PnL for the selected account and its models (if any).\nTo receive streaming PnL the endpoint /ws can be used. Refer to [Streaming WebSocket Data](https://interactivebrokers.github.io/cpwebapi/RealtimeSubscription.html) for details.\n",
        "responses": {
          "200": {
            "description": "An object containing account and model(s) pnl",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "acctId": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "notifications": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "D": {
              "type": "string",
              "description": "notification date"
            },
            "ID": {
              "type": "string",
              "description": "unique way to reference this notification"
            },
            "FC": {
              "type": "string",
              "description": "FYI code, we can use it to find whether the disclaimer is accepted or not in settings"
            },
            "MD": {
              "type": "string",
              "description": "content of notification"
            },
            "MS": {
              "type": "string",
              "description": "title of notification"
            },
            "R": {
              "type": "string",
              "description": "0-unread, 1-read"
            }
          },
          "description": "notification"
        }
      },
      "calendar_request": {
        "type": "object",
        "properties": {
          "date": {
            "type": "object",
            "properties": {
              "start": {
                "type": "string",
                "description": "start date of a period. for example 20180808-0400"
              },
              "end": {
                "type": "string",
                "description": "end date of a period. for example 20180808-0400"
              }
            }
          },
          "filters": {
            "type": "object",
            "properties": {
              "recently_held": {
                "type": "string",
                "description": "value can be 'true' or 'false'."
              },
              "corporate_earnings": {
                "type": "string",
                "description": "value can be 'true' or 'false'."
              },
              "DivExDates": {
                "type": "string",
                "description": "value can be 'true' or 'false'."
              },
              "ipo": {
                "type": "string",
                "description": "value can be 'true' or 'false'."
              },
              "splits": {
                "type": "string",
                "description": "value can be 'true' or 'false'."
              },
              "corporate_events": {
                "type": "string",
                "description": "value can be 'true' or 'false'."
              },
              "economic_events": {
                "type": "string",
                "description": "value can be 'true' or 'false'."
              },
              "option_show_monthly": {
                "type": "string",
                "description": "value can be 'true' or 'false'."
              },
              "option_show_weekly": {
                "type": "string",
                "description": "value can be 'true' or 'false'."
              },
              "country": {
                "type": "string",
                "description": "default is 'All'."
              },
              "limit": {
                "type": "string",
                "description": "default is '250'."
              },
              "limit_region": {
                "type": "string",
                "description": "default is '50'."
              }
            }
          }
        }
      },
      "events": {
        "type": "array",
        "description": "events",
        "items": {
          "type": "object",
          "properties": {
            "index_date_type": {
              "type": "string"
            },
            "event_type": {
              "type": "string"
            },
            "data": {
              "type": "object",
              "properties": {},
              "description": "will be different for different event types"
            },
            "conids": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "conid in string"
              }
            },
            "index_date": {
              "type": "string",
              "description": "for exmple 20180817T040000+0000"
            },
            "source": {
              "type": "string",
              "description": "for example RSE"
            },
            "event_key": {
              "type": "string",
              "description": "for example 11662135"
            },
            "tooltips": {
              "type": "object",
              "properties": {}
            },
            "status": {
              "type": "string"
            }
          }
        }
      },
      "wagers": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "conid": {
              "type": "number"
            },
            "curr": {
              "type": "string"
            },
            "desc": {
              "type": "string"
            },
            "part": {
              "type": "string"
            }
          },
          "description": "List of wagers"
        }
      },
      "inds": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "conid": {
              "type": "number"
            }
          }
        }
      },
      "secdef": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "conid": {
              "type": "integer",
              "description": "IBKR contract identifier."
            },
            "currency": {
              "type": "string",
              "description": "Currency contract trades in."
            },
            "crossCurrency": {
              "type": "boolean",
              "description": "Defines if a derivative contract has a different currency."
            },
            "time": {
              "type": "integer"
            },
            "chineseName": {
              "type": "string",
              "description": "HTML encoded company description in Chinese."
            },
            "allExchanges": {
              "type": "string",
              "description": "List of exchanges and venues contract trades."
            },
            "listingExchange": {
              "type": "string",
              "description": "Main trading venue."
            },
            "name": {
              "type": "string",
              "description": "Company Name."
            },
            "assetClass": {
              "type": "string",
              "description": "Group of financial instruments which have similar financial characteristics and behave similar in the marketplace."
            },
            "expiry": {
              "type": "string",
              "description": "Specific data contract expires."
            },
            "lastTradingDay": {
              "type": "string",
              "description": "Final day derivative contract can be traded before delivery of the underlying asset or cash settlement."
            },
            "group": {
              "type": "string",
              "description": "Potential characteristic of each product."
            },
            "putOrCall": {
              "type": "string",
              "description": "Defines the right to buy or sell of the underlying security."
            },
            "sector": {
              "type": "string",
              "description": "The category of the economy."
            },
            "sectorGroup": {
              "type": "string",
              "description": "Stock Group contract belongs too."
            },
            "strike": {
              "type": "number",
              "description": "Set price at which a derivative contract can be bought or sold."
            },
            "ticker": {
              "type": "string",
              "description": "Contract symbol."
            },
            "undConid": {
              "type": "integer",
              "description": "Underlying contract identifier."
            },
            "multiplier": {
              "type": "integer",
              "description": "Multiplier for total premium paid or received for derivative contract."
            },
            "type": {
              "type": "string",
              "description": "Stock type."
            },
            "undComp": {
              "type": "string",
              "description": "Company name for underlying contract."
            },
            "undSym": {
              "type": "string",
              "description": "IBKR Symbol for underlying contract."
            },
            "hasOptions": {
              "type": "boolean",
              "description": "If contract has an option."
            },
            "fullName": {
              "type": "string",
              "description": "Formatted company name with underlying symbol, expiration, strike, right."
            },
            "isUS": {
              "type": "boolean",
              "description": "If contract is a US contract. Currently supported for stocks, options and warrants."
            },
            "incrementRules": {
              "type": "object",
              "properties": {
                "lowerEdge": {
                  "type": "number",
                  "description": "The minimum contract price on the market that supports the specified increment."
                },
                "increment": {
                  "type": "number",
                  "description": "The minimum increment value for contract price."
                }
              },
              "description": "Price increment value contract trades."
            }
          },
          "description": "security definition information."
        }
      },
      "futures": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "symbol": {
              "type": "string"
            },
            "conid": {
              "type": "integer",
              "description": "conid of the future contract"
            },
            "underlyingConid": {
              "type": "integer"
            },
            "expirationDate": {
              "type": "string"
            },
            "ltd": {
              "type": "string",
              "description": "last trading day"
            }
          },
          "description": "future contract information"
        }
      },
      "stocks": {
        "type": "array",
        "description": "This is an array of object(s), there could be multiple results under same symbol\n",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "company name"
            },
            "chineseName": {
              "type": "string",
              "description": "company name in Chinese"
            },
            "assetClass": {
              "type": "string",
              "example": "STK"
            },
            "contracts": {
              "type": "array",
              "description": "array of contracts from different exchanges",
              "items": {
                "type": "object",
                "properties": {
                  "conid": {
                    "type": "integer",
                    "description": "conid of the stock contract"
                  },
                  "exchange": {
                    "type": "string",
                    "example": "NYSE"
                  }
                }
              }
            }
          },
          "description": "future contract information"
        }
      },
      "history-result": {
        "type": "object",
        "properties": {
          "bars": {
            "type": "object",
            "properties": {
              "open": {
                "type": "number",
                "description": "First price returned for bar value."
              },
              "startTime": {
                "type": "string",
                "description": "Start Time in the format YYYYMMDD."
              },
              "startTimeVal": {
                "type": "integer",
                "description": "Start Time Value - Formatted in unix time in ms."
              },
              "endTime": {
                "type": "string",
                "description": "End Time in the format YYYYMMDD."
              },
              "endTimeVal": {
                "type": "integer",
                "description": "End Time Value - Formatted in unix time in ms."
              },
              "points": {
                "type": "integer",
                "description": "total number of data points."
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "t": {
                      "type": "number",
                      "description": "Time - Formatted in unix time in ms."
                    },
                    "o": {
                      "type": "number",
                      "description": "Open - First price returned for bar value."
                    },
                    "c": {
                      "type": "number",
                      "description": "Close - Last price returned for bar value."
                    },
                    "h": {
                      "type": "number",
                      "description": "High - High price returned for bar value."
                    },
                    "l": {
                      "type": "number",
                      "description": "Low - Last price returned for bar value."
                    },
                    "v": {
                      "type": "number",
                      "description": "Volume - Traded volume for bar value."
                    }
                  }
                }
              },
              "mktDataDelay": {
                "type": "integer",
                "description": "If 0 then data is returned in real time. Otherwise will return the number of seconds history data is delayed."
              }
            }
          }
        }
      },
      "position-data": {
        "type": "object",
        "properties": {
          "conid": {
            "type": "number",
            "description": "Contract identifier from IBKR's database."
          },
          "position": {
            "type": "number",
            "description": "Number of shares or quantity of the position."
          },
          "avgCost": {
            "type": "number",
            "description": "Average cost of the position."
          }
        }
      },
      "order-data": {
        "type": "object",
        "properties": {
          "clientOrderId": {
            "type": "string"
          },
          "execId": {
            "type": "string"
          },
          "execType": {
            "type": "string",
            "enum": [
              "-1 \"Invalid\"",
              "0 \"New\"",
              "1 \"Partially Filled\"",
              "2 \"Filled\"",
              "3 \"Done for the Day\"",
              "4 \"Canceled\"",
              "5 \"Replaced\"",
              "6 \"Pending Cancel\"",
              "7 \"Stopped\"",
              "8 \"Rejected\"",
              "9 \"Suspended\"",
              "A \"Pending New\"",
              "B \"Calculated\"",
              "C \"Expired\"",
              "D \"Restated\"",
              "E \"Pending Replace\"",
              "F \"Trade\"",
              "G \"Trade Correct\"",
              "H \"Trade Cancel\"",
              "I \"Order Status\""
            ]
          },
          "orderType": {
            "type": "string",
            "enum": [
              "1 \"Market\"",
              "2 \"Limit\"",
              "3 \"Stop\"",
              "4 \"Stop Limit\"",
              "5 \"Market on Close\"",
              "6 \"With or Without\"",
              "7 \"Limit or Better\"",
              "8 \"Limit With or Without\"",
              "9 \"On Basis\"",
              "A \"On Close\"",
              "B \"Limit On Close\"",
              "C \"Forex Market\"",
              "D \"Previously Quoted\"",
              "E \"Previously Indicated\"",
              "F \"Forex Limit\"",
              "G \"Forex Swap\"",
              "H \"Forex Previously Quoted\"",
              "I \"Funari\"",
              "K \"Market To Limit\"",
              "P \"Pegged\""
            ]
          },
          "orderStatus": {
            "type": "string",
            "enum": [
              "-1 \"Invalid Order Status\"",
              "0 \"New\"",
              "1 \"Partially Filled\"",
              "2 \"Filled\"",
              "3 \"Done for the Day\"",
              "4 \"Canceled\"",
              "5 \"Replaced\"",
              "6 \"Pending Cancel\"",
              "7 \"Stopped\"",
              "8 \"Rejected\"",
              "9 \"Suspended\"",
              "A \"Pending New\"",
              "B \"Calculated\"",
              "C \"Expired\"",
              "D \"Restated\"",
              "E \"Pending Replace\""
            ]
          },
          "symbol": {
            "type": "string",
            "description": "Underlying symbol for contract"
          },
          "orderQty": {
            "type": "string",
            "description": "Quantity of active order"
          },
          "price": {
            "type": "string",
            "description": "Price of active order"
          },
          "lastShares": {
            "type": "string",
            "description": "Quantity of the last partial fill"
          },
          "lastPrice": {
            "type": "string",
            "description": "Price of the last partial fill"
          },
          "cumQty": {
            "type": "string",
            "description": "Cumulative fill quantity"
          },
          "leavesQty": {
            "type": "string",
            "description": "Remaining quantity to be filled"
          },
          "avgPrice": {
            "type": "string",
            "description": "Average fill price"
          },
          "side": {
            "type": "string",
            "enum": [
              "1 \"Buy\"",
              "2 \"Sell\"",
              "3 \"Buy Minus\"",
              "4 \"Sell Plus\"",
              "5 \"Sell Short\"",
              "6 \"Sell Short Exempt\""
            ]
          },
          "orderId": {
            "type": "string",
            "description": "Order identifier"
          },
          "account": {
            "type": "string",
            "description": "Account number"
          },
          "secType": {
            "type": "string",
            "description": "Contracts asset class",
            "enum": [
              "CS \"Stock\"",
              "CASH \"Forex\"",
              "CFD \"Contract for Difference\"",
              "FUT \"Future\"",
              "OPT \"Option\""
            ]
          },
          "txTime": {
            "type": "string",
            "description": "Time of transaction in GMT, format YYYYMMDD-hh:m:ss"
          },
          "rcptTime": {
            "type": "string",
            "description": "Time of receipt in GMT, format YYYYMMDD-hh:mm:ss"
          },
          "tif": {
            "type": "string",
            "description": "Time in Force",
            "enum": [
              "0 \"Day\"",
              "1 \"GTC\"",
              "2 \"At the Opening\""
            ]
          },
          "conid": {
            "type": "string",
            "description": "Contract identifier from IBKR's database."
          },
          "currency": {
            "type": "string",
            "description": "Trading currency"
          },
          "exchange": {
            "type": "string",
            "description": "Exchange or venue"
          },
          "listingExchange": {
            "type": "string",
            "description": "Listing Exchange"
          },
          "text": {
            "type": "number",
            "description": "error message"
          },
          "warnings": {
            "type": "object",
            "properties": {
              "PRICECAP": {
                "type": "string"
              },
              "TIME": {
                "type": "string"
              }
            }
          },
          "commCurr": {
            "type": "string",
            "description": "Commission currency"
          },
          "comms": {
            "type": "string",
            "description": "Commissions"
          },
          "realizedPnl": {
            "type": "string",
            "description": "Realized PnL"
          }
        }
      },
      "stats-data": {
        "type": "object",
        "properties": {
          "Conid": {
            "type": "number"
          },
          "Exchange": {
            "type": "string"
          },
          "V": {
            "type": "number"
          },
          "T": {
            "type": "number"
          },
          "TT": {
            "type": "number"
          },
          "P": {
            "type": "string",
            "description": "Object, payload depends on event type. See confluence page for IGEvntUpd."
          }
        }
      },
      "market-data": {
        "type": "object",
        "properties": {
          "31": {
            "type": "string",
            "description": "Last Price - The last price at which the contract traded. May contain one of the following prefixes:\n  * C - Previous day's closing price.\n  * H - Trading has halted.\n"
          },
          "70": {
            "type": "number",
            "description": "High - Current day high price"
          },
          "71": {
            "type": "number",
            "description": "Low - Current day low price"
          },
          "82": {
            "type": "string",
            "description": "Change - The difference between the last price and the close on the previous trading day"
          },
          "83": {
            "type": "number",
            "description": "Change % - The difference between the last price and the close on the previous trading day in percentage."
          },
          "84": {
            "type": "string",
            "description": "Bid Price - The highest-priced bid on the contract."
          },
          "85": {
            "type": "string",
            "description": "Ask Size - The number of contracts or shares offered at the ask price. For US stocks, the number displayed is divided by 100."
          },
          "86": {
            "type": "string",
            "description": "Ask Price - The lowest-priced offer on the contract."
          },
          "87": {
            "type": "string",
            "description": "Volume - Volume for the day, formatted with 'K' for thousands or 'M' for millions. For higher precision volume refer to field 7762."
          },
          "88": {
            "type": "string",
            "description": "Bid Size - The number of contracts or shares bid for at the bid price. For US stocks, the number displayed is divided by 100."
          },
          "6509": {
            "type": "string",
            "description": "Market Data Availability. The field may contain three chars. First char defines: R = RealTime, D = Delayed,\nZ = Frozen, Y = Frozen Delayed, N = Not Subscribed. Second char defines: P = Snapshot, p = Consolidated.\nThird char defines: B = Book\n  * RealTime - Data is relayed back in real time without delay, market data subscription(s) are required.\n  * Delayed - Data is relayed back 15-20 min delayed.\n  * Frozen - Last recorded data at market close, relayed back in real time.\n  * Frozen Delayed - Last recorded data at market close, relayed back delayed.\n  * Not Subscribed - User does not have the required market data subscription(s) to relay back either real time or delayed data.\n  * Snapshot - Snapshot request is available for contract.\n  * Consolidated - Market data is aggregated across multiple exchanges or venues.\n  * Book - Top of the book data is available for contract.\n"
          },
          "7057": {
            "type": "string",
            "description": "Ask Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY"
          },
          "7058": {
            "type": "string",
            "description": "Last Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY"
          },
          "7059": {
            "type": "number",
            "description": "Last Size - The number of unites traded at the last price"
          },
          "7068": {
            "type": "string",
            "description": "Bid Exch - Displays the exchange(s) offering the SMART price. A=AMEX, C=CBOE, I=ISE, X=PHLX, N=PSE, B=BOX, Q=NASDAQOM, Z=BATS, W=CBOE2, T=NASDAQBX, M=MIAX, H=GEMINI, E=EDGX, J=MERCURY"
          },
          "7195": {
            "type": "string",
            "description": "IV Rank"
          },
          "7196": {
            "type": "string",
            "description": "IV Rank"
          },
          "7197": {
            "type": "string",
            "description": "IV Rank"
          },
          "7198": {
            "type": "string",
            "description": "IV Percentile"
          },
          "7199": {
            "type": "string",
            "description": "IV Percentile"
          },
          "7200": {
            "type": "string",
            "description": "IV Percentile"
          },
          "7201": {
            "type": "string",
            "description": "IV High Low"
          },
          "7202": {
            "type": "string",
            "description": "IV High Low"
          },
          "7203": {
            "type": "string",
            "description": "IV High Low"
          },
          "7204": {
            "type": "string",
            "description": "IV High Low"
          },
          "7205": {
            "type": "string",
            "description": "IV High Low"
          },
          "7206": {
            "type": "string",
            "description": "IV High Low"
          },
          "7207": {
            "type": "string",
            "description": "HV Rank"
          },
          "7208": {
            "type": "string",
            "description": "HV Rank"
          },
          "7209": {
            "type": "string",
            "description": "HV Rank"
          },
          "7210": {
            "type": "string",
            "description": "HV Percentile"
          },
          "7211": {
            "type": "string",
            "description": "HV Percentile"
          },
          "7212": {
            "type": "string",
            "description": "HV Percentile"
          },
          "7245": {
            "type": "string",
            "description": "HV High Low"
          },
          "7246": {
            "type": "string",
            "description": "HV High Low"
          },
          "7247": {
            "type": "string",
            "description": "HV High Low"
          },
          "7248": {
            "type": "string",
            "description": "HV High Low"
          },
          "7249": {
            "type": "string",
            "description": "HV High Low"
          },
          "7263": {
            "type": "string",
            "description": "HV High Low"
          },
          "7264": {
            "type": "string",
            "description": "ESG"
          },
          "7265": {
            "type": "string",
            "description": "ESG"
          },
          "7266": {
            "type": "string",
            "description": "ESG"
          },
          "7267": {
            "type": "string",
            "description": "ESG"
          },
          "7268": {
            "type": "string",
            "description": "ESG"
          },
          "7269": {
            "type": "string",
            "description": "ESG"
          },
          "7271": {
            "type": "string",
            "description": "ESG"
          },
          "7272": {
            "type": "string",
            "description": "ESG"
          },
          "7273": {
            "type": "string",
            "description": "ESG"
          },
          "7274": {
            "type": "string",
            "description": "ESG"
          },
          "7275": {
            "type": "string",
            "description": "ESG"
          },
          "7276": {
            "type": "string",
            "description": "ESG"
          },
          "7277": {
            "type": "string",
            "description": "ESG"
          },
          "7282": {
            "type": "string",
            "description": "Average Volume - The average daily trading volume over 90 days."
          },
          "7283": {
            "type": "string",
            "description": "Option Implied Vol. % - A prediction of how volatile an underlying will be in the future.\nAt the market volatility estimated for a maturity thirty calendar days forward of the current trading day, and based on option prices from two consecutive expiration months.     \n"
          },
          "7284": {
            "type": "string",
            "description": "Historic Volume (30d)"
          },
          "7286": {
            "type": "number",
            "description": "Dividend Amount - Displays the amount of the next dividend."
          },
          "7287": {
            "type": "string",
            "description": "Dividend Yield % - This value is the toal of the expected dividend payments over the next twelve months per share divided by the Current Price and is expressed as a percentage.\nFor derivatives, this displays the total of the expected dividend payments over the expiry date.\n"
          },
          "7288": {
            "type": "string",
            "description": "Ex-date of the dividend"
          },
          "7289": {
            "type": "string",
            "description": "Market Cap"
          },
          "7290": {
            "type": "string",
            "description": "P/E"
          },
          "7293": {
            "type": "string",
            "description": "52 Week High - The highest price for the past 52 weeks."
          },
          "7294": {
            "type": "string",
            "description": "52 Week Low - The lowest price for the past 52 weeks."
          },
          "7295": {
            "type": "number",
            "description": "Open - Today's opening price."
          },
          "7296": {
            "type": "number",
            "description": "Close - Today's closing price."
          },
          "7331": {
            "type": "string",
            "description": "Reuters Fundamentals"
          },
          "7370": {
            "type": "string",
            "description": "ESG"
          },
          "7371": {
            "type": "string",
            "description": "ESG"
          },
          "7372": {
            "type": "string",
            "description": "ESG"
          },
          "7635": {
            "type": "string",
            "description": "Mark - The mark price is, the ask price if ask is less than last price, the bid price if bid is more than the last price, otherwise it's equal to last price"
          },
          "7636": {
            "type": "number",
            "description": "shortable invetory"
          },
          "7637": {
            "type": "string",
            "description": "Fee rebate rate"
          },
          "7644": {
            "type": "string",
            "description": "Shortable - Describes the level of difficulty with which the security can be sold short."
          },
          "7674": {
            "type": "string",
            "description": "EMA(200) - Exponential moving average (N=200)."
          },
          "7675": {
            "type": "string",
            "description": "EMA(100) - Exponential moving average (N=100)."
          },
          "7676": {
            "type": "string",
            "description": "EMA(50) - Exponential moving average (N=50)."
          },
          "7677": {
            "type": "string",
            "description": "EMA(20) - Exponential moving average (N=20)."
          },
          "7681": {
            "type": "string",
            "description": "Price/EMA(20) - Price to Exponential moving average (N=20) ratio -1, displayed in percents."
          },
          "7698": {
            "type": "string",
            "description": "Last Yield - Implied yield of the bond if it is purchased at the current last price. Last yield is calculated using the Last price on all possible call dates.\nIt is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates.\nThe yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.\n"
          },
          "7699": {
            "type": "string",
            "description": "Bid Yield - Implied yield of the bond if it is purchased at the current bid price. Bid yield is calculated using the Ask on all possible call dates.\nIt is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates.\nThe yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.\n"
          },
          "7718": {
            "type": "string",
            "description": "Beta - Beta is against standard index."
          },
          "7720": {
            "type": "string",
            "description": "Ask Yield - Implied yield of the bond if it is purchased at the current offer. Ask yield is calculated using the Bid on all possible call dates.\nIt is assumed that prepayment occurs if the bond has call or put provisions and the issuer can offer a lower coupon rate based on current market rates.\nThe yield to worst will be the lowest of the yield to maturity or yield to call (if the bond has prepayment provisions). Yield to worse may be the same as yield to maturity but never higher.\n"
          },
          "7743": {
            "type": "string",
            "description": "Reuters Fundamentals"
          },
          "7761": {
            "type": "string",
            "description": "ESG"
          },
          "7992": {
            "type": "string",
            "description": "26 Week High - The highest price for the past 26 weeks."
          },
          "7993": {
            "type": "string",
            "description": "26 Week Low - The lowest price for the past 26 weeks."
          },
          "7994": {
            "type": "string",
            "description": "13 Week High - The highest price for the past 13 weeks."
          },
          "7995": {
            "type": "string",
            "description": "13 Week Low - The lowest price for the past 13 weeks."
          },
          "conid": {
            "type": "integer",
            "description": "IBKR Contract identifier"
          },
          "minTick": {
            "type": "number",
            "description": "minimum price increment"
          },
          "BboExchange": {
            "type": "string",
            "description": "Color for Best Bid/Offer Exchange in hex code"
          },
          "HasDelayed": {
            "type": "boolean",
            "description": "If market data field values return delayed"
          },
          "sizeMinTick": {
            "type": "integer",
            "description": "minimum size increment"
          },
          "BestEligible": {
            "type": "integer"
          },
          "BestBidExch": {
            "type": "integer"
          },
          "BestAskExch": {
            "type": "integer"
          },
          "PreOpenBid": {
            "type": "integer"
          },
          "LastAttribs": {
            "type": "integer"
          },
          "TimestampBase": {
            "type": "integer",
            "description": "Base time stamp for last update in format YYYYMMDD"
          },
          "TimestampDelta": {
            "type": "integer"
          },
          "LastExch": {
            "type": "integer"
          },
          "CloseAttribs": {
            "type": "integer"
          }
        }
      },
      "scanner-params": {
        "type": "object",
        "properties": {
          "instrument": {
            "type": "string",
            "description": "Contains an instrument, which to scan for. For example - \"STK\""
          },
          "type": {
            "type": "string",
            "description": "Specify the scan type to use. For example - \"MOST_ACTIVE_USD\""
          },
          "location": {
            "type": "string",
            "description": "Contains location code, where to look for specified instrument. For example - \"STK.US.MAJOR\""
          },
          "filter": {
            "type": "array",
            "description": "Contains list of filters supported for the scanner",
            "items": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "value": {
                  "type": "number"
                }
              },
              "description": "Contains list of supported filters. The code of the filter along with user-specified value has to be sued to apply a filter to scanner query. For example - [{\"code\":\"usdVolume\",\"value\":500}]. You can also specify multiple filters - \"filter\":[{\"code\":\"value\"},{\"code\":\"value\"},{\"code\":\"value\"}]"
            }
          }
        }
      },
      "scanner-result": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "size": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          },
          "scanTime": {
            "type": "string"
          },
          "id": {
            "type": "number"
          },
          "position": {
            "type": "string"
          },
          "Contracts": {
            "type": "object",
            "properties": {
              "Contract": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "inScanTime": {
                      "type": "string"
                    },
                    "distance": {
                      "type": "integer"
                    },
                    "contractID": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Contains list of contracts matching the scanner query"
          }
        }
      },
      "performance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "cps": {
            "type": "object",
            "properties": {
              "dates": {
                "type": "array",
                "description": "array of dates, the length should be same as the length of returns inside data.",
                "items": {
                  "type": "string",
                  "description": "format-- yyyyMMdd"
                }
              },
              "freq": {
                "type": "string",
                "description": "D means Day"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "idType": {
                      "type": "string",
                      "description": "for example-- acctid"
                    },
                    "start": {
                      "type": "string",
                      "description": "start date-- yyyyMMdd"
                    },
                    "baseCurrency": {
                      "type": "string"
                    },
                    "returns": {
                      "type": "array",
                      "description": "each value stands for price change percent of corresponding date in dates array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "end": {
                      "type": "string",
                      "description": "end date-- yyyyMMdd"
                    }
                  }
                }
              }
            },
            "description": "Cumulative performance data"
          },
          "tpps": {
            "type": "object",
            "properties": {
              "dates": {
                "type": "array",
                "description": "array of dates, the length should be same as the length of returns inside data.",
                "items": {
                  "type": "string",
                  "description": "format-- yyyyMMdd"
                }
              },
              "freq": {
                "type": "string",
                "description": "M means Month"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "idType": {
                      "type": "string",
                      "description": "for example-- acctid"
                    },
                    "start": {
                      "type": "string",
                      "description": "start date-- yyyyMMdd"
                    },
                    "baseCurrency": {
                      "type": "string"
                    },
                    "returns": {
                      "type": "array",
                      "description": "each value stands for price change percent of corresponding date in dates array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "end": {
                      "type": "string",
                      "description": "end date-- yyyyMMdd"
                    }
                  }
                }
              }
            },
            "description": "Time period performance data"
          },
          "nav": {
            "type": "object",
            "properties": {
              "dates": {
                "type": "array",
                "description": "array of dates, the length should be same as the length of returns inside data.",
                "items": {
                  "type": "string",
                  "description": "format--yyyyMMdd"
                }
              },
              "freq": {
                "type": "string",
                "description": "D means Day"
              },
              "data": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "idType": {
                      "type": "string",
                      "description": "for example-- acctid"
                    },
                    "start": {
                      "type": "string",
                      "description": "start date-- yyyyMMdd"
                    },
                    "baseCurrency": {
                      "type": "string"
                    },
                    "returns": {
                      "type": "array",
                      "description": "each value stands for price change percent of corresponding date in dates array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "end": {
                      "type": "string",
                      "description": "end date-- yyyyMMdd"
                    }
                  }
                }
              }
            },
            "description": "Net asset value data for the account or consolidated accounts. NAV data is not applicable to benchmarks."
          },
          "pm": {
            "type": "string"
          },
          "included": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "account id"
            }
          },
          "currencyType": {
            "type": "string"
          },
          "rc": {
            "type": "integer"
          }
        }
      },
      "summary": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "isNull": {
            "type": "boolean"
          },
          "timestamp": {
            "type": "integer"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "transactions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "will always be getTransactions"
          },
          "currency": {
            "type": "string",
            "description": "same as request"
          },
          "includesRealTime": {
            "type": "boolean",
            "description": "Indicates whether current day and realtime data is included in the result"
          },
          "from": {
            "type": "number",
            "description": "Period start date. Epoch time, GMT"
          },
          "to": {
            "type": "number",
            "description": "Period end date. Epoch time, GMT"
          },
          "transactions": {
            "type": "array",
            "description": "Sorted by date descending",
            "items": {
              "type": "object",
              "properties": {
                "acctid": {
                  "type": "string"
                },
                "conid": {
                  "type": "number"
                },
                "cur": {
                  "type": "string",
                  "description": "currency code"
                },
                "fxRate": {
                  "type": "number",
                  "description": "Conversion rate from asset currency to response currency"
                },
                "desc": {
                  "type": "string",
                  "description": "Transaction description"
                },
                "date": {
                  "type": "string",
                  "description": "Date of transaction.  Epoch time, GMT"
                },
                "type": {
                  "type": "string",
                  "description": "Transaction Type Name: Examples: \"Sell\", \"Buy\", \"Corporate Action\",\n\"Dividend Payment\", \"Transfer\", \"Payment in Lieu\"\nDividends and Transfers do not have price and quantity in response\n"
                },
                "qty": {
                  "type": "number",
                  "description": "Not applicable for all transaction types"
                },
                "pr": {
                  "type": "number",
                  "description": "In asset currency. Not be applicable for all transaction types."
                },
                "amt": {
                  "type": "number",
                  "description": "Raw value, no formatting. Net transaction amount (may include commission, tax).\nIn asset currency"
                }
              }
            }
          }
        },
        "description": "account transactions"
      },
      "position": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "acctId": {
              "type": "string"
            },
            "conid": {
              "type": "integer"
            },
            "contractDesc": {
              "type": "string"
            },
            "assetClass": {
              "type": "string"
            },
            "position": {
              "type": "number"
            },
            "mktPrice": {
              "type": "number"
            },
            "mktValue": {
              "type": "number"
            },
            "currency": {
              "type": "string"
            },
            "avgCost": {
              "type": "number"
            },
            "avgPrice": {
              "type": "number"
            },
            "realizedPnl": {
              "type": "number"
            },
            "unrealizedPnl": {
              "type": "number"
            },
            "exchs": {
              "type": "string"
            },
            "expiry": {
              "type": "string"
            },
            "putOrCall": {
              "type": "string"
            },
            "multiplier": {
              "type": "number"
            },
            "strike": {
              "type": "number"
            },
            "exerciseStyle": {
              "type": "string"
            },
            "undConid": {
              "type": "integer"
            },
            "conExchMap": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "baseMktValue": {
              "type": "number"
            },
            "baseMktPrice": {
              "type": "number"
            },
            "baseAvgCost": {
              "type": "number"
            },
            "baseAvgPrice": {
              "type": "number"
            },
            "baseRealizedPnl": {
              "type": "number"
            },
            "baseUnrealizedPnl": {
              "type": "number"
            },
            "name": {
              "type": "string"
            },
            "lastTradingDay": {
              "type": "string"
            },
            "group": {
              "type": "string"
            },
            "sector": {
              "type": "string"
            },
            "sectorGroup": {
              "type": "string"
            },
            "ticker": {
              "type": "string"
            },
            "undComp": {
              "type": "string"
            },
            "undSym": {
              "type": "string"
            },
            "fullName": {
              "type": "string"
            },
            "pageSize": {
              "type": "integer"
            },
            "model": {
              "type": "string"
            }
          },
          "description": "Account Information"
        }
      },
      "allocation": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "assetClass": {
              "type": "object",
              "properties": {
                "long": {
                  "type": "object",
                  "properties": {
                    "STK": {
                      "type": "number"
                    },
                    "OPT": {
                      "type": "number"
                    },
                    "FUT": {
                      "type": "number"
                    },
                    "WAR": {
                      "type": "number"
                    },
                    "BOND": {
                      "type": "number"
                    },
                    "CASH": {
                      "type": "number"
                    }
                  },
                  "description": "long positions allocation"
                },
                "short": {
                  "type": "object",
                  "properties": {
                    "STK": {
                      "type": "number"
                    },
                    "OPT": {
                      "type": "number"
                    },
                    "FUT": {
                      "type": "number"
                    },
                    "WAR": {
                      "type": "number"
                    },
                    "BOND": {
                      "type": "number"
                    },
                    "CASH": {
                      "type": "number"
                    }
                  },
                  "description": "short positions allocation"
                }
              },
              "description": "portfolio allocation by asset class"
            },
            "sector": {
              "type": "object",
              "properties": {
                "long": {
                  "type": "object",
                  "properties": {
                    "Others": {
                      "type": "number"
                    },
                    "Utilities": {
                      "type": "number"
                    },
                    "Energy": {
                      "type": "number"
                    },
                    "Technology": {
                      "type": "number"
                    },
                    "Financial": {
                      "type": "number"
                    },
                    "Communications": {
                      "type": "number"
                    }
                  },
                  "description": "long positions allocation"
                },
                "short": {
                  "type": "object",
                  "properties": {
                    "Industrial": {
                      "type": "number"
                    },
                    "Consumer": {
                      "type": "number"
                    },
                    "Diversified": {
                      "type": "number"
                    }
                  },
                  "description": "short positions allocation"
                }
              },
              "description": "portfolio allocation by sector"
            },
            "group": {
              "type": "object",
              "properties": {
                "long": {
                  "type": "object",
                  "properties": {
                    "Computers": {
                      "type": "number"
                    },
                    "Semiconductors": {
                      "type": "number"
                    },
                    "Others": {
                      "type": "number"
                    },
                    "Chemicals": {
                      "type": "number"
                    },
                    "Apparel": {
                      "type": "number"
                    },
                    "Communications": {
                      "type": "number"
                    }
                  },
                  "description": "long positions allocation"
                },
                "short": {
                  "type": "object",
                  "properties": {
                    "Banks": {
                      "type": "number"
                    },
                    "Airlines": {
                      "type": "number"
                    },
                    "Internet": {
                      "type": "number"
                    }
                  },
                  "description": "short positions allocation"
                }
              },
              "description": "portfolio allocation by group"
            }
          },
          "description": "allocation"
        }
      },
      "accounts": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/account"
        }
      },
      "account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The account identification value"
          },
          "accountId": {
            "type": "string",
            "description": "The account number",
            "example": "U12345678 for Individual Live Accounts, DU12345678 for Individual Paper Accounts"
          },
          "accountVan": {
            "type": "string",
            "description": "The accountAlias"
          },
          "accountTitle": {
            "type": "string",
            "description": "Title of the account"
          },
          "displayName": {
            "type": "string",
            "description": "Whichever value is not null in this priority",
            "enum": [
              "accountTitle",
              "accountVan",
              "accountId"
            ]
          },
          "accountAlias": {
            "type": "string",
            "description": "User customizable account alias. Refer to [Configure Account Alias](https://guides.interactivebrokers.com/cp/cp.htm#am/settings/accountalias.htm) for details."
          },
          "accountStatus": {
            "type": "number",
            "description": "When the account was opened in unix time."
          },
          "currency": {
            "type": "string",
            "description": "Base currency of the account.",
            "enum": [
              "AUD",
              "GBP",
              "CAD",
              "CNH",
              "CZK",
              "DKK",
              "EUR",
              "HKD",
              "HUF",
              "INR",
              "ILS",
              "JPY",
              "MXN",
              "NOK",
              "NZD",
              "PLN",
              "RUB",
              "SGD",
              "SEK",
              "CHF",
              "USD"
            ]
          },
          "type": {
            "type": "string",
            "description": "Account Type",
            "enum": [
              "INDIVIDUAL",
              "JOINT",
              "ORG",
              "TRUST",
              "DEMO"
            ]
          },
          "tradingType": {
            "type": "string",
            "description": "UNI - Deprecated property"
          },
          "faclient": {
            "type": "boolean",
            "description": "If an account is a sub-account to a Financial Advisor."
          },
          "clearingStatus": {
            "type": "string",
            "description": "Status of the Account\n  * O = Open\n  * P or N = Pending\n  * A = Abandoned\n  * R = Rejected\n  * C = Closed\n",
            "enum": [
              "O",
              "P",
              "N",
              "A",
              "R",
              "C"
            ]
          },
          "covestor": {
            "type": "boolean",
            "description": "Is a Covestor Account"
          },
          "parent": {
            "type": "object",
            "properties": {
              "mmc": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Money Manager Client (MMC) Account"
                }
              },
              "accountId": {
                "type": "string",
                "description": "Account Number for Money Manager Client"
              },
              "isMParent": {
                "type": "boolean",
                "description": "Is MM a Parent Account"
              },
              "isMChild": {
                "type": "boolean",
                "description": "Is MM a Child Account"
              },
              "isMultiplex": {
                "type": "boolean",
                "description": "Is a Multiplex Account. These are account models with individual account being parent and managed account being child."
              }
            }
          },
          "desc": {
            "type": "string",
            "description": "Formatted \"accountId - accountAlias\""
          }
        },
        "description": "account information"
      },
      "ledger": {
        "type": "object",
        "properties": {
          "commoditymarketvalue": {
            "type": "number"
          },
          "futuremarketvalue": {
            "type": "number"
          },
          "settledcash": {
            "type": "number"
          },
          "exchangerate": {
            "type": "number"
          },
          "sessionid": {
            "type": "integer"
          },
          "cashbalance": {
            "type": "number"
          },
          "corporatebondsmarketvalue": {
            "type": "number"
          },
          "warrantsmarketvalue": {
            "type": "number"
          },
          "netliquidationvalue": {
            "type": "number"
          },
          "interest": {
            "type": "number"
          },
          "unrealizedpnl": {
            "type": "number"
          },
          "stockmarketvalue": {
            "type": "number"
          },
          "moneyfunds": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "realizedpnl": {
            "type": "number"
          },
          "funds": {
            "type": "number"
          },
          "acctcode": {
            "type": "string"
          },
          "issueroptionsmarketvalue": {
            "type": "number"
          },
          "key": {
            "type": "string"
          },
          "timestamp": {
            "type": "integer"
          },
          "severity": {
            "type": "integer"
          }
        }
      },
      "alert-request": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "description": "orderId is required when modifying alert. You can get it from /iserver/account/:accountId/alerts\n"
          },
          "alertName": {
            "type": "string",
            "description": "name of alert"
          },
          "alertMessage": {
            "type": "string",
            "description": "The message you want to receive via email or text message"
          },
          "alertRepeatable": {
            "type": "integer",
            "description": "whether alert is repeatable or not, so value can only be 0 or 1, this has to be 1 for MTA alert"
          },
          "email": {
            "type": "string",
            "description": "email address to receive alert"
          },
          "sendMessage": {
            "type": "integer",
            "description": "whether allowing to send email or not, so value can only be 0 or 1,\n"
          },
          "tif": {
            "type": "string",
            "description": "time in force, can only be GTC or GTD"
          },
          "expireTime": {
            "type": "string",
            "description": "format, YYYYMMDD-HH:mm:ss, please NOTE this will only work when tif is GTD\n",
            "example": "20201105-19:51:14"
          },
          "outsideRth": {
            "type": "integer",
            "description": "value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours.\n"
          },
          "iTWSOrdersOnly": {
            "type": "integer",
            "description": "value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile\n"
          },
          "showPopup": {
            "type": "integer",
            "description": "value can only be 0 or 1, set to 1 to allow to show alert in pop-ups"
          },
          "toolId": {
            "type": "integer",
            "description": "for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert\n"
          },
          "playAudio": {
            "type": "string",
            "description": "audio message to play when alert is triggered"
          },
          "conditions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "integer",
                  "description": "Types: 1-Price, 3-Time, 4-Margin, 5-Trade, 6-Volume, 7: MTA market 8: MTA Position, 9: MTA Acc. Daily PN&\n"
                },
                "conidex": {
                  "type": "string",
                  "description": "conid and exchange. Format supports conid or conid@exchange",
                  "example": "8314@SMART"
                },
                "operator": {
                  "type": "string",
                  "description": "optional, operator for the current condition, can be >= or <=",
                  "example": ">="
                },
                "triggerMethod": {
                  "type": "string",
                  "description": "optional, only some type of conditions have triggerMethod",
                  "example": "0"
                },
                "value": {
                  "type": "string",
                  "description": "can not be empty, can pass default value \"*\"",
                  "example": "220"
                },
                "logicBind": {
                  "type": "string",
                  "description": "\"a\" means \"AND\", \"o\" means \"OR\", \"n\" means \"END\",\nthe last one condition in the condition array should \"n\"\n"
                },
                "timeZone": {
                  "type": "string",
                  "description": "only needed for some MTA alert condition"
                }
              }
            }
          }
        }
      },
      "alert-response": {
        "type": "object",
        "properties": {
          "account": {
            "type": "string",
            "description": "account id"
          },
          "order_id": {
            "type": "integer"
          },
          "alert_name": {
            "type": "string",
            "description": "name of alert"
          },
          "alert_message": {
            "type": "string",
            "description": "The message you want to receive via email or text message"
          },
          "alert_active": {
            "type": "integer",
            "description": "whether alert is active or not, so value can only be 0 or 1"
          },
          "alert_repeatable": {
            "type": "integer",
            "description": "whether alert is repeatable or not, so value can only be 0 or 1"
          },
          "alert_email": {
            "type": "string",
            "description": "email address to receive alert"
          },
          "alert_send_message": {
            "type": "integer",
            "description": "whether allowing to send email or not, so value can only be 0 or 1,\n"
          },
          "tif": {
            "type": "string",
            "description": "time in force, can only be GTC or GTD"
          },
          "expire_time": {
            "type": "string",
            "description": "format, YYYYMMDD-HH:mm:ss\n",
            "example": "20201105-19:51:14"
          },
          "order_status": {
            "type": "string",
            "description": "status of alert",
            "example": "Submitted"
          },
          "outsideRth": {
            "type": "integer",
            "description": "value can only be 0 or 1, set to 1 if the alert can be triggered outside regular trading hours.\n"
          },
          "itws_orders_only": {
            "type": "integer",
            "description": "value can only be 0 or 1, set to 1 to enable the alert only in IBKR mobile\n"
          },
          "alert_show_popup": {
            "type": "integer",
            "description": "value can only be 0 or 1, set to 1 to allow to show alert in pop-ups"
          },
          "alert_triggered": {
            "type": "boolean",
            "description": "whether the alert has been triggered"
          },
          "order_not_editable": {
            "type": "boolean",
            "description": "whether the alert can be edited"
          },
          "tool_id": {
            "type": "integer",
            "description": "for MTA alert only, each user has a unique toolId and it will stay the same, do not send for normal alert\n"
          },
          "alert_play_audio": {
            "type": "string",
            "description": "audio message to play when alert is triggered"
          },
          "alert_mta_currency": {
            "type": "string",
            "description": "MTA alert only"
          },
          "alert_mta_defaults": {
            "type": "string",
            "description": "MTA alert only"
          },
          "time_zone": {
            "type": "string",
            "description": "MTA alert only"
          },
          "alert_default_type": {
            "type": "string",
            "description": "MTA alert only"
          },
          "condition_size": {
            "type": "integer",
            "description": "size of conditions array"
          },
          "condition_outside_rth": {
            "type": "integer",
            "description": "whether allowing the condition can be triggered outside of regular trading hours, 1 means allow"
          },
          "conditions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "condition_type": {
                  "type": "integer",
                  "description": "Types: 1-Price, 3-Time, 4-Margin, 5-Trade, 6-Volume, 7: MTA market 8: MTA Position, 9: MTA Acc. Daily PN&\n"
                },
                "conidex": {
                  "type": "string",
                  "description": "conid and exchange. Format supports conid or conid@exchange",
                  "example": "8314@SMART"
                },
                "contract_description_1": {
                  "type": "string",
                  "description": "Format contract name",
                  "example": "FB Stock (NASDAQ.NMS)"
                },
                "condition_operator": {
                  "type": "string",
                  "description": "optional, operator for the current condition\n  * >= Greater than or equal to\n  * <= Less than or equal to\n",
                  "example": "- >= - <=\n"
                },
                "condition_trigger_method": {
                  "type": "string",
                  "description": "optional, only some type of conditions have triggerMethod",
                  "example": "0"
                },
                "condition_value": {
                  "type": "string",
                  "description": "can not be empty, can pass default value \"*\"",
                  "example": "220"
                },
                "condition_logic_bind": {
                  "type": "string",
                  "description": "Condition array should end with \"n\"\n  * a - AND\n  * o - OR\n  * n - END\n"
                },
                "condition_time_zone": {
                  "type": "string",
                  "description": "only needed for some MTA alert condition"
                }
              }
            }
          }
        }
      },
      "authStatus": {
        "type": "object",
        "properties": {
          "authenticated": {
            "type": "boolean",
            "description": "Brokerage session is authenticated"
          },
          "connected": {
            "type": "boolean",
            "description": "Connected to backend"
          },
          "competing": {
            "type": "boolean",
            "description": "Brokerage session is competing, e.g. user is logged in to IBKR Mobile, WebTrader, TWS or other trading platforms."
          },
          "fail": {
            "type": "string",
            "description": "Authentication failed, why."
          },
          "message": {
            "type": "string",
            "description": "System messages that may affect trading"
          },
          "prompts": {
            "type": "array",
            "description": "Prompt messages that may affect trading or the account",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "contract": {
        "type": "object",
        "properties": {
          "r_t_h": {
            "type": "boolean",
            "description": "true means you can trade outside RTH(regular trading hours)"
          },
          "con_id": {
            "type": "string",
            "description": "same as that in request"
          },
          "company_name": {
            "type": "string",
            "description": "Contracts company name"
          },
          "exchange": {
            "type": "string"
          },
          "local_symbol": {
            "type": "string",
            "description": "for exmple FB"
          },
          "instrument_type": {
            "type": "string",
            "description": "for example STK"
          },
          "currency": {
            "type": "string"
          },
          "companyName": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "rules": {
            "type": "object",
            "properties": {
              "orderTypes": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "store available order types for this contract"
                }
              },
              "orderTypesOutside": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "store available order types for this contract outside regular hours"
                }
              },
              "defaultSize": {
                "type": "number",
                "description": "default quantity you can use to place an order"
              },
              "sizeIncrement": {
                "type": "number"
              },
              "tifTypes": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "store available time-in-force types"
                }
              },
              "limitPrice": {
                "type": "number",
                "description": "default limit price you can use to prefill your order"
              },
              "stopprice": {
                "type": "number",
                "description": "default stop price you can use to prefill your order"
              },
              "preview": {
                "type": "boolean",
                "description": "if you can preview the order or not with the whatif endpoint"
              },
              "displaySize": {
                "type": "string"
              },
              "increment": {
                "type": "string"
              }
            }
          }
        },
        "description": "Contains all details of the contract, including rules you can use when placing orders"
      },
      "secdef-info": {
        "type": "object",
        "properties": {
          "conid": {
            "type": "number",
            "description": "IBKR contract identifier"
          },
          "symbol": {
            "type": "string",
            "description": "Underlying symbol"
          },
          "secType": {
            "type": "string",
            "description": "Security type"
          },
          "exchange": {
            "type": "string",
            "description": "Primary Exchange, Routing or Trading Venue"
          },
          "listingExchange": {
            "type": "string",
            "description": "Main Trading Venue"
          },
          "right": {
            "type": "string",
            "description": "Put or Call of the option. C = Call Option, P = Put Option"
          },
          "strike": {
            "type": "number",
            "description": "Set price at which a derivative contract can be bought or sold. The strike price also known as exercise price."
          },
          "currency": {
            "type": "string",
            "description": "Currency the contract trades in"
          },
          "cusip": {
            "type": "string",
            "description": "Committee on Uniform Securities Identification Procedures number"
          },
          "coupon": {
            "type": "string",
            "description": "Annual interest rate paid on a bond"
          },
          "desc1": {
            "type": "string",
            "description": "Currency pairs for Forex e.g. EUR.AUD, EUR.CAD, EUR.CHF etc."
          },
          "desc2": {
            "type": "string",
            "description": "Formatted expiration, strike and right"
          },
          "maturityDate": {
            "type": "number",
            "description": "Format YYYYMMDD, the date on which the underlying transaction settles if the option is exercised"
          },
          "multiplier": {
            "type": "string",
            "description": "Multiplier for total premium paid or received for derivative contract."
          },
          "tradingClass": {
            "type": "string",
            "description": "Designation of the contract."
          },
          "validExchanges": {
            "type": "string",
            "description": "Comma separated list of exchanges or trading venues."
          }
        },
        "description": "Contains some basic info of contract"
      },
      "history-data": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Underlying symbol"
          },
          "text": {
            "type": "string",
            "description": "companyName"
          },
          "priceFactor": {
            "type": "integer",
            "description": "priceFactor is price increment obtained from display rule",
            "example": 100
          },
          "startTime": {
            "type": "string",
            "description": "start date time in the format YYYYMMDD-HH:mm:ss"
          },
          "high": {
            "type": "string",
            "description": "High value during this time series with format %h/%v/%t. %h is the high price (scaled by priceFactor), %v is volume\n(volume factor will always be 100 (reported volume = actual volume/100)) and %t is minutes from start time of the chart\n"
          },
          "low": {
            "type": "string",
            "description": "Low value during this time series with format %l/%v/%t. %l is the low price (scaled by priceFactor), %v is volume\n(volume factor will always be 100 (reported volume = actual volume/100)) and %t is minutes from start time of the chart\n"
          },
          "timePeriod": {
            "type": "string",
            "description": "The duration for the historical data request"
          },
          "barLength": {
            "type": "integer",
            "description": "The number of seconds in a bar"
          },
          "mdAvailability": {
            "type": "string",
            "description": "Market Data Availability. The field may contain two chars. The first char is the primary code: S = Streaming, R = Realtime, D = Delayed,\nZ = Frozen, Y = Frozen Delayed. The second char is the secondary code: P = Snapshot Available, p = Consolidated.\n"
          },
          "mktDataDelay": {
            "type": "integer",
            "description": "The time it takes, in milliseconds, to process the historical data request"
          },
          "outsideRth": {
            "type": "boolean",
            "description": "The historical data returned includes outside of regular trading hours\n"
          },
          "tradingDayDuration": {
            "type": "integer",
            "description": "The number of seconds in the trading day"
          },
          "volumeFactor": {
            "type": "integer"
          },
          "priceDisplayRule": {
            "type": "integer"
          },
          "priceDisplayValue": {
            "type": "string"
          },
          "negativeCapable": {
            "type": "boolean"
          },
          "messageVersion": {
            "type": "integer"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "o": {
                  "type": "number",
                  "description": "open price"
                },
                "c": {
                  "type": "number",
                  "description": "close price"
                },
                "h": {
                  "type": "number",
                  "description": "high price"
                },
                "l": {
                  "type": "number",
                  "description": "low price"
                },
                "v": {
                  "type": "number",
                  "description": "volume"
                },
                "t": {
                  "type": "number",
                  "description": "unix time stamp"
                }
              }
            }
          },
          "points": {
            "type": "integer",
            "description": "total number of points"
          },
          "travelTime": {
            "type": "integer"
          }
        }
      },
      "trade": {
        "type": "object",
        "properties": {
          "execution_id": {
            "type": "string",
            "description": "execution identifier for the order"
          },
          "symbol": {
            "type": "string",
            "description": "Underlying Symbol"
          },
          "side": {
            "type": "string",
            "description": "The side of the market of the order.\n  * B - Buy contract near posted ask price\n  * S - Sell contract near posted bid price\n  * X - Option expired\n",
            "enum": [
              "B",
              "S",
              "X"
            ]
          },
          "order_description": {
            "type": "string",
            "description": "Formatted description of the order \"%side% %size% @ %price% on %exchange%\"."
          },
          "trade_time": {
            "type": "string",
            "description": "Time of Status update in format \"YYYYMMDD-hh:mm:ss\"."
          },
          "trade_time_r": {
            "type": "number",
            "description": "Time of status update in format unix time."
          },
          "size": {
            "type": "string",
            "description": "Quantity of the order"
          },
          "price": {
            "type": "string",
            "description": "Average Price"
          },
          "order_ref": {
            "type": "string",
            "description": "User defined string used to identify the order. Value is set using \"cOID\" field while placing an order."
          },
          "submitter": {
            "type": "string",
            "description": "User that submitted order"
          },
          "exchange": {
            "type": "string",
            "description": "Exchange or venue of order"
          },
          "commission": {
            "type": "number",
            "description": "Commission of the order"
          },
          "net_amount": {
            "type": "number",
            "description": "Net cost of the order, including contract multiplier and quantity."
          },
          "account": {
            "type": "string",
            "description": "accountCode"
          },
          "acountCode": {
            "type": "string",
            "description": "Account Number"
          },
          "company_name": {
            "type": "string",
            "description": "Contracts company name"
          },
          "contract_description_1": {
            "type": "string",
            "description": "Format contract name",
            "example": "FB Stock (NASDAQ.NMS)"
          },
          "sec_type": {
            "type": "string",
            "description": "Asset class",
            "example": "STK, FUT, OPT"
          },
          "conid": {
            "type": "string",
            "description": "IBKR's contract identifier"
          },
          "conidex": {
            "type": "string",
            "description": "conid and exchange. Format supports conid or conid@exchange"
          },
          "position": {
            "type": "string",
            "description": "Total quantity owned for this contract"
          },
          "clearing_id": {
            "type": "string",
            "description": "Firm which will settle the trade. For IBExecution customers only."
          },
          "clearing_name": {
            "type": "string",
            "description": "Specifies the true beneficiary of the order. For IBExecution customers only."
          },
          "liquidation_trade": {
            "type": "number",
            "description": "If order adds liquidity to the market."
          }
        }
      },
      "modify-order": {
        "type": "object",
        "properties": {
          "acctId": {
            "type": "string"
          },
          "conid": {
            "type": "integer"
          },
          "orderType": {
            "type": "string",
            "description": "for example LMT"
          },
          "outsideRTH": {
            "type": "boolean"
          },
          "price": {
            "type": "number"
          },
          "auxPrice": {
            "type": "number"
          },
          "side": {
            "type": "string",
            "description": "SELL or BUY"
          },
          "listingExchange": {
            "type": "string",
            "description": "optional, not required"
          },
          "ticker": {
            "type": "string",
            "description": "The ticker symbol of the original place order"
          },
          "tif": {
            "type": "string",
            "description": "Specify a time in force to change how long your order will continue to work in the market",
            "example": "tif = DAY to tif = GTC"
          },
          "quantity": {
            "type": "number",
            "description": "usually integer, for some special cases can be float numbers"
          },
          "deactivated": {
            "type": "boolean",
            "description": "Set to true if you want to pause a working order.\nFor details refer to the [TWS Users' Guide:](https://guides.interactivebrokers.com/tws/twsguide.html#usersguidebook/getstarted/pause_execution.htm)\n"
          }
        }
      },
      "order-request": {
        "type": "object",
        "properties": {
          "acctId": {
            "type": "string",
            "description": "acctId is optional. It should be one of the accounts returned by\n/iserver/accounts. If not passed, the first one in the list is selected.\n"
          },
          "conid": {
            "type": "integer",
            "description": "conid is the identifier of the security you want to trade, you can find the\nconid with /iserver/secdef/search.\n"
          },
          "conidex": {
            "type": "string",
            "description": "Conid and Exchange - Can be used instead of conid when specifying the contract identifier of a security.\n",
            "example": "conidex = 265598"
          },
          "secType": {
            "type": "string",
            "description": "The contract-identifier (conid) and security type (type) specified as a concatenated value, conid:type",
            "example": "secType = 265598:STK"
          },
          "cOID": {
            "type": "string",
            "description": "Customer Order ID. An arbitrary string that can be used to identify the order, e.g \"my-fb-order\". The\nvalue must be unique for a 24h span. Please do not set this value for child orders when placing a bracket order.\n"
          },
          "parentId": {
            "type": "string",
            "description": "Only specify for child orders when placing bracket orders. The parentId for the child order(s) must be equal to the cOId (customer order id) of the parent.\n"
          },
          "orderType": {
            "type": "string",
            "description": "The order-type determines what type of order you want to send.\n  * LMT - A limit order is an order to buy or sell at the specified price or better.\n  * MKT - A market order is an order to buy or sell at the markets current NBBO.\n  * STP - A stop order becomes a market order once the specified stop price is attained or penetrated.\n  * STOP_LIMIT - A stop limit order becomes a limit order once the specified stop price is attained or penetrated.\n  * MIDPRICE - A MidPrice order attempts to fill at the current midpoint of the NBBO or better.\n  * TRAIL - A sell trailing stop order sets the stop price at a fixed amount below the market price with an attached \"trailing\" amount. See more details here: https://ndcdyn.interactivebrokers.com/en/index.php?f=605\n  * TRAILLMT - A trailing stop limit order is designed to allow an investor to specify a limit on the maximum possible loss, without setting a limit on the maximum possible gain.\n    See more details here: https://ndcdyn.interactivebrokers.com/en/index.php?f=606\n"
          },
          "listingExchange": {
            "type": "string",
            "description": "listingExchange is optional. By default we use \"SMART\" routing. Possible values are available via the endpoint: /iserver/contract/{conid}/info,\nsee **valid_exchange** e.g: SMART,AMEX,NYSE,CBOE,ISE,CHX,ARCA,ISLAND,DRCTEDGE,BEX,BATS,EDGEA,CSFBALGO,JE FFALGO,BYX,IEX,FOXRIVER,TPLUS1,NYSENAT,PSX\n"
          },
          "isSingleGroup": {
            "type": "boolean",
            "description": "set to true if you want to place a single group orders(OCA)\n"
          },
          "outsideRTH": {
            "type": "boolean",
            "description": "set to true if the order can be executed outside regular trading hours.\n"
          },
          "price": {
            "type": "number",
            "description": "optional if order is LMT, or STOP_LIMIT, this is the limit price. For STP|TRAIL this is the stop price. For MIDPRICE this is the option price cap.\n"
          },
          "auxPrice": {
            "type": "object",
            "description": "optional if order is STOP_LIMIT|TRAILLMT, this is the stop price. You must specify both price and auxPrice for STOP_LIMIT|TRAILLMT orders.\n"
          },
          "side": {
            "type": "string",
            "description": "SELL or BUY"
          },
          "ticker": {
            "type": "string",
            "description": "This is the  underlying symbol for the contract.\n"
          },
          "tif": {
            "type": "string",
            "description": "The Time-In-Force determines how long the order remains active on the market.\n  * GTC - use Good-Till-Cancel for orders to remain active until it executes or cancelled.\n  * OPG - use Open-Price-Guarantee for Limit-On-Open (LOO) or Market-On-Open (MOO) orders.\n  * DAY - if not executed a Day order will automatically cancel at the end of the markets regular trading hours.\n  * IOC - any portion of an Immediate-or-Cancel order that is not filled as soon as it becomes available in the market is cancelled.\n"
          },
          "trailingAmt": {
            "type": "number",
            "description": "optional if order is TRAIL, or TRAILLMT. When trailingType is amt, this is the trailing amount, when trailingType is %, it means percentage.\nYou must specify both trailingType and trailingAmt for TRAIL and TRAILLMT order\n"
          },
          "trailingType": {
            "type": "string",
            "description": "This is the trailing type for trailing amount. We only support two types here: amt or %.\nYou must specify both trailingType and trailingAmt for TRAIL and TRAILLMT order\n",
            "example": "amt"
          },
          "referrer": {
            "type": "string",
            "description": "Custom order reference\n",
            "example": "QuickTrade"
          },
          "quantity": {
            "type": "number",
            "description": "Usually integer, for some special cases such as fractional orders can specify as a float, e.g. quantity = 0.001.\nIn some special cases quantity is not specified, such as when using 'cashQty' or 'fxQty'.\n"
          },
          "cashQty": {
            "type": "number",
            "description": "Cash Quantity - used to specify the monetary value of an order instead of the number of shares. When using 'cashQty' don't specify 'quantity'\nOrders that express size using a monetary value, e.g. cash quantity can result in fractional shares and are provided on a non-guaranteed basis.\nThe system simulates the order by canceling it once the specified amount is spent (for buy orders) or collected (for sell orders).\nIn addition to the monetary value, the order uses a maximum size that is calculated using the Cash Quantity Estimated Factor, which can be modified in Order Presets.  \n"
          },
          "fxQty": {
            "type": "number",
            "description": "double number, this is the cash quantity field which can only be used for Currency Conversion Orders. When using 'fxQty' don't specify 'quantity'.\n"
          },
          "useAdaptive": {
            "type": "boolean",
            "description": "If true, the system will use the Price Management Algo to submit the order.\nhttps://www.interactivebrokers.com/en/index.php?f=43423\n"
          },
          "isCcyConv": {
            "type": "boolean",
            "description": "set to true if the order is a FX conversion order\n"
          },
          "allocationMethod": {
            "type": "string",
            "description": "Set the allocation method when placing an order using an FA account for a group\nPossible allocation methods are \"NetLiquidity\", \"AvailableEquity\", \"EqualQuantity\" and \"PctChange\".\n"
          },
          "strategy": {
            "type": "string",
            "description": "Specify which IB Algo algorithm to use for this order.\n"
          },
          "strategyParameters": {
            "type": "object",
            "properties": {},
            "description": "The IB Algo parameters for the specified algorithm.\n"
          }
        }
      },
      "order": {
        "type": "object",
        "properties": {
          "acct": {
            "type": "string",
            "description": "account id"
          },
          "conid": {
            "type": "integer"
          },
          "orderDesc": {
            "type": "string"
          },
          "description1": {
            "type": "string"
          },
          "ticker": {
            "type": "string",
            "description": "for example FB"
          },
          "secType": {
            "type": "string",
            "description": "for example STK"
          },
          "listingExchange": {
            "type": "string",
            "description": "for example NASDAQ.NMS"
          },
          "remainingQuantity": {
            "type": "string"
          },
          "filledQuantity": {
            "type": "string"
          },
          "companyName": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "* PendingSubmit - Indicates the order was sent, but confirmation has not been received that it has been received by the destination.\n                  Occurs most commonly if an exchange is closed.\n* PendingCancel - Indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation. * PreSubmitted - Indicates that a simulated order type has been accepted by the IBKR system and that this order has yet to be elected.\n                 The order is held in the IBKR system until the election criteria are met. At that time the order is transmitted to the order destination as specified.\n* Submitted - Indicates that the order has been accepted at the order destination and is working. * Cancelled - Indicates that the balance of the order has been confirmed cancelled by the IB system.\n              This could occur unexpectedly when IB or the destination has rejected the order.\n* Filled - Indicates that the order has been completely filled. * Inactive - Indicates the order is not working, for instance if the order was invalid and triggered an error message,\n             or if the order was to short a security and shares have not yet been located.\n"
          },
          "origOrderType": {
            "type": "string",
            "description": "for example Limit"
          },
          "side": {
            "type": "string",
            "description": "BUY or SELL"
          },
          "price": {
            "type": "number"
          },
          "bgColor": {
            "type": "string",
            "description": "back-ground color"
          },
          "fgColor": {
            "type": "string"
          },
          "orderId": {
            "type": "integer"
          },
          "parentId": {
            "type": "integer",
            "description": "Only exists in child order of bracket"
          },
          "order_ref": {
            "type": "string",
            "description": "User defined string used to identify the order. Value is set using \"cOID\" field while placing an order."
          }
        },
        "description": "contains all the order related info"
      },
      "order-status": {
        "type": "object",
        "properties": {
          "sub_type": {
            "type": "string",
            "description": "order sub-type"
          },
          "request_id": {
            "type": "string",
            "description": "order request id"
          },
          "order_id": {
            "type": "integer",
            "description": "system generated order id, unique per account"
          },
          "conidex": {
            "type": "string",
            "description": "conid and exchange. Format supports conid or conid@exchange"
          },
          "symbol": {
            "type": "string",
            "description": "Underlying symbol"
          },
          "side": {
            "type": "string",
            "description": "The side of the market of the order.\n  * B - Buy contract near posted ask price\n  * S - Sell contract near posted bid price\n  * X - Option expired\n",
            "enum": [
              "B",
              "S",
              "X"
            ]
          },
          "contract_description_1": {
            "type": "string",
            "description": "Format contract name",
            "example": "FB Stock (NASDAQ.NMS)"
          },
          "listing_exchange": {
            "type": "string",
            "description": "Trading Exchange or Venue",
            "example": "NASDAQ.NMS"
          },
          "option_acct": {
            "type": "string"
          },
          "company_name": {
            "type": "string",
            "description": "Contracts company name",
            "example": "APPLE INC"
          },
          "size": {
            "type": "string",
            "description": "Quantity updated"
          },
          "total_size": {
            "type": "string",
            "description": "Total quantity"
          },
          "currency": {
            "type": "string",
            "description": "Contract traded currency"
          },
          "account": {
            "type": "string",
            "description": "account id"
          },
          "order_type": {
            "type": "string",
            "description": "Types of orders",
            "example": "LIMIT"
          },
          "limit_price": {
            "type": "string",
            "description": "Limit price"
          },
          "stop_price": {
            "type": "string",
            "description": "Stop price"
          },
          "cum_fill": {
            "type": "string",
            "description": "Cumulative fill"
          },
          "order_status": {
            "type": "string",
            "description": "*  PendingSubmit - Indicates the order was sent, but confirmation has not been received that it has been received by the destination.\n                   Occurs most commonly if an exchange is closed.\n*  PendingCancel - Indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation. *  PreSubmitted - Indicates that a simulated order type has been accepted by the IBKR system and that this order has yet to be elected.\n                  The order is held in the IBKR system until the election criteria are met. At that time the order is transmitted to the order destination as specified.\n*  Submitted - Indicates that the order has been accepted at the order destination and is working. *  Cancelled - Indicates that the balance of the order has been confirmed cancelled by the IB system.\n               This could occur unexpectedly when IB or the destination has rejected the order.\n*  Filled - Indicates that the order has been completely filled. *  Inactive - Indicates the order is not working, for instance if the order was invalid and triggered an error message,\n              or if the order was to short a security and shares have not yet been located.\n"
          },
          "order_status_description": {
            "type": "string",
            "description": "Description of the order status"
          },
          "tif": {
            "type": "string",
            "description": "Time-in-Force - length of time order will continue working before it is canceled."
          },
          "fg_color": {
            "type": "string",
            "description": "Foreground color in hex format"
          },
          "bg_color": {
            "type": "string",
            "description": "Background color in hex format"
          },
          "order_not_editable": {
            "type": "boolean",
            "description": "If true not allowed to modify order"
          },
          "editable_fields": {
            "type": "string",
            "description": "Fields that can be edited in escaped unicode characters",
            "example": "\\u001E"
          },
          "cannot_cancel_order": {
            "type": "boolean",
            "description": "If true not allowed to cancel order"
          },
          "outside_rth": {
            "type": "boolean",
            "description": "If true order trades outside regular trading hours"
          },
          "deactivate_order": {
            "type": "boolean",
            "description": "If true order is de-activated"
          },
          "use_price_mgmt_algo": {
            "type": "boolean",
            "description": "If true price management algo is enabled, refer to https://www.interactivebrokers.com/en/index.php?f=43423"
          },
          "sec_type": {
            "type": "string",
            "description": "Asset class",
            "example": "STK"
          },
          "available_chart_periods": {
            "type": "string",
            "description": "List of available chart periods"
          },
          "order_description": {
            "type": "string",
            "description": "Format description of order",
            "example": "BUY 100 LIMIT 125.0 DAY"
          },
          "order_description_with_contract": {
            "type": "string",
            "description": "order_description with the symbol",
            "example": "BUY 100 AAPL LIMIT 125.0 DAY"
          },
          "alert_active": {
            "type": "integer"
          },
          "child_order_type": {
            "type": "string",
            "description": "type of the child order",
            "example": "A=attached, B=beta-hedge, etc"
          },
          "size_and_fills": {
            "type": "string",
            "description": "Format fillQuantity\\totalQuantity",
            "example": "0/9"
          },
          "exit_strategy_display_price": {
            "type": "string",
            "description": "Position display price"
          },
          "exit_strategy_chart_description": {
            "type": "string",
            "description": "Position description to display on chart"
          },
          "exit_strategy_tool_availability": {
            "type": "string",
            "description": "* 1: If your account has position or order for contract * 0: If your account has no position or order for contract\n",
            "enum": [
              "1",
              "0"
            ]
          },
          "allowed_duplicate_opposite": {
            "type": "boolean",
            "description": "Returns true if contract supports duplicate/opposite side order."
          },
          "order_time": {
            "type": "string",
            "description": "Time of status update in unix time"
          },
          "oca_group_id": {
            "type": "string",
            "description": "only exists for oca orders, oca orders in same group will have same id"
          }
        },
        "description": "contains all the details of an order"
      },
      "set-account": {
        "type": "object",
        "properties": {
          "acctId": {
            "type": "string",
            "description": "Account ID"
          }
        }
      },
      "system-error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      }
    }
  },
  "x-original-swagger-version": "2.0"
}